Index: dom-cal/private/dom-cal/Makefile
diff -u dom-cal/private/dom-cal/Makefile:1.8.2.1 dom-cal/private/dom-cal/Makefile:1.12
--- dom-cal/private/dom-cal/Makefile:1.8.2.1	Tue Aug  2 09:40:57 2005
+++ dom-cal/private/dom-cal/Makefile	Mon Sep 19 11:53:46 2005
@@ -13,7 +13,7 @@
 #
 # Add new calibration routines here
 #
-CALOBJS  = atwd_cal.o amp_cal.o atwd_freq_cal.o pulser_cal.o hv_gain_cal.o baseline_cal.o hv_amp_cal.o transit_cal.o
+CALOBJS  = atwd_cal.o amp_cal.o atwd_freq_cal.o pulser_cal.o hv_gain_cal.o baseline_cal.o hv_amp_cal.o transit_cal.o fast_acq.o
 
 EXOBJS = calUtils.o spefit.o lmfit.o
 KOBJS = ../lib/crt0.o ../lib/libkernel.a
Index: dom-cal/private/dom-cal/domcal.c
diff -u dom-cal/private/dom-cal/domcal.c:1.40.2.1 dom-cal/private/dom-cal/domcal.c:1.53
--- dom-cal/private/dom-cal/domcal.c:1.40.2.1	Tue Aug  2 09:40:57 2005
+++ dom-cal/private/dom-cal/domcal.c	Wed Sep 21 13:17:01 2005
@@ -359,6 +359,7 @@
 
     /* Write transit time data if necessary */
     if (cal->transit_calib_valid) {
+        offset += get_bytes_from_short( cal->transit_calib_points, bin_data, offset );
         offset += write_fit(&cal->transit_calib, bin_data, offset);
     }
 
@@ -463,7 +464,7 @@
 #endif
 
     /* Calculate record length */
-    short r_size = DEFAULT_RECORD_LENGTH;
+    int r_size = DEFAULT_RECORD_LENGTH;
     if ( dom_calib.hv_gain_valid ) {
         r_size += 12; //log-log fit
     }
@@ -486,7 +487,8 @@
 
     r_size += 2; //transit_calib_valid
     if (dom_calib.transit_calib_valid) {
-        /* Transit cal */
+        /* Number of points and linear fit */
+        r_size +=  2;
         r_size += 12;
     }
 
@@ -581,7 +583,7 @@
 
     /* FIX ME: FADC calibration is a placeholder */
     dom_calib.fadc_values[0] = 0;
-    dom_calib.fadc_values[1] = 0;
+    dom_calib.fadc_values[1] = 1; //set default gain to 1.0
 
     /* Write calibration record to flash */
     int save_ret = save_results( dom_calib );
Index: dom-cal/private/dom-cal/domcal.h
diff -u dom-cal/private/dom-cal/domcal.h:1.35.2.1 dom-cal/private/dom-cal/domcal.h:1.56
--- dom-cal/private/dom-cal/domcal.h:1.35.2.1	Tue Aug  2 09:40:57 2005
+++ dom-cal/private/dom-cal/domcal.h	Wed Sep 21 13:17:01 2005
@@ -2,6 +2,8 @@
  * domcal.h
  */
 
+#ifndef _DOMCAL_H_
+#define _DOMCAL_H_
 /* Print debugging information */
 #define DEBUG 1
 
@@ -9,7 +11,7 @@
  * be incremented when changing structure of binary output
  */
 #define MAJOR_VERSION 5
-#define MINOR_VERSION 9
+#define MINOR_VERSION 13
 
 /* Default number of bytes in binary output */
 #define DEFAULT_RECORD_LENGTH 9388
@@ -127,7 +129,11 @@
     /* Valid bit for PMT transit calibration */
     short transit_calib_valid;
 
+    /* Number of valid transit time points */
+    short transit_calib_points;
+
     /* Histograms */
     hv_histogram* histogram_data;
 
 } calib_data;
+#endif
Index: dom-cal/private/dom-cal/fast_acq.c
diff -u /dev/null dom-cal/private/dom-cal/fast_acq.c:1.1
--- /dev/null	Thu Oct  6 09:02:09 2005
+++ dom-cal/private/dom-cal/fast_acq.c	Mon Sep 19 11:53:46 2005
@@ -0,0 +1,147 @@
+/*
+ * fast-acq.c -- routines to acquire ATWD voltage data with greatly reduced
+ *               floating point calls
+ *
+ */
+
+#include <stdio.h>
+#include <math.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "hal/DOM_MB_hal.h"
+#include "hal/DOM_MB_fpga.h"
+
+#include "domcal.h"
+#include "fast_acq.h"
+#include "calUtils.h"
+
+/* Convert voltage v (in volts) to volt_t units */
+volt_t to_volt_t(float v) {
+    if (fabs(v) > 19.0) return OUT_OF_RANGE;
+    return (volt_t)(v * 10000000);
+}
+
+/* Convert volt_t value back to volts */
+float to_v(volt_t v) {
+    return ((float)v)/10000000.0;
+}
+
+/* Build integer linear fit table for ATWD calibration
+ * We could make the amplifier calibration integer as well
+ * but this would be sloppy....just stick to the basics for now
+ */
+void build_integer_calib(calib_data *dom_calib, integer_calib *int_calib) {
+
+    int ch, bin;
+
+    for (ch = 0; ch < 3; ch++) {
+        for (bin = 0; bin < 128; bin++) {
+            /* Converting y-axis -- just use to_volt_t ! */
+            int_calib->atwd0_gain_calib[ch][bin].slope =
+                to_volt_t(dom_calib->atwd0_gain_calib[ch][bin].slope);
+            int_calib->atwd0_gain_calib[ch][bin].y_intercept =
+                to_volt_t(dom_calib->atwd0_gain_calib[ch][bin].y_intercept);
+
+            int_calib->atwd1_gain_calib[ch][bin].slope =
+                to_volt_t(dom_calib->atwd1_gain_calib[ch][bin].slope);
+            int_calib->atwd1_gain_calib[ch][bin].y_intercept =
+                to_volt_t(dom_calib->atwd1_gain_calib[ch][bin].y_intercept);
+
+        }
+        /* copy over amplifier data reference */
+        int_calib->amplifier_calib[ch] = dom_calib->amplifier_calib[ch];
+        
+    }
+
+}
+
+/* 
+ * Fast waveform acquisition call -- use integer calibration
+ * information to eliminate wasteful floating point calls
+ * Expect a factor ~5 improvement over fpu calibration when
+ * amplifier calibration is requested, and ~100 factor when 
+ * amplifier calibration is avoided!
+ */
+
+void fast_acq_wf(volt_t *wf_dat,
+                 int atwd,
+                 int cnt,
+                 int offset,
+                 int trigger_mask,
+                 volt_t bias_v,
+                 integer_calib *int_calib,
+                 volt_t baseline[2][3],
+                 int *ch,
+                 int trig,
+                 int do_amp_cal,
+                 int prescan) {
+    
+    short channels[2][cnt];
+    int bin;
+
+    if (prescan) {
+
+        /* Warm up the ATWD */
+        prescanATWD(trigger_mask);
+
+    }
+
+    /* Which trigger for the ATWD? */
+    if (trig == LED_TRIGGER) {
+        hal_FPGA_TEST_trigger_LED(trigger_mask);
+    } else if (trig == DISC_TRIGGER){
+        hal_FPGA_TEST_trigger_disc(trigger_mask);
+    } else {
+        /* Default to CPU trigger */
+        hal_FPGA_TEST_trigger_forced(trigger_mask);
+    }
+
+    /* Wait for done */
+    while (!hal_FPGA_TEST_readout_done(trigger_mask));
+
+    /* Read out only waveform from channels 0 and 1 */
+    /* We need channel 1 if our PMT is exceptionally high gain! */
+    if (atwd == 0) {
+        hal_FPGA_TEST_readout(channels[0], channels[1], NULL, NULL,
+                              NULL, NULL, NULL, NULL,
+                              cnt, NULL, 0, trigger_mask);
+    } else {
+        hal_FPGA_TEST_readout(NULL, NULL, NULL, NULL,
+                              channels[0], channels[1], NULL, NULL,
+                              cnt, NULL, 0, trigger_mask);
+    }
+
+    /* Make sure we aren't in danger of saturating channel 0 */
+    /* If so, switch to channel 1 */
+    *ch = 0;
+    for (bin = offset; bin < cnt; bin++) {
+       if (channels[0][bin] > 800) {
+            *ch = 1;
+            break;
+        }
+    }
+
+    /* Need to convert wf to volt_t output */
+    for (bin = offset; bin < cnt; bin++) {
+
+        if (atwd == 0) {
+            wf_dat[bin] = channels[*ch][bin] * int_calib->atwd0_gain_calib[*ch][bin].slope
+                + int_calib->atwd0_gain_calib[*ch][bin].y_intercept
+                - baseline[atwd][*ch];
+        } else {
+            wf_dat[bin] = channels[*ch][bin] * int_calib->atwd1_gain_calib[*ch][bin].slope
+                + int_calib->atwd1_gain_calib[*ch][bin].y_intercept
+                - baseline[atwd][*ch];
+        }
+
+        /* Also subtract out bias voltage */
+        wf_dat[bin] -= bias_v;
+
+        /* Divide by measured amplifier gain if requested */
+        if (do_amp_cal) {
+            wf_dat[bin] = (volt_t)((float)wf_dat[bin] / int_calib->amplifier_calib[*ch].value);
+        }
+
+    }
+}
Index: dom-cal/private/dom-cal/fast_acq.h
diff -u /dev/null dom-cal/private/dom-cal/fast_acq.h:1.1
--- /dev/null	Thu Oct  6 09:02:09 2005
+++ dom-cal/private/dom-cal/fast_acq.h	Mon Sep 19 11:53:46 2005
@@ -0,0 +1,70 @@
+/*
+ * fast-acq.h -- utility for fast (no floating-point) DOM voltage waveform
+ *               acquisition
+ *
+ */
+
+#ifndef _FAST_ACQ_
+#define _FAST_ACQ_
+
+#include "domcal.h"
+
+/* Basic integer volt measure */
+/* volt_t * 10000000 = 1V -- volt_t is 10nV */
+/* This allows -20V - +20V within 32bit range */ 
+typedef int volt_t;
+
+/* Integer representation of a linear fit */
+/* Reasonable when m, b >> 1 */
+typedef struct {
+
+    volt_t slope, y_intercept;
+
+} volt_t_fit;    
+
+/* Calibration struct with integer values */
+typedef struct {
+
+    /* ATWD gain calibration */
+    volt_t_fit atwd0_gain_calib[3][128];
+    volt_t_fit atwd1_gain_calib[3][128];
+
+    /* Copy of amplifier calibration */
+    value_error amplifier_calib[3];
+
+} integer_calib;
+
+/* Unit conversions */
+int to_volt_t(float v);
+float to_v(volt_t v);
+
+/* indicates voltage value is out of volt_t range */
+#define OUT_OF_RANGE 0x7FFFFFFF;
+
+/* Routine to build necessary integer calibration tables */
+void build_integer_calib(calib_data *dom_calib, integer_calib *int_calib);
+
+/* Routine to acquire calibrated waveform
+ * cpu  ==> trig = 0;
+ * LED  ==> trig = 1;
+ * disc ==> trig = 2;
+ *
+ */
+
+#define LED_TRIGGER  1
+#define CPU_TRIGGER  0
+#define DISC_TRIGGER 2
+
+void fast_acq_wf(volt_t *wf_dat,
+                 int atwd,
+                 int cnt,
+                 int offset,
+                 int trigger_mask,
+                 volt_t bias_v,
+                 integer_calib *int_calib,
+                 volt_t baseline[2][3],
+                 int *ch,
+                 int trig,
+                 int do_amp_cal,
+                 int prescan);
+#endif
Index: dom-cal/private/dom-cal/hv_amp_cal.c
diff -u dom-cal/private/dom-cal/hv_amp_cal.c:1.13.2.1 dom-cal/private/dom-cal/hv_amp_cal.c:1.15
--- dom-cal/private/dom-cal/hv_amp_cal.c:1.13.2.1	Tue Aug  2 09:45:32 2005
+++ dom-cal/private/dom-cal/hv_amp_cal.c	Thu Sep 22 12:56:32 2005
@@ -59,10 +59,13 @@
     halWriteDAC(DOM_HAL_DAC_PMT_FE_PEDESTAL, AMP_CAL_PEDESTAL_DAC);   
     halWriteDAC(DOM_HAL_DAC_SINGLE_SPE_THRESH, HV_AMP_CAL_DISC_DAC);
     halWriteDAC((atwd == 0) ? DOM_HAL_DAC_ATWD0_TRIGGER_BIAS : 
-                DOM_HAL_DAC_ATWD1_TRIGGER_BIAS, AMP_CAL_SAMPLING_DAC);
+                DOM_HAL_DAC_ATWD1_TRIGGER_BIAS, HV_AMP_CAL_SAMPLING_DAC);
 
     bias_v = biasDAC2V(AMP_CAL_PEDESTAL_DAC);
 
+    /* Set the ATWD launch delay */
+    hal_FPGA_TEST_set_atwd_LED_delay(HV_AMP_CAL_ATWD_LAUNCH_DELAY);
+
     /* Turn on high voltage base */
 #if defined DOMCAL_REV2 || defined DOMCAL_REV3
     halEnablePMT_HV();
@@ -86,62 +89,93 @@
     /* Trigger one ATWD only */
     trigger_mask = (atwd == 0) ? HAL_FPGA_TEST_TRIGGER_ATWD0 : HAL_FPGA_TEST_TRIGGER_ATWD1;
 
-    /* Loop over channels and pulser settings for each channel */
-    for (ch = 1; ch < 3; ch++) {
-
-        /* Check rate -- do we need to turn on LED? */
-        float rate = 0;
+    /* Build a rough histogram to find PMT saturation point */
+    float av[LED_MAX_AMPLITUDE];
+    int sat = -1;
+
+    for (i = 0; i < LED_MAX_AMPLITUDE; i++) av[i] = 0.0;
+
+    /* Turn on LED */
+    hal_FPGA_TEST_enable_LED();
+    halEnableLEDPS();
+
+    /* Fill histogram */
+    int led_amplitude;
+    for (led_amplitude = LED_MAX_AMPLITUDE - 1; led_amplitude >= 0;
+                                             led_amplitude -= HV_AMP_CAL_HISTOGRAM_DEC) {
 
-        /* LED amplitude */
-        short led_amplitude = LED_OFF;
+        /* Set new amplitude */
+        halWriteDAC(DOM_HAL_DAC_LED_BRIGHTNESS, led_amplitude);
+        halUSleep(DAC_SET_WAIT);
 
-        rate = measure_rate(atwd, ch-1);
+        /* Calculate our average atwd response to LED signal */
+        av[led_amplitude] = get_average_amplitude(atwd, 1, HV_AMP_CAL_HISTOGRAM_TRIG_TIME);
+        printf("LED response: DAC: %d Amp: %f\n", led_amplitude, av[led_amplitude]);
+
+        /* Check whether we need to continue */
+        if (av[led_amplitude] > 800.0) {
+            sat = led_amplitude;
+            break;
+        }
+    }
 
-        while (rate < MIN_PULSE_RATE) {
-
-            /* OK -- not enough signal */
-            /* Turn on MB LED if off -- otherwise inc amplitude until */
-            /* we can see it */
-            if (led_amplitude == LED_OFF) {
-                 
-                hal_FPGA_TEST_enable_LED();
-                halEnableLEDPS();
-                led_amplitude = LED_MAX_AMPLITUDE;
-            } else {
-                led_amplitude -= LED_AMPLITUDE_DEC;
+    if (sat == -1) {
+        /* OK -- we didn't find a saturation point -- maybe we have a weak LED */
+        /* Find maximum */
+        float max = 0.0;
+        for (i = LED_MAX_AMPLITUDE - 1; i >= 0; i -= HV_AMP_CAL_HISTOGRAM_DEC) {
+            if (av[i] > max) {
+                max = av[i];
+                sat = i;
             }
+        }
+    }
 
-            /* Can't do calibration if rate is too low */
-            if (led_amplitude < 0) {
-                /* FIX ME -- flag failure using ch2 gain error */
-                dom_calib->amplifier_calib[2].error = -1.0;
-
-                /* Put the DACs back to original state */
-                halWriteDAC(DOM_HAL_DAC_PMT_FE_PEDESTAL, origBiasDAC);
-                halWriteDAC(DOM_HAL_DAC_SINGLE_SPE_THRESH, origDiscDAC);
-                halWriteDAC((atwd == 0) ? DOM_HAL_DAC_ATWD0_TRIGGER_BIAS :
-                                DOM_HAL_DAC_ATWD1_TRIGGER_BIAS, origSampDAC);
-                if (led_amplitude != LED_OFF) {
-                    halWriteDAC(DOM_HAL_DAC_LED_BRIGHTNESS, old_led_value);
-                    halDisableLEDPS();
-                    hal_FPGA_TEST_disable_LED();
-                }
-                
-                return ERR_LOW_RATE;
-            }
+    /* Reset LED DAC, let pmt recover */
+    halWriteDAC(DOM_HAL_DAC_LED_BRIGHTNESS, LED_MAX_AMPLITUDE);
+    halUSleep(DAC_SET_WAIT);        
+
+    /* Loop over channels and pulser settings for each channel */
+    for (ch = 1; ch < 3; ch++) {
+
+        /* Do binary search to place average LED pulse at prime level */
+        int l_max = LED_MAX_AMPLITUDE;
+        int l_min = sat;
+
+        /* We stop when max and min agree */
+        while (l_max - l_min > 0) {
 
-            /* Apply new setting and wait */
+            /* Calculate and set new amplitude */
+            led_amplitude = (l_max + l_min) / 2;
             halWriteDAC(DOM_HAL_DAC_LED_BRIGHTNESS, led_amplitude);
             halUSleep(DAC_SET_WAIT);
 
-            /* Measure rate */ 
-            rate = measure_rate(atwd, ch-1);
+            /* Calculate our average atwd response to LED signal */
+            float lev = get_average_amplitude(atwd, ch-1, TEST_TRIG_TIME);
 
-            /* FIX ME DEBUG */
-            printf("Rate: %f LED amplitude: %d\n", rate, led_amplitude); 
+            /* FIX ME debug */
+            printf("Search: DAC: %d Level: %f\n", led_amplitude, lev);
 
+            /* Are we above prime or below? */
+            if (lev < HV_AMP_CAL_BEST_PULSE) {
+                if (l_max - l_min > 1) {
+                    l_max = led_amplitude;
+                } else {
+                    l_max--;
+                }
+            } else {
+                if (l_max - l_min > 1) {
+                    l_min = led_amplitude;
+                } else {
+                    l_min++;
+                }
+            }
         }
 
+        /* Set LED to calculated best setting */
+        halWriteDAC(DOM_HAL_DAC_LED_BRIGHTNESS, l_max);
+        halUSleep(DAC_SET_WAIT);
+
         /* OK -- we have illumination.  Let's re-check the baseline because */
         /* just about everything affects it -- possibly even including the  */
         /* position of Jupiter and recent solar activity..... */
@@ -152,7 +186,7 @@
         /* FIX ME DEBUG */
         int iter = 0;
 
- 
+        /* Record start time */
         long long clk = hal_FPGA_TEST_get_local_clock();
         short cidx = 1;
 
@@ -163,8 +197,8 @@
             /* Warm up the ATWD */
             prescanATWD(trigger_mask);
             
-            /* Discriminator trigger the ATWD */
-            hal_FPGA_TEST_trigger_disc(trigger_mask);
+            /* LED trigger the ATWD */
+            hal_FPGA_TEST_trigger_LED(trigger_mask);
             
             /* Wait for done */
             while (!hal_FPGA_TEST_readout_done(trigger_mask)) {
@@ -259,7 +293,7 @@
                 for (i = 0; i < 2; i++) current_v[i] -= bias_v;
 
                 /* Note "peak" is actually a minimum */
-                if (bin == AMP_CAL_START_BIN) {
+                if (bin == HV_AMP_CAL_START_BIN) {
                     for (i = 0; i < 2; i++) {
                         peak_v[i] = current_v[i];
                         peak_bin[i] = bin;
@@ -282,7 +316,8 @@
             int mins[2];
             int maxes[2];
             for (i = 0; i < 2; i++) {
-                mins[i] = peak_bin[i] - CHARGE_FOW_BINS < AMP_CAL_START_BIN ? AMP_CAL_START_BIN : peak_bin[i] - CHARGE_FOW_BINS;
+                mins[i] = peak_bin[i] - CHARGE_FOW_BINS < HV_AMP_CAL_START_BIN ? 
+                                                    HV_AMP_CAL_START_BIN : peak_bin[i] - CHARGE_FOW_BINS;
                 maxes[i] = peak_bin[i] + CHARGE_REV_BINS > cnt-1 ? cnt-1 : peak_bin[i] + CHARGE_REV_BINS;
             }   
 
@@ -299,9 +334,8 @@
 
         }
 
-        /* Turn off LED and LED PS between channel calibration */
-        halDisableLEDPS();
-        hal_FPGA_TEST_disable_LED();
+        /* Turn down LED between channel calibration */
+        halWriteDAC(DOM_HAL_DAC_LED_BRIGHTNESS, LED_MAX_AMPLITUDE);
         halUSleep(DAC_SET_WAIT);
     }
 
@@ -335,6 +369,8 @@
     }
 
     /* Put the DACs back to original state */
+    halDisableLEDPS();
+    hal_FPGA_TEST_disable_LED();
     halWriteDAC(DOM_HAL_DAC_PMT_FE_PEDESTAL, origBiasDAC);   
     halWriteDAC(DOM_HAL_DAC_SINGLE_SPE_THRESH, origDiscDAC);
     halWriteDAC((atwd == 0) ? DOM_HAL_DAC_ATWD0_TRIGGER_BIAS : 
@@ -348,9 +384,13 @@
 
 }
 
-float measure_rate(int atwd, int ch) {
+float get_average_amplitude(int atwd, int ch, int trig_time_sec) {
+
+    /* NOTES:
+     * construct peak histograms instead?  Possibly better performance.
+     */
 
-    /* LED rate is >1KHz, so no prescan needed in this loop */
+    /* LED rate is 610Hz, so no prescan needed in this loop */
 
     /* ATWD readout */
     short channels[2][128];
@@ -362,18 +402,21 @@
     int cnt = 128;
 
     /* Number of pulses above threshold */
-    int p_cnt = 0;
+    int ct = 0;
+
+    /* Sum of maximum amplitudes */
+    int psum = 0;
 
     /* store start clk for rate measurement */
     long long clk_st = hal_FPGA_TEST_get_local_clock();
 
     long long clk;
     for (clk = hal_FPGA_TEST_get_local_clock();
-            clk - clk_st < TEST_TRIG_TIME * FPGA_HAL_TICKS_PER_SEC;
+            clk - clk_st < trig_time_sec * FPGA_HAL_TICKS_PER_SEC;
             clk = hal_FPGA_TEST_get_local_clock()) {
 
         /* LED trigger the ATWD */
-        hal_FPGA_TEST_trigger_disc(trigger_mask);
+        hal_FPGA_TEST_trigger_LED(trigger_mask);
 
 
         /* Wait for done */
@@ -399,9 +442,10 @@
             if (channels[ch][bin] > max) max = channels[ch][bin];
         }
 
-        /* Is pulse of acceptable amplitude */
-        if (max > HV_AMP_CAL_MIN_PULSE && max < HV_AMP_CAL_MAX_PULSE) p_cnt++;
+        psum += max;
+        ct++;
     }
 
-    return (float)p_cnt / TEST_TRIG_TIME;
+    /* Return average peak amplitude */
+    return (float)psum / ct;
 }
Index: dom-cal/private/dom-cal/hv_amp_cal.h
diff -u dom-cal/private/dom-cal/hv_amp_cal.h:1.10.2.1 dom-cal/private/dom-cal/hv_amp_cal.h:1.12
--- dom-cal/private/dom-cal/hv_amp_cal.h:1.10.2.1	Tue Aug  2 09:45:32 2005
+++ dom-cal/private/dom-cal/hv_amp_cal.h	Thu Sep 22 12:56:32 2005
@@ -8,31 +8,23 @@
 /* Disc setting to eliminate most SPE */
 #define HV_AMP_CAL_DISC_DAC  900
 
-/* Max and min atwd bin cnt of ch i to calibrate ch i+1 */
+/* Max and min atwd peak cnt of ch i to calibrate ch i+1 */
 #define HV_AMP_CAL_MIN_PULSE 600
 #define HV_AMP_CAL_MAX_PULSE 800
 
+/* Best peak cnt for amplifier calibration */
+#define HV_AMP_CAL_BEST_PULSE 700
+
 /* Time constant for rate measurement */
 #define TEST_TRIG_TIME 5 //seconds
 
-/* LED amplitude decrement */
-#define LED_AMPLITUDE_DEC 5
-
-/* LED amplitude setting to denote LED is off */
-#define LED_OFF 0x6fff 
-
-/* Minimum acceptable rate of pulses capable of amp calibration */
-#define MIN_PULSE_RATE 8.0
-
-/* Maximum amplitude of LED */
+/* Maximum and minimum amplitude of LED */
 #define LED_MAX_AMPLITUDE 1023
+#define LED_MIN_AMPLITUDE 0
 
-/* Using LED -- pulse could be anywhere! */
+/* Using LED -- use delay to keep pulse on 1st half of ATWD */
 #define HV_AMP_CAL_START_BIN 0
 
-/* Error code returned due to low rate */
-#define ERR_LOW_RATE 2
-
 /* Error code returned due to timeout */
 #define ERR_TIMEOUT 3
 
@@ -43,7 +35,16 @@
 #define CHARGE_REV_BINS 6
 #define CHARGE_FOW_BINS 12
 
+/* ATWD launch delay */
+#define HV_AMP_CAL_ATWD_LAUNCH_DELAY 6
+
+/* Sampling speed */
+#define HV_AMP_CAL_SAMPLING_DAC 850
+
+/* Histogram Settings */
+#define HV_AMP_CAL_HISTOGRAM_DEC 5
+#define HV_AMP_CAL_HISTOGRAM_TRIG_TIME 2
+
 /* Prototypes */
 int hv_amp_cal(calib_data *dom_calib);
-float measure_rate(int atwd, int ch);
-short get_led_amp(short center, short var);
+float get_average_amplitude(int atwd, int ch, int sec);
Index: dom-cal/private/dom-cal/hv_gain_cal.c
diff -u dom-cal/private/dom-cal/hv_gain_cal.c:1.25.2.1 dom-cal/private/dom-cal/hv_gain_cal.c:1.37
--- dom-cal/private/dom-cal/hv_gain_cal.c:1.25.2.1	Tue Aug  2 09:40:57 2005
+++ dom-cal/private/dom-cal/hv_gain_cal.c	Mon Sep 19 11:53:46 2005
@@ -21,6 +21,7 @@
 #include "hv_gain_cal.h"
 #include "calUtils.h"
 #include "spefit.h"
+#include "fast_acq.h"
 
 /*---------------------------------------------------------------------------*/
 
@@ -29,16 +30,12 @@
     const int cnt = 128;
     int trigger_mask;
     short bias_dac;
-    int ch, bin, trig, peak_idx;
-    float bin_v, peak_v, vsum;
+    int ch, bin, trig, peak_idx, i;
+    float vsum;
 
     /* Which ATWD to use */
     short atwd = GAIN_CAL_ATWD;
 
-    /* Channel readout buffers for each channel and bin */
-    /* This test only uses a single ATWD, ch0 and ch1 */
-    short channels[2][128];
-    
     /* Charge arrays for each waveform */
     float charges[GAIN_CAL_TRIG_CNT];
 
@@ -75,7 +72,8 @@
 
     /* Get bias DAC setting */
     bias_dac = halReadDAC(DOM_HAL_DAC_PMT_FE_PEDESTAL);
-    float bias_v = biasDAC2V(bias_dac);
+    float bias_vv = biasDAC2V(bias_dac);
+    volt_t bias_v = to_volt_t(bias_vv);
 
     /* Make sure pulser is off */
     hal_FPGA_TEST_disable_pulser();
@@ -118,6 +116,10 @@
     short hv_idx = 0;
     short hv;
 
+    /* Build integer calibration tables */
+    integer_calib int_calib;
+    build_integer_calib(dom_calib, &int_calib);
+
     /* Loop over HV settings */
     for (hv_idx = 0; hv_idx < GAIN_CAL_HV_CNT; hv_idx++) {
         
@@ -172,100 +174,61 @@
             continue;
         }
 
-        /* retrieve baseline vals vor atwd/hv_idx, correct for amp gain */
-        
-        float baseline[3];
-        int i;
-        for (i = 0; i < 3; i++) baseline[i] = (atwd == 0) ? 
-                   dom_calib->baseline_data[hv_idx].atwd0_hv_baseline[i] / dom_calib->amplifier_calib[i].value :
-                   dom_calib->baseline_data[hv_idx].atwd1_hv_baseline[i] / dom_calib->amplifier_calib[i].value;
+        volt_t baseline[2][3];
+        for (i = 0; i < 3; i++) {
+            baseline[0][i] = to_volt_t(dom_calib->baseline_data[hv_idx].atwd0_hv_baseline[i]);
+            baseline[1][i] = to_volt_t(dom_calib->baseline_data[hv_idx].atwd1_hv_baseline[i]);
+        }
 
         /* Number of points with negative charge */
         int bad_trig = 0;
 
+        /* Index, used to determine prescan */
+        int idx = 0;
+
+        volt_t vdat[cnt];
+
         for (trig=0; trig<(int)GAIN_CAL_TRIG_CNT; trig++) {
                 
-            /* Warm up the ATWD */
-            prescanATWD(trigger_mask);
-            
-            /* Discriminator trigger the ATWD */
-            hal_FPGA_TEST_trigger_disc(trigger_mask);
-            
-            /* Wait for done */
-            while (!hal_FPGA_TEST_readout_done(trigger_mask));
-
-            /* Read out one waveform from channels 0 and 1 */
-            if (atwd == 0) {
-                hal_FPGA_TEST_readout(channels[0], channels[1], NULL, NULL, 
-                                      NULL, NULL, NULL, NULL,
-                                      cnt, NULL, 0, trigger_mask);
-            }
-            else {
-                hal_FPGA_TEST_readout(NULL, NULL, NULL, NULL,
-                                      channels[0], channels[1], NULL, NULL,
-                                      cnt, NULL, 0, trigger_mask);
-            }
+            fast_acq_wf(vdat, atwd, cnt, GAIN_CAL_START_BIN,
+                        trigger_mask, bias_v,
+                        &int_calib, baseline, &ch, DISC_TRIGGER, 0, !idx++);
 
-            /* Make sure we aren't in danger of saturating channel 0 */            
-            /* If so, switch to channel 1 */
-            ch = 0;
-            for (bin=0; bin<cnt; bin++) {
-                if (channels[0][bin] > 800) {
-                    ch = 1;
-                    break;
-                }
-            }
+            /* FIX ME DEBUG */
+            if (trig % 1000 == 0) printf("Reached trigger %d!\n", trig);
 
             /* Find the peak */
             peak_idx = 0;
-            if (atwd == 0) {
-                peak_v = (float)channels[ch][0] * dom_calib->atwd0_gain_calib[ch][0].slope
-                    + dom_calib->atwd0_gain_calib[ch][0].y_intercept;
-            }
-            else {
-                peak_v = (float)channels[ch][0] * dom_calib->atwd1_gain_calib[ch][0].slope
-                    + dom_calib->atwd1_gain_calib[ch][0].y_intercept;
-            }
+            volt_t min = 0.0;
+            for (bin = GAIN_CAL_START_BIN; bin < cnt; bin++) {
 
-            for (bin=96; bin<cnt; bin++) {
-
-                /* Use calibration to convert to V */
-                /* Don't need to subtract out bias or correct for amplification to find */
-                /* peak location -- but without correction, it is really a minimum */
-                if (atwd == 0) {
-                    bin_v = (float)channels[ch][bin] * dom_calib->atwd0_gain_calib[ch][bin].slope
-                        + dom_calib->atwd0_gain_calib[ch][bin].y_intercept;
-                }
-                else {
-                    bin_v = (float)channels[ch][bin] * dom_calib->atwd1_gain_calib[ch][bin].slope
-                        + dom_calib->atwd1_gain_calib[ch][bin].y_intercept;
-                }
-
-                if (bin_v < peak_v) {
+                if (bin == GAIN_CAL_START_BIN) {
+                    min = vdat[bin];
                     peak_idx = bin;
-                    peak_v = bin_v;
+                } else {
+                    if (vdat[bin] < min) {
+                        min = vdat[bin];
+                        peak_idx = bin;
+                    }
                 }
             }
 
-            /* Now integrate around the peak to get the charge */
-            /* FIX ME: increase sampling speed? */
-            /* FIX ME: use time window instead? */
+            /* Integrate wf */
             int int_min, int_max;
-            int_min = (peak_idx - INT_WIN_MIN >= 0) ? peak_idx - INT_WIN_MIN : 0;
+            int_min = (peak_idx - INT_WIN_MIN >= GAIN_CAL_START_BIN) ?
+                                         peak_idx - INT_WIN_MIN : GAIN_CAL_START_BIN;
             int_max = (peak_idx + INT_WIN_MAX <= cnt-1) ? peak_idx + INT_WIN_MAX : cnt-1;
             vsum = 0;
 
-            for (bin = int_min; bin <= int_max; bin++)
-                vsum += (getCalibV(channels[ch][bin], *dom_calib, atwd, ch, bin, bias_v) - baseline[ch]);
+            /* Do current integral -- work in front end 50 Ohm load */
+            /* to avoid integer overflow */
+            for (bin = int_min; bin <= int_max; bin++) vsum += vdat[bin]/50;
 
             /* True charge, in pC = 1/R_ohm * sum(V) * 1e12 / (freq_mhz * 1e6) */
-            /* FE sees a 50 Ohm load */
-            charges[trig] = 0.02 * 1e6 * vsum / freq;
+            /* Need to now divide by amplification factor */
+            charges[trig] =  (to_v(vsum) * 1e6 / freq) /
+                                          int_calib.amplifier_calib[ch].value;            
 
-            if (charges[trig] < 0) {
-                trig--;
-                if (++bad_trig > GAIN_CAL_TRIG_CNT) break;
-            }
 
         } /* End trigger loop */
 
@@ -283,7 +246,7 @@
         /* Create histogram of charge values */
         /* Heuristic maximum for histogram */
 	   
-        int hist_max = ceil(0.75*pow(10.0, 6.37*log10(hv*2)-21.0));
+        int hist_max = ceil(0.9*pow(10.0, 6.37*log10(hv*2)-21.0));
         int hbin;
 
         /* Initialize histogram */
@@ -346,8 +309,8 @@
             printf("Valley located at %.6g, %.6g: PV = %.2g\r\n", valley_x, valley_y, pv_ratio);
 #endif
             
-            /* If PV < 1.5, fit is likely messed up */
-            if (pv_ratio > 1.5) {
+            /* If PV < 1.1, we have fit problems */
+            if (pv_ratio > 1.1) {
 
                 log_hv[spe_cnt] = log10(hv);
                 log_gain[spe_cnt] = log10(fit_params[hv_idx][3] / Q_E) - 12.0;
Index: dom-cal/private/dom-cal/hv_gain_cal.h
diff -u dom-cal/private/dom-cal/hv_gain_cal.h:1.16.2.1 dom-cal/private/dom-cal/hv_gain_cal.h:1.20
--- dom-cal/private/dom-cal/hv_gain_cal.h:1.16.2.1	Tue Aug  2 09:40:57 2005
+++ dom-cal/private/dom-cal/hv_gain_cal.h	Mon Sep 19 11:53:46 2005
@@ -17,13 +17,13 @@
 #endif
 
 /* How many SPE waveforms to histogram */
-#define GAIN_CAL_TRIG_CNT      5000
+#define GAIN_CAL_TRIG_CNT     25000
 
 /* HV settings for gain calibration (in V) */
 /* Starting value, amount to increment, and number of settings */
-#define GAIN_CAL_HV_LOW        1200
-#define GAIN_CAL_HV_INC         100
-#define GAIN_CAL_HV_CNT           8
+#define GAIN_CAL_HV_LOW        1020
+#define GAIN_CAL_HV_INC          80
+#define GAIN_CAL_HV_CNT          12
 
 /* Histogram info */
 #define GAIN_CAL_BINS           250
@@ -44,6 +44,9 @@
 
 /* Number of PMT baseline ATWD readouts to take */
 #define BASELINE_TRIG_CNT      10
+
+/* bin to start looking for disc pulse */
+#define GAIN_CAL_START_BIN     96
 
 /* Prototypes */
 int hv_gain_cal(calib_data *dom_calib);
Index: dom-cal/private/dom-cal/spefit.c
diff -u dom-cal/private/dom-cal/spefit.c:1.18.2.1 dom-cal/private/dom-cal/spefit.c:1.25
--- dom-cal/private/dom-cal/spefit.c:1.18.2.1	Tue Aug  2 09:40:57 2005
+++ dom-cal/private/dom-cal/spefit.c	Fri Aug 19 02:08:57 2005
@@ -206,8 +206,8 @@
     if ( start_bin > pts / 20 )
         start_bin = ydata[nonzero_bin + 2] > ydata[nonzero_bin] ? nonzero_bin + 2 : nonzero_bin;
 
-    /*  OK -- let's chop off the last few % -- these are probably non-gaussian */
     ndata = pts;
+    /*  OK -- let's chop off the last few % -- these are probably non-gaussian */
     int tot = 0;
     for (; ndata > start_bin; ndata--) {
         tot += ydata[ndata-1];
Index: dom-cal/private/dom-cal/transit_cal.c
diff -u dom-cal/private/dom-cal/transit_cal.c:1.6.2.1 dom-cal/private/dom-cal/transit_cal.c:1.7
--- dom-cal/private/dom-cal/transit_cal.c:1.6.2.1	Tue Aug  2 09:45:32 2005
+++ dom-cal/private/dom-cal/transit_cal.c	Wed Sep 21 13:18:43 2005
@@ -8,6 +8,7 @@
  */
 
 #include <stdio.h>
+#include <stdlib.h>
 #include <math.h>
 
 #include "hal/DOM_MB_hal.h"
@@ -26,10 +27,14 @@
     int ch, bin, trig;
     float bias_v, peak_v, bin_v;
     int hv;
-        
+    int hv_tt_valid[TRANSIT_CAL_HV_CNT];
+
     /* Which atwd to use */
     short atwd = TRANSIT_CAL_ATWD;
     
+    /* Which channel to record light output */
+    ch = TRANSIT_CAL_CH;
+
     /* Trigger one ATWD only */
     trigger_mask = (atwd == 0) ? HAL_FPGA_TEST_TRIGGER_ATWD0 : HAL_FPGA_TEST_TRIGGER_ATWD1;
 
@@ -54,7 +59,6 @@
     short origBiasDAC = halReadDAC(DOM_HAL_DAC_PMT_FE_PEDESTAL);
     short origSampDAC = halReadDAC((atwd == 0) ? DOM_HAL_DAC_ATWD0_TRIGGER_BIAS : 
                                    DOM_HAL_DAC_ATWD1_TRIGGER_BIAS);
-    short origLedDAC  = halReadDAC(DOM_HAL_DAC_LED_BRIGHTNESS);
 
     /* Set discriminator and bias level */
     halWriteDAC(DOM_HAL_DAC_PMT_FE_PEDESTAL, TRANSIT_CAL_PEDESTAL_DAC);   
@@ -64,15 +68,22 @@
     /* Set the launch delay */
     hal_FPGA_TEST_set_atwd_LED_delay(TRANSIT_CAL_LAUNCH_DELAY);
 
-    /* Enable the analog mux and select the mainboard LED current */
-    halSelectAnalogMuxInput(DOM_HAL_MUX_PMT_LED_CURRENT);
-
     /* Get bias voltage */
     bias_v = biasDAC2V(TRANSIT_CAL_PEDESTAL_DAC);
    
     /* Get sampling speed frequency in MHz */    
     float freq = getCalibFreq(atwd, *dom_calib, TRANSIT_CAL_SAMPLING_DAC);
 
+    /* Select mainboard LED */
+    halSelectAnalogMuxInput(DOM_HAL_MUX_PMT_LED_CURRENT);
+    
+    /* Need to use LED triggers, because the 20MHz clock couples into the signal */
+    /* Using LED triggers without LED power, we can largely subtract this out! */
+    halDisableLEDPS();
+
+    /* Start "flashing" */
+    hal_FPGA_TEST_enable_LED();
+
     /* Give user a final warning */
 #ifdef DEBUG
     printf(" *** WARNING: enabling HV in 5 seconds! ***\r\n");
@@ -90,19 +101,14 @@
     /* Ensure HV base exists before performing calibration */
     if (!checkHVBase()) {
         dom_calib->transit_calib_valid = 0;
-        return 0;
+        dom_calib->transit_calib.slope = 0.0; 
+        dom_calib->transit_calib.y_intercept = 0.0;
+        dom_calib->transit_calib.r_squared = 0.0;
+        return TRANSIT_CAL_NO_HV_BASE;
     }
 
     /*---------------------------------------------------------------------------*/    
-    /* Turn on the LED power supply before measuring pedestal */                
-
-    /* Need to use LED triggers, because the 20MHz clock couples into the signal */
-    /* Using LED triggers without LED power, we can largely subtract this out! */
-
-    halDisableLEDPS();
-
-    /* Start "flashing" */
-    hal_FPGA_TEST_enable_LED();
+    /* Measure pedestal of channel 3 */
 
     /* Get pedestal for channel 3 (uncalibrated!) */
     for (bin=0; bin<cnt; bin++)
@@ -112,11 +118,11 @@
             
         /* Warm up the ATWD */
         prescanATWD(trigger_mask);
-            
+
         /* LED-trigger the ATWD */
         hal_FPGA_TEST_trigger_LED(trigger_mask);
-            
-            /* Wait for done */
+
+        /* Wait for done */
         while (!hal_FPGA_TEST_readout_done(trigger_mask));
         
         /* Read out one waveform for channel 3 */        
@@ -140,22 +146,30 @@
     for (bin = 0; bin<cnt; bin++)
         pedestal[bin] /= TRANSIT_CAL_TRIG_CNT;
 
-    /* Turn on the LED power */
-    halEnableLEDPS();
-
-    /* Set the LED brightness */
-    int brightness = TRANSIT_CAL_LED_AMPLITUDE; 
-    halWriteDAC(DOM_HAL_DAC_LED_BRIGHTNESS, brightness);
+    /*----------------------------------------------------------------------------*/
+    /* HV LOOP */
+    /*----------------------------------------------------------------------------*/
 
     /* Loop over HV settings */
-    int variance_fails = 0;
     int hv_idx, peak_idx;
+    int peak_atwd;
     float le_atwd_idx, le_current_idx;
-
+    
     for (hv_idx = 0; hv_idx < TRANSIT_CAL_HV_CNT; hv_idx++) {
 
         float peak_avg = 0.0;
         float current_peak_avg = 0.0;
+        float peak_atwd_avg = 0.0;       
+        int peak_fail = 0;
+
+        /* Make sure the LED is set to minimum brightness and cycle power */
+        halDisableLEDPS();
+        halWriteDAC(DOM_HAL_DAC_LED_BRIGHTNESS, TRANSIT_CAL_LED_AMP_START);
+        halUSleep(DAC_SET_WAIT);
+        halEnableLEDPS();
+
+        /* Initialize this calibration point as invalid */
+        hv_tt_valid[hv_idx] = 0;
 
         /* Set high voltage and give it time to stabilize */
         hv = (hv_idx * TRANSIT_CAL_HV_INC) + TRANSIT_CAL_HV_LOW;      
@@ -170,6 +184,97 @@
         float baseline[2][3];
         getBaseline(dom_calib, BASELINE_CAL_MAX_VAR, baseline);
 
+        /* Find a good brightness setting for this HV */
+        int brightness;
+        for (brightness = TRANSIT_CAL_LED_AMP_START; 
+             brightness > TRANSIT_CAL_LED_AMP_STOP; brightness -= TRANSIT_CAL_LED_AMP_STEP) {
+
+            /* Change to new brightness */
+            /* Just too slow to wait a full second here */
+            halWriteDAC(DOM_HAL_DAC_LED_BRIGHTNESS, brightness);
+            halUSleep(10000);
+
+            /* Take some waveforms */
+            for (trig=0; trig<(int)TRANSIT_CAL_AMP_TRIG; trig++) {
+            
+                /* Warm up the ATWD */
+                prescanATWD(trigger_mask);
+                
+                /* LED-trigger the ATWD */
+                hal_FPGA_TEST_trigger_LED(trigger_mask);
+                
+                /* Wait for done */
+                while (!hal_FPGA_TEST_readout_done(trigger_mask));
+                
+                /* Read out one waveform for all channels */        
+                if (atwd == 0) {
+                    hal_FPGA_TEST_readout(channels[0], channels[1], channels[2], channels[3],
+                                          NULL, NULL, NULL, NULL,
+                                          cnt, NULL, 0, trigger_mask);
+                }
+                else {
+                    hal_FPGA_TEST_readout(NULL, NULL, NULL, NULL,
+                                          channels[0], channels[1], channels[2], channels[3],
+                                          cnt, NULL, 0, trigger_mask);
+                }
+                
+                /* Find the peak in the ATWD waveform */            
+                peak_idx = 0;
+                peak_atwd = channels[ch][0];                
+                for (bin=0; bin<cnt; bin++) {
+                    if (channels[ch][bin] > peak_atwd) {
+                        peak_idx = bin;
+                        peak_atwd = channels[ch][bin];
+                    }
+                }
+                /* Calculate peak average */
+                peak_atwd_avg += peak_atwd;                                
+
+            } /* End brightness check peak loop */
+
+            /* Check if average peak is within acceptable range */
+            peak_atwd_avg /= TRANSIT_CAL_AMP_TRIG;
+
+            /* printf("Brightness search: %d amplitude %.1f\r\n", brightness, peak_atwd_avg); */
+
+            if ((peak_atwd_avg >= TRANSIT_CAL_ATWD_AMP_LOW) &&
+                (peak_atwd_avg <= TRANSIT_CAL_ATWD_AMP_HIGH)) break;
+        }
+        
+        /* Did the brightness search fail? */
+        /* If so, skip to the next HV setting */
+        if (brightness < TRANSIT_CAL_LED_AMP_STOP) {
+#ifdef DEBUG
+            printf("Couldn't find an acceptable LED brightness during scan!  Trying next voltage.\r\n");
+#endif
+            continue;
+        }
+        else {
+#ifdef DEBUG
+            printf("Using brightness %d for ATWD peak of %.1f\r\n", brightness, peak_atwd_avg);
+#endif
+        }
+
+        /*----------------------------------------------------------------------------*/
+        /* Now do the real measurement */
+        /*----------------------------------------------------------------------------*/
+
+        int no_peaks = 0;
+
+        /* Minimum acceptable light output */
+        float transit_cal_min_peak_v;
+        if (atwd == 0) {
+            transit_cal_min_peak_v = (float)TRANSIT_CAL_ATWD_AMP_LOW * dom_calib->atwd0_gain_calib[ch][bin].slope
+                + dom_calib->atwd0_gain_calib[ch][bin].y_intercept;
+        }
+        else {
+            transit_cal_min_peak_v = (float)TRANSIT_CAL_ATWD_AMP_LOW * dom_calib->atwd1_gain_calib[ch][bin].slope
+                + dom_calib->atwd1_gain_calib[ch][bin].y_intercept;
+        }
+        transit_cal_min_peak_v -= baseline[atwd][ch];
+        transit_cal_min_peak_v -= bias_v;
+        transit_cal_min_peak_v = 0.7*fabs(transit_cal_min_peak_v);
+
         /* Take a number of waveforms */
         for (trig=0; trig<(int)TRANSIT_CAL_TRIG_CNT; trig++) {
             
@@ -193,10 +298,7 @@
                                       channels[0], channels[1], channels[2], channels[3],
                                       cnt, NULL, 0, trigger_mask);
             }
-
-            /* FIX ME -- CHECK AMPLITUDE? */
-            ch = TRANSIT_CAL_CH;
-
+            
             /* Find the peak in the ATWD waveform */            
             peak_idx = 0;
             if (atwd == 0) {
@@ -224,7 +326,7 @@
                 else {
                     bin_v = (float)channels[ch][bin] * dom_calib->atwd1_gain_calib[ch][bin].slope
                         + dom_calib->atwd1_gain_calib[ch][bin].y_intercept;
-                    bin_v -= baseline[0][ch];
+                    bin_v -= baseline[1][ch];
                     bin_v -= bias_v;
                 }
                 
@@ -238,6 +340,38 @@
             /* Calculate peak average, for kicks */
             peak_avg += peak_v;
 
+            /* Make sure there is a peak! */
+            if (fabs(peak_v) < transit_cal_min_peak_v) {
+                no_peaks++;
+
+                /* Too many triggers without a decent peak? */
+                if (no_peaks > TRANSIT_CAL_MAX_NO_PEAKS) {
+                    /* Increase brightness! */
+                    brightness -= TRANSIT_CAL_LED_AMP_STEP;
+                    peak_fail = (brightness < TRANSIT_CAL_LED_AMP_STOP);
+                    
+                    if (peak_fail) {
+#ifdef DEBUG
+                        printf("Couldn't find acceptable brightness during data-taking -- trying next HV setting.\r\n");
+#endif                        
+                        break; /* Out of trigger loop! */
+                    }
+                    else {
+                        /* Start trigger loop over again with higher brightness */
+                        no_peaks = 0;
+                        trig = 0;
+                        halWriteDAC(DOM_HAL_DAC_LED_BRIGHTNESS, brightness);
+                        halUSleep(DAC_SET_WAIT);
+#ifdef DEBUG
+                        printf("Too few light pulses -- increasing brightness to %d\r\n", brightness);
+#endif
+                    }
+                }
+                else
+                    trig--;
+                continue; /* trigger loop */
+            }
+
             /* Now find leading edge in ATWD waveform */
             float last_bin_v = peak_v;
             le_atwd_idx = 0.0;    
@@ -251,13 +385,14 @@
                 else {
                     bin_v = (float)channels[ch][bin] * dom_calib->atwd1_gain_calib[ch][bin].slope
                         + dom_calib->atwd1_gain_calib[ch][bin].y_intercept;
-                    bin_v -= baseline[0][ch];
+                    bin_v -= baseline[1][ch];
                     bin_v -= bias_v;
                 }
                 
-                if (bin_v > 0.5*peak_v) {                    
+                if (bin_v > TRANSIT_CAL_EDGE_FRACT*peak_v) {                    
                     /* Interpolate */
-                    le_atwd_idx = (bin-1) + (0.5*peak_v - last_bin_v)/(bin_v - last_bin_v);
+                    le_atwd_idx = (bin-1) + 
+                        (TRANSIT_CAL_EDGE_FRACT*peak_v - last_bin_v)/(bin_v - last_bin_v);
                     break;
                 }
                 last_bin_v = bin_v;
@@ -265,11 +400,15 @@
            
             /* Find the peak and leading edge in the current waveform */
             /* Note polarity of pedestal subtraction to keep peak a minimum like in ATWD */
-            peak_v = pedestal[0] - channels[3][0];
+            /* Also -- baseline is off, use first few samples as an average */
+            float ch3_baseline = (float)((pedestal[0] - channels[3][0]) +
+                                         (pedestal[1] - channels[3][1]) +
+                                         (pedestal[2] - channels[3][2])) / 3.0;
+            peak_v = pedestal[0] - channels[3][0] - ch3_baseline;
             peak_idx = 0;
             for (bin=0; bin<cnt; bin++) {
                 
-                bin_v = pedestal[bin] - channels[3][bin];
+                bin_v = pedestal[bin] - channels[3][bin] - ch3_baseline;
                 if (bin_v < peak_v) {
                     peak_idx = bin;
                     peak_v = bin_v;
@@ -283,11 +422,12 @@
             last_bin_v = peak_v;
             le_current_idx = 0.0;
             for (bin=peak_idx; bin<cnt; bin++) {
-                bin_v = pedestal[bin] - channels[3][bin];
+                bin_v = pedestal[bin] - channels[3][bin] - ch3_baseline;
 
-                if (bin_v > 0.5*peak_v) {
+                if (bin_v > TRANSIT_CAL_EDGE_FRACT*peak_v) {
                     /* Interpolate */
-                    le_current_idx = (bin-1) + (0.5*peak_v - last_bin_v)/(bin_v - last_bin_v);
+                    le_current_idx = (bin-1) + 
+                        (TRANSIT_CAL_EDGE_FRACT*peak_v - last_bin_v)/(bin_v - last_bin_v);
                     break;
                 }
                 last_bin_v = bin_v;
@@ -298,73 +438,79 @@
 
         } /* End trigger loop */
 
-        /* Print average peak amplitude */
-        peak_avg /= TRANSIT_CAL_TRIG_CNT;
-        current_peak_avg /= TRANSIT_CAL_TRIG_CNT;
+        if (!peak_fail) {
+            /* Print average peak amplitude */
+            peak_avg /= TRANSIT_CAL_TRIG_CNT;
+            current_peak_avg /= TRANSIT_CAL_TRIG_CNT;
 
 #ifdef DEBUG
-        printf("V %d Avg signal peak %.2f  Avg current peak %.2f\r\n", hv, peak_avg, current_peak_avg);
+            printf("V %d Avg signal peak %.2f  Avg current peak %.2f\r\n", hv, peak_avg, current_peak_avg);
+            printf("Triggers with too little light: %d\r\n", no_peaks);
 #endif
-
-        /* Find mean and error */
-        float var;
-        meanVarFloat(transits, TRANSIT_CAL_TRIG_CNT, 
-                              &(transit_data[hv_idx]), &var);
+            
+            /* Find mean and error */
+            float var;
+            meanVarFloat(transits, TRANSIT_CAL_TRIG_CNT, 
+                         &(transit_data[hv_idx]), &var);
+            float sigma = sqrt(var);
 
 #ifdef DEBUG
-        printf("Sqrt(var): %.3f\r\n", sqrt(var));
+            printf("sigma: %.3f\r\n", sigma);
 #endif
 
-        /* Check sigma for poor calibration */
-        /* Drive LED brighter to try and clean things up */
-        if (sqrt(var) > TRANSIT_CAL_MAX_SIGMA) {
-            if (variance_fails < TRANSIT_CAL_MAX_BAD_VAR_CNT) {
-                brightness -= 25;
-                halWriteDAC(DOM_HAL_DAC_LED_BRIGHTNESS, brightness);           
-#ifdef DEBUG
-                printf("Bad sigma -- increasing LED brightness to %d\r\n", brightness);
-                printf("Trying same voltage again...\r\n");
-#endif
-                variance_fails++;
-                hv_idx--;
-            }
+            /* Check sigma */
+            if (sigma <= TRANSIT_CAL_MAX_SIGMA) 
+                hv_tt_valid[hv_idx] = 1;
             else {
 #ifdef DEBUG
-                printf("Too many bad variance points -- aborting transit time calibration!\r\n");
+                printf("Sigma too high; invalidating this HV point.\r\n");
 #endif
-                dom_calib->transit_calib.slope = 0.0; 
-                dom_calib->transit_calib.y_intercept = 0.0;
-                dom_calib->transit_calib.r_squared = 0.0;
-                return TRANSIT_TIME_VARIANCE_ERR;
-            }            
-        }
-
+            }
+        }        
     } /* End HV loop */
 
-    /*---------------------------------------------------------------------------*/
-
+    /*---------------------------------------------------------------------------*/    
     /* Attempt some sort of fit */
+    /*---------------------------------------------------------------------------*/
+    
     float x[TRANSIT_CAL_HV_CNT], y[TRANSIT_CAL_HV_CNT];    
+    int vld_cnt = 0;
     for (hv_idx = 0; hv_idx < TRANSIT_CAL_HV_CNT; hv_idx++) {
-        x[hv_idx] = 1 / sqrt((hv_idx * TRANSIT_CAL_HV_INC) + TRANSIT_CAL_HV_LOW);
-        y[hv_idx] = transit_data[hv_idx]; 
+        if (hv_tt_valid[hv_idx]) {
+            int hv = (hv_idx * TRANSIT_CAL_HV_INC) + TRANSIT_CAL_HV_LOW;
+            x[vld_cnt] = 1 / sqrt(hv);
+            y[vld_cnt] = transit_data[hv_idx];
+#ifdef DEBUG
+            printf("%d %g %g\r\n", hv, x[vld_cnt], y[vld_cnt]);
+#endif
+            vld_cnt++;
+        }
+    }
+
+    if (vld_cnt >= TRANSIT_CAL_MIN_VLD_PTS) {
+        linearFitFloat(x, y, vld_cnt, &dom_calib->transit_calib);
+        dom_calib->transit_calib_valid = 1;
+        dom_calib->transit_calib_points = vld_cnt;
+    }
+    else {
+#ifdef DEBUG
+        printf("ERROR: too few valid points for transit time fit.  Aborting.\r\n");
+        dom_calib->transit_calib_valid = 0;
+        dom_calib->transit_calib.slope = 0.0; 
+        dom_calib->transit_calib.y_intercept = 0.0;
+        dom_calib->transit_calib.r_squared = 0.0;
+        return TRANSIT_CAL_PTS_ERR;
+#endif
     }
-    linearFitFloat(x, y, TRANSIT_CAL_HV_CNT, &dom_calib->transit_calib);
-    dom_calib->transit_calib_valid = 1;
 
 #ifdef DEBUG
     printf("Fit: m %g b %g r2 %g\r\n", dom_calib->transit_calib.slope,
             dom_calib->transit_calib.y_intercept, dom_calib->transit_calib.r_squared);
-    printf("HV_idx hv 1/sqrt(v) value error\r\n");
-    for (hv_idx = 0; hv_idx < TRANSIT_CAL_HV_CNT; hv_idx++) {        
-        printf("%d %d %g %g\r\n", hv_idx,  ((hv_idx * TRANSIT_CAL_HV_INC) + TRANSIT_CAL_HV_LOW), 
-            x[hv_idx], transit_data[hv_idx]);
-    }    
 #endif
 
     /*---------------------------------------------------------------------------*/
-    /* Turn off LED and LED power supply*/
 
+    /* Turn of MB LED */
     halDisableLEDPS();
     hal_FPGA_TEST_disable_LED();
     
@@ -372,7 +518,6 @@
     halWriteDAC(DOM_HAL_DAC_PMT_FE_PEDESTAL, origBiasDAC);   
     halWriteDAC((atwd == 0) ? DOM_HAL_DAC_ATWD0_TRIGGER_BIAS : 
                 DOM_HAL_DAC_ATWD1_TRIGGER_BIAS, origSampDAC);
-    halWriteDAC(DOM_HAL_DAC_LED_BRIGHTNESS, origLedDAC);
     
     /* Disable the analog mux */
     halDisableAnalogMux();
Index: dom-cal/private/dom-cal/transit_cal.h
diff -u dom-cal/private/dom-cal/transit_cal.h:1.5.2.1 dom-cal/private/dom-cal/transit_cal.h:1.6
--- dom-cal/private/dom-cal/transit_cal.h:1.5.2.1	Tue Aug  2 09:45:32 2005
+++ dom-cal/private/dom-cal/transit_cal.h	Wed Sep 21 13:18:43 2005
@@ -4,10 +4,9 @@
 
 /* HV settings for gain calibration (in V) */
 /* Starting value, amount to increment, and number of settings */
-#define TRANSIT_CAL_HV_LOW        1200
+#define TRANSIT_CAL_HV_LOW        1100
 #define TRANSIT_CAL_HV_INC         100
-#define TRANSIT_CAL_HV_CNT           8
-
+#define TRANSIT_CAL_HV_CNT           9
 
 /* Specific DAC values for this test */
 #ifdef DOMCAL_REV5
@@ -21,13 +20,20 @@
 /* Which ATWD to use */
 #define TRANSIT_CAL_ATWD              0
 
+/* LED brightness starting/stopping values */
+#define TRANSIT_CAL_LED_AMP_START   950
+#define TRANSIT_CAL_LED_AMP_STOP    450
+#define TRANSIT_CAL_LED_AMP_STEP      3
+
 /* Which channel to use */
 #define TRANSIT_CAL_CH                1
 
-/* Flasher brightness */
-/* 600 is about the maximim reliable value */
-/* (minimum brightness) */
-#define TRANSIT_CAL_LED_AMPLITUDE   600
+/* Number of triggers to average for amplitude check */
+#define TRANSIT_CAL_AMP_TRIG         20
+
+/* Amplitude to look for in channel TRANSIT_CAL_CH */
+#define TRANSIT_CAL_ATWD_AMP_LOW    400   
+#define TRANSIT_CAL_ATWD_AMP_HIGH   800 
 
 /* How many waveforms to measure */
 #define TRANSIT_CAL_TRIG_CNT        250
@@ -35,14 +41,31 @@
 /* Trigger delay for ATWDs */
 #define TRANSIT_CAL_LAUNCH_DELAY      2
 
-/* Worst sigma, in ns, of a transit time distribution we will consider stable */
+/* Crossing point to define transit time */
+/* As fraction of peak value */
+#define TRANSIT_CAL_EDGE_FRACT      0.5
+
+/* Maxiumum number of waveforms with no light */
+#define TRANSIT_CAL_MAX_NO_PEAKS    750
+
+/* Minimum number of points to attempt a fit */
+#define TRANSIT_CAL_MIN_VLD_PTS       2
+
+/* Maximum sigma, in ns, of transit time at a given HV */
+/* Otherwise don't accept the point for fit */
 #define TRANSIT_CAL_MAX_SIGMA       5.0
 
-/* How many times we will crank up the brightness */
-#define TRANSIT_CAL_MAX_BAD_VAR_CNT   5
+/* Error code for no HV base */
+#define TRANSIT_CAL_NO_HV_BASE        2
 
 /* Error code for variance failure */
-#define TRANSIT_TIME_VARIANCE_ERR     3
+#define TRANSIT_CAL_NO_LIGHT_ERR      3
+
+/* Error code for brightness search failure */
+#define TRANSIT_CAL_AMP_ERR           4
+
+/* Error code for too few valid points */
+#define TRANSIT_CAL_PTS_ERR           5
 
 /* Prototypes */
 int transit_cal(calib_data *dom_calib);
Index: dom-cal/resources/test/f771bb4dce28.xml
diff -u /dev/null dom-cal/resources/test/f771bb4dce28.xml:1.1
--- /dev/null	Thu Oct  6 09:02:09 2005
+++ dom-cal/resources/test/f771bb4dce28.xml	Fri Oct 29 14:05:01 2004
@@ -0,0 +1,5453 @@
+<domcal version="1.1">
+  <date>6-30-2004</date>
+  <domid>f771bb4dce28</domid>
+  <temperature format="Kelvin">300.035</temperature>
+  <dac channel="0">850</dac>
+  <dac channel="1">2097</dac>
+  <dac channel="2">3000</dac>
+  <dac channel="3">2048</dac>
+  <dac channel="4">850</dac>
+  <dac channel="5">2097</dac>
+  <dac channel="6">3000</dac>
+  <dac channel="7">1925</dac>
+  <dac channel="8">0</dac>
+  <dac channel="9">0</dac>
+  <dac channel="10">0</dac>
+  <dac channel="11">0</dac>
+  <dac channel="12">0</dac>
+  <dac channel="13">0</dac>
+  <dac channel="14">0</dac>
+  <dac channel="15">0</dac>
+  <adc channel="0">21</adc>
+  <adc channel="1">988</adc>
+  <adc channel="2">863</adc>
+  <adc channel="3">509</adc>
+  <adc channel="4">90</adc>
+  <adc channel="5">36</adc>
+  <adc channel="6">88</adc>
+  <adc channel="7">130</adc>
+  <adc channel="8">609</adc>
+  <adc channel="9">878</adc>
+  <adc channel="10">628</adc>
+  <adc channel="11">821</adc>
+  <adc channel="12">15</adc>
+  <adc channel="13">860</adc>
+  <adc channel="14">18</adc>
+  <adc channel="15">260</adc>
+  <adc channel="16">512</adc>
+  <adc channel="17">908</adc>
+  <adc channel="18">499</adc>
+  <adc channel="19">260</adc>
+  <adc channel="20">513</adc>
+  <adc channel="21">911</adc>
+  <adc channel="22">468</adc>
+  <adc channel="23">1</adc>
+  <pulser>
+    <fit model="linear">
+      <param name="slope">9.477927E-5</param>
+      <param name="intercept">2.6709796E-4</param>
+      <regression-coeff>0.999942</regression-coeff>
+    </fit>
+  </pulser>
+  <atwd id="0" channel="0" bin="0">
+    <fit model="linear">
+      <param name="slope">-0.0020907072</param>
+      <param name="intercept">2.6907156</param>
+      <regression-coeff>0.99991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="1">
+    <fit model="linear">
+      <param name="slope">-0.0020982912</param>
+      <param name="intercept">2.6780012</param>
+      <regression-coeff>0.9999431</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="2">
+    <fit model="linear">
+      <param name="slope">-0.0021094908</param>
+      <param name="intercept">2.651454</param>
+      <regression-coeff>0.9999396</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="3">
+    <fit model="linear">
+      <param name="slope">-0.0021251899</param>
+      <param name="intercept">2.6855738</param>
+      <regression-coeff>0.9997844</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="4">
+    <fit model="linear">
+      <param name="slope">-0.0021262234</param>
+      <param name="intercept">2.6832826</param>
+      <regression-coeff>0.9999537</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="5">
+    <fit model="linear">
+      <param name="slope">-0.0021200136</param>
+      <param name="intercept">2.6688452</param>
+      <regression-coeff>0.9998744</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="6">
+    <fit model="linear">
+      <param name="slope">-0.0021213705</param>
+      <param name="intercept">2.6527967</param>
+      <regression-coeff>0.999883</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="7">
+    <fit model="linear">
+      <param name="slope">-0.002124257</param>
+      <param name="intercept">2.6705225</param>
+      <regression-coeff>0.99997693</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="8">
+    <fit model="linear">
+      <param name="slope">-0.0021275452</param>
+      <param name="intercept">2.670275</param>
+      <regression-coeff>0.99994105</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="9">
+    <fit model="linear">
+      <param name="slope">-0.0021238276</param>
+      <param name="intercept">2.6560636</param>
+      <regression-coeff>0.999934</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="10">
+    <fit model="linear">
+      <param name="slope">-0.0021105085</param>
+      <param name="intercept">2.6411061</param>
+      <regression-coeff>0.9999502</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="11">
+    <fit model="linear">
+      <param name="slope">-0.0021405981</param>
+      <param name="intercept">2.6734774</param>
+      <regression-coeff>0.9998588</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="12">
+    <fit model="linear">
+      <param name="slope">-0.0021172077</param>
+      <param name="intercept">2.6604218</param>
+      <regression-coeff>0.9999712</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="13">
+    <fit model="linear">
+      <param name="slope">-0.0021100887</param>
+      <param name="intercept">2.6593602</param>
+      <regression-coeff>0.9999085</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="14">
+    <fit model="linear">
+      <param name="slope">-0.0021108743</param>
+      <param name="intercept">2.647963</param>
+      <regression-coeff>0.99996614</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="15">
+    <fit model="linear">
+      <param name="slope">-0.0021228648</param>
+      <param name="intercept">2.6695864</param>
+      <regression-coeff>0.9999544</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="16">
+    <fit model="linear">
+      <param name="slope">-0.0021234753</param>
+      <param name="intercept">2.677548</param>
+      <regression-coeff>0.9999264</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="17">
+    <fit model="linear">
+      <param name="slope">-0.0021292605</param>
+      <param name="intercept">2.6833405</param>
+      <regression-coeff>0.99995375</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="18">
+    <fit model="linear">
+      <param name="slope">-0.0021165856</param>
+      <param name="intercept">2.650365</param>
+      <regression-coeff>0.99999195</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="19">
+    <fit model="linear">
+      <param name="slope">-0.0021215614</param>
+      <param name="intercept">2.6642497</param>
+      <regression-coeff>0.99981487</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="20">
+    <fit model="linear">
+      <param name="slope">-0.0021225237</param>
+      <param name="intercept">2.6630847</param>
+      <regression-coeff>0.99995196</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="21">
+    <fit model="linear">
+      <param name="slope">-0.0021188643</param>
+      <param name="intercept">2.6693547</param>
+      <regression-coeff>0.9998062</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="22">
+    <fit model="linear">
+      <param name="slope">-0.0021136815</param>
+      <param name="intercept">2.667688</param>
+      <regression-coeff>0.9998792</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="23">
+    <fit model="linear">
+      <param name="slope">-0.0021201486</param>
+      <param name="intercept">2.6662004</param>
+      <regression-coeff>0.9999391</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="24">
+    <fit model="linear">
+      <param name="slope">-0.0021172247</param>
+      <param name="intercept">2.665433</param>
+      <regression-coeff>0.9999783</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="25">
+    <fit model="linear">
+      <param name="slope">-0.0021232623</param>
+      <param name="intercept">2.6645312</param>
+      <regression-coeff>0.9999843</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="26">
+    <fit model="linear">
+      <param name="slope">-0.002122238</param>
+      <param name="intercept">2.6600783</param>
+      <regression-coeff>0.99997556</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="27">
+    <fit model="linear">
+      <param name="slope">-0.0021235966</param>
+      <param name="intercept">2.671614</param>
+      <regression-coeff>0.99998266</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="28">
+    <fit model="linear">
+      <param name="slope">-0.0021288444</param>
+      <param name="intercept">2.6684644</param>
+      <regression-coeff>0.99991804</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="29">
+    <fit model="linear">
+      <param name="slope">-0.0021285915</param>
+      <param name="intercept">2.6646895</param>
+      <regression-coeff>0.99995697</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="30">
+    <fit model="linear">
+      <param name="slope">-0.002117518</param>
+      <param name="intercept">2.65169</param>
+      <regression-coeff>0.99995905</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="31">
+    <fit model="linear">
+      <param name="slope">-0.0021393339</param>
+      <param name="intercept">2.684066</param>
+      <regression-coeff>0.9999051</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="32">
+    <fit model="linear">
+      <param name="slope">-0.0021178771</param>
+      <param name="intercept">2.6695411</param>
+      <regression-coeff>0.9999708</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="33">
+    <fit model="linear">
+      <param name="slope">-0.00211651</param>
+      <param name="intercept">2.645911</param>
+      <regression-coeff>0.9999562</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="34">
+    <fit model="linear">
+      <param name="slope">-0.002130121</param>
+      <param name="intercept">2.6716764</param>
+      <regression-coeff>0.99988353</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="35">
+    <fit model="linear">
+      <param name="slope">-0.0021293375</param>
+      <param name="intercept">2.6740777</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="36">
+    <fit model="linear">
+      <param name="slope">-0.002114547</param>
+      <param name="intercept">2.6530366</param>
+      <regression-coeff>0.9998158</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="37">
+    <fit model="linear">
+      <param name="slope">-0.0021248541</param>
+      <param name="intercept">2.6578164</param>
+      <regression-coeff>0.99994224</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="38">
+    <fit model="linear">
+      <param name="slope">-0.0021155416</param>
+      <param name="intercept">2.657077</param>
+      <regression-coeff>0.9999716</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="39">
+    <fit model="linear">
+      <param name="slope">-0.002123222</param>
+      <param name="intercept">2.6722362</param>
+      <regression-coeff>0.9999653</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="40">
+    <fit model="linear">
+      <param name="slope">-0.0021252583</param>
+      <param name="intercept">2.654301</param>
+      <regression-coeff>0.999975</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="41">
+    <fit model="linear">
+      <param name="slope">-0.0021182236</param>
+      <param name="intercept">2.6821957</param>
+      <regression-coeff>0.9999765</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="42">
+    <fit model="linear">
+      <param name="slope">-0.002121239</param>
+      <param name="intercept">2.6656659</param>
+      <regression-coeff>0.9999791</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="43">
+    <fit model="linear">
+      <param name="slope">-0.0021222592</param>
+      <param name="intercept">2.6652958</param>
+      <regression-coeff>0.9999855</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="44">
+    <fit model="linear">
+      <param name="slope">-0.0021208809</param>
+      <param name="intercept">2.6479788</param>
+      <regression-coeff>0.9999683</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="45">
+    <fit model="linear">
+      <param name="slope">-0.0021167968</param>
+      <param name="intercept">2.6664188</param>
+      <regression-coeff>0.999934</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="46">
+    <fit model="linear">
+      <param name="slope">-0.0021138638</param>
+      <param name="intercept">2.6660311</param>
+      <regression-coeff>0.9999654</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="47">
+    <fit model="linear">
+      <param name="slope">-0.002123255</param>
+      <param name="intercept">2.6651077</param>
+      <regression-coeff>0.99998003</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="48">
+    <fit model="linear">
+      <param name="slope">-0.0021299801</param>
+      <param name="intercept">2.6749146</param>
+      <regression-coeff>0.99997526</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="49">
+    <fit model="linear">
+      <param name="slope">-0.0021212623</param>
+      <param name="intercept">2.6529472</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="50">
+    <fit model="linear">
+      <param name="slope">-0.0021192126</param>
+      <param name="intercept">2.652539</param>
+      <regression-coeff>0.9999705</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="51">
+    <fit model="linear">
+      <param name="slope">-0.0021235785</param>
+      <param name="intercept">2.6689036</param>
+      <regression-coeff>0.9999741</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="52">
+    <fit model="linear">
+      <param name="slope">-0.0021165763</param>
+      <param name="intercept">2.6684492</param>
+      <regression-coeff>0.99998754</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="53">
+    <fit model="linear">
+      <param name="slope">-0.0021232488</param>
+      <param name="intercept">2.6664565</param>
+      <regression-coeff>0.99997705</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="54">
+    <fit model="linear">
+      <param name="slope">-0.0021229084</param>
+      <param name="intercept">2.6566732</param>
+      <regression-coeff>0.99997586</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="55">
+    <fit model="linear">
+      <param name="slope">-0.0021155877</param>
+      <param name="intercept">2.646324</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="56">
+    <fit model="linear">
+      <param name="slope">-0.0021252744</param>
+      <param name="intercept">2.6510239</param>
+      <regression-coeff>0.9999816</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="57">
+    <fit model="linear">
+      <param name="slope">-0.0021185619</param>
+      <param name="intercept">2.64882</param>
+      <regression-coeff>0.99997926</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="58">
+    <fit model="linear">
+      <param name="slope">-0.002121239</param>
+      <param name="intercept">2.6510098</param>
+      <regression-coeff>0.9999791</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="59">
+    <fit model="linear">
+      <param name="slope">-0.0021205582</param>
+      <param name="intercept">2.6609645</param>
+      <regression-coeff>0.99997324</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="60">
+    <fit model="linear">
+      <param name="slope">-0.002122166</param>
+      <param name="intercept">2.6716251</param>
+      <regression-coeff>0.9999416</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="61">
+    <fit model="linear">
+      <param name="slope">-0.002123238</param>
+      <param name="intercept">2.6562226</param>
+      <regression-coeff>0.999972</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="62">
+    <fit model="linear">
+      <param name="slope">-0.0021265969</param>
+      <param name="intercept">2.6548212</param>
+      <regression-coeff>0.9999708</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="63">
+    <fit model="linear">
+      <param name="slope">-0.002124276</param>
+      <param name="intercept">2.6666665</param>
+      <regression-coeff>0.99998677</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="64">
+    <fit model="linear">
+      <param name="slope">-0.0021202418</param>
+      <param name="intercept">2.6438785</param>
+      <regression-coeff>0.999982</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="65">
+    <fit model="linear">
+      <param name="slope">-0.002127511</param>
+      <param name="intercept">2.6706483</param>
+      <regression-coeff>0.999925</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="66">
+    <fit model="linear">
+      <param name="slope">-0.0021237852</param>
+      <param name="intercept">2.6693711</param>
+      <regression-coeff>0.9999141</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="67">
+    <fit model="linear">
+      <param name="slope">-0.002133258</param>
+      <param name="intercept">2.6387832</param>
+      <regression-coeff>0.99992603</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="68">
+    <fit model="linear">
+      <param name="slope">-0.0021205435</param>
+      <param name="intercept">2.636668</param>
+      <regression-coeff>0.9999664</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="69">
+    <fit model="linear">
+      <param name="slope">-0.0021332828</param>
+      <param name="intercept">2.6459692</param>
+      <regression-coeff>0.9999368</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="70">
+    <fit model="linear">
+      <param name="slope">-0.0021229074</param>
+      <param name="intercept">2.655708</param>
+      <regression-coeff>0.9999745</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="71">
+    <fit model="linear">
+      <param name="slope">-0.0021155311</param>
+      <param name="intercept">2.6455333</param>
+      <regression-coeff>0.99996585</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="72">
+    <fit model="linear">
+      <param name="slope">-0.0021336633</param>
+      <param name="intercept">2.6596923</param>
+      <regression-coeff>0.9999561</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="73">
+    <fit model="linear">
+      <param name="slope">-0.0021205158</param>
+      <param name="intercept">2.6777184</param>
+      <regression-coeff>0.9999542</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="74">
+    <fit model="linear">
+      <param name="slope">-0.00213109</param>
+      <param name="intercept">2.6637297</param>
+      <regression-coeff>0.999861</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="75">
+    <fit model="linear">
+      <param name="slope">-0.002121868</param>
+      <param name="intercept">2.6713142</param>
+      <regression-coeff>0.9998012</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="76">
+    <fit model="linear">
+      <param name="slope">-0.0021269706</param>
+      <param name="intercept">2.6541922</param>
+      <regression-coeff>0.9998295</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="77">
+    <fit model="linear">
+      <param name="slope">-0.0021146077</param>
+      <param name="intercept">2.6342218</param>
+      <regression-coeff>0.9998445</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="78">
+    <fit model="linear">
+      <param name="slope">-0.0021282511</param>
+      <param name="intercept">2.6593304</param>
+      <regression-coeff>0.99995565</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="79">
+    <fit model="linear">
+      <param name="slope">-0.0021256458</param>
+      <param name="intercept">2.6745498</param>
+      <regression-coeff>0.9998405</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="80">
+    <fit model="linear">
+      <param name="slope">-0.0021222592</param>
+      <param name="intercept">2.666259</param>
+      <regression-coeff>0.9999855</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="81">
+    <fit model="linear">
+      <param name="slope">-0.0021266034</param>
+      <param name="intercept">2.6606226</param>
+      <regression-coeff>0.999973</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="82">
+    <fit model="linear">
+      <param name="slope">-0.0021306784</param>
+      <param name="intercept">2.6596942</param>
+      <regression-coeff>0.99998635</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="83">
+    <fit model="linear">
+      <param name="slope">-0.0021138974</param>
+      <param name="intercept">2.6422153</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="84">
+    <fit model="linear">
+      <param name="slope">-0.002123586</param>
+      <param name="intercept">2.6617618</param>
+      <regression-coeff>0.99997854</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="85">
+    <fit model="linear">
+      <param name="slope">-0.0021286395</param>
+      <param name="intercept">2.6558056</param>
+      <regression-coeff>0.99998045</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="86">
+    <fit model="linear">
+      <param name="slope">-0.0021229296</param>
+      <param name="intercept">2.652822</param>
+      <regression-coeff>0.99998486</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="87">
+    <fit model="linear">
+      <param name="slope">-0.002128961</param>
+      <param name="intercept">2.653995</param>
+      <regression-coeff>0.9999728</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="88">
+    <fit model="linear">
+      <param name="slope">-0.002127638</param>
+      <param name="intercept">2.6716657</param>
+      <regression-coeff>0.99998474</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="89">
+    <fit model="linear">
+      <param name="slope">-0.002124601</param>
+      <param name="intercept">2.6536613</param>
+      <regression-coeff>0.99998146</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="90">
+    <fit model="linear">
+      <param name="slope">-0.0021215484</param>
+      <param name="intercept">2.6605802</param>
+      <regression-coeff>0.9999668</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="91">
+    <fit model="linear">
+      <param name="slope">-0.0021275675</param>
+      <param name="intercept">2.6546164</param>
+      <regression-coeff>0.99995154</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="92">
+    <fit model="linear">
+      <param name="slope">-0.0021168578</param>
+      <param name="intercept">2.6550896</param>
+      <regression-coeff>0.99996275</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="93">
+    <fit model="linear">
+      <param name="slope">-0.0021248201</param>
+      <param name="intercept">2.666881</param>
+      <regression-coeff>0.99992627</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="94">
+    <fit model="linear">
+      <param name="slope">-0.0021431227</param>
+      <param name="intercept">2.6697938</param>
+      <regression-coeff>0.99992085</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="95">
+    <fit model="linear">
+      <param name="slope">-0.002122061</param>
+      <param name="intercept">2.681808</param>
+      <regression-coeff>0.9998921</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="96">
+    <fit model="linear">
+      <param name="slope">-0.0021189214</param>
+      <param name="intercept">2.6271896</param>
+      <regression-coeff>0.999991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="97">
+    <fit model="linear">
+      <param name="slope">-0.0021388158</param>
+      <param name="intercept">2.6694713</param>
+      <regression-coeff>0.9998224</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="98">
+    <fit model="linear">
+      <param name="slope">-0.0021175137</param>
+      <param name="intercept">2.6466808</param>
+      <regression-coeff>0.9999579</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="99">
+    <fit model="linear">
+      <param name="slope">-0.0021250697</param>
+      <param name="intercept">2.6791499</param>
+      <regression-coeff>0.9998863</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="100">
+    <fit model="linear">
+      <param name="slope">-0.0021299063</param>
+      <param name="intercept">2.6644292</param>
+      <regression-coeff>0.9999406</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="101">
+    <fit model="linear">
+      <param name="slope">-0.002132296</param>
+      <param name="intercept">2.6591609</param>
+      <regression-coeff>0.999951</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="102">
+    <fit model="linear">
+      <param name="slope">-0.002125927</param>
+      <param name="intercept">2.6704087</param>
+      <regression-coeff>0.9999727</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="103">
+    <fit model="linear">
+      <param name="slope">-0.0021208301</param>
+      <param name="intercept">2.6446817</param>
+      <regression-coeff>0.9999443</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="104">
+    <fit model="linear">
+      <param name="slope">-0.0021299147</param>
+      <param name="intercept">2.658623</param>
+      <regression-coeff>0.99994457</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="105">
+    <fit model="linear">
+      <param name="slope">-0.0021273002</param>
+      <param name="intercept">2.6409745</param>
+      <regression-coeff>0.9999854</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="106">
+    <fit model="linear">
+      <param name="slope">-0.002125224</param>
+      <param name="intercept">2.6523573</param>
+      <regression-coeff>0.99979955</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="107">
+    <fit model="linear">
+      <param name="slope">-0.0021157153</param>
+      <param name="intercept">2.6581075</param>
+      <regression-coeff>0.9998961</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="108">
+    <fit model="linear">
+      <param name="slope">-0.002131618</param>
+      <param name="intercept">2.6598659</param>
+      <regression-coeff>0.9999508</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="109">
+    <fit model="linear">
+      <param name="slope">-0.002132322</param>
+      <param name="intercept">2.6684754</param>
+      <regression-coeff>0.99996316</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="110">
+    <fit model="linear">
+      <param name="slope">-0.0021222509</param>
+      <param name="intercept">2.6465774</param>
+      <regression-coeff>0.9999816</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="111">
+    <fit model="linear">
+      <param name="slope">-0.0021147104</param>
+      <param name="intercept">2.64887</param>
+      <regression-coeff>0.999894</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="112">
+    <fit model="linear">
+      <param name="slope">-0.0021353</param>
+      <param name="intercept">2.6684802</param>
+      <regression-coeff>0.9997694</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="113">
+    <fit model="linear">
+      <param name="slope">-0.002135555</param>
+      <param name="intercept">2.6608148</param>
+      <regression-coeff>0.9998887</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="114">
+    <fit model="linear">
+      <param name="slope">-0.0021151348</param>
+      <param name="intercept">2.6524968</param>
+      <regression-coeff>0.9999361</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="115">
+    <fit model="linear">
+      <param name="slope">-0.002137768</param>
+      <param name="intercept">2.6675048</param>
+      <regression-coeff>0.99996984</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="116">
+    <fit model="linear">
+      <param name="slope">-0.0021296581</param>
+      <param name="intercept">2.6407115</param>
+      <regression-coeff>0.9999828</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="117">
+    <fit model="linear">
+      <param name="slope">-0.0021063206</param>
+      <param name="intercept">2.6433282</param>
+      <regression-coeff>0.9998479</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="118">
+    <fit model="linear">
+      <param name="slope">-0.0021218264</param>
+      <param name="intercept">2.6786282</param>
+      <regression-coeff>0.9999397</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="119">
+    <fit model="linear">
+      <param name="slope">-0.0021359294</param>
+      <param name="intercept">2.6654263</param>
+      <regression-coeff>0.9999048</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="120">
+    <fit model="linear">
+      <param name="slope">-0.0021168094</param>
+      <param name="intercept">2.6346722</param>
+      <regression-coeff>0.9999399</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="121">
+    <fit model="linear">
+      <param name="slope">-0.0021276562</param>
+      <param name="intercept">2.6498148</param>
+      <regression-coeff>0.9999932</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="122">
+    <fit model="linear">
+      <param name="slope">-0.0021295673</param>
+      <param name="intercept">2.6433878</param>
+      <regression-coeff>0.9999392</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="123">
+    <fit model="linear">
+      <param name="slope">-0.0021445726</param>
+      <param name="intercept">2.676406</param>
+      <regression-coeff>0.9999581</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="124">
+    <fit model="linear">
+      <param name="slope">-0.0021289238</param>
+      <param name="intercept">2.664626</param>
+      <regression-coeff>0.9999544</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="125">
+    <fit model="linear">
+      <param name="slope">-0.0021262171</param>
+      <param name="intercept">2.659119</param>
+      <regression-coeff>0.9999507</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="126">
+    <fit model="linear">
+      <param name="slope">-0.002118137</param>
+      <param name="intercept">2.653853</param>
+      <regression-coeff>0.9999365</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="127">
+    <fit model="linear">
+      <param name="slope">-0.0020911337</param>
+      <param name="intercept">2.631769</param>
+      <regression-coeff>0.9999581</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="0">
+    <fit model="linear">
+      <param name="slope">-0.0019648194</param>
+      <param name="intercept">2.6819997</param>
+      <regression-coeff>0.9999889</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="1">
+    <fit model="linear">
+      <param name="slope">-0.0019758102</param>
+      <param name="intercept">2.668977</param>
+      <regression-coeff>0.99999046</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="2">
+    <fit model="linear">
+      <param name="slope">-0.0019834081</param>
+      <param name="intercept">2.641546</param>
+      <regression-coeff>0.9999962</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="3">
+    <fit model="linear">
+      <param name="slope">-0.0019996306</param>
+      <param name="intercept">2.6727169</param>
+      <regression-coeff>0.99998486</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="4">
+    <fit model="linear">
+      <param name="slope">-0.0020008313</param>
+      <param name="intercept">2.6704946</param>
+      <regression-coeff>0.9999888</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="5">
+    <fit model="linear">
+      <param name="slope">-0.001997256</param>
+      <param name="intercept">2.6577373</param>
+      <regression-coeff>0.99998635</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="6">
+    <fit model="linear">
+      <param name="slope">-0.0019937009</param>
+      <param name="intercept">2.6412225</param>
+      <regression-coeff>0.99998856</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="7">
+    <fit model="linear">
+      <param name="slope">-0.0020002376</param>
+      <param name="intercept">2.6586065</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="8">
+    <fit model="linear">
+      <param name="slope">-0.002000832</param>
+      <param name="intercept">2.6586711</param>
+      <regression-coeff>0.9999892</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="9">
+    <fit model="linear">
+      <param name="slope">-0.0020014388</param>
+      <param name="intercept">2.6487334</param>
+      <regression-coeff>0.99999505</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="10">
+    <fit model="linear">
+      <param name="slope">-0.0019931085</param>
+      <param name="intercept">2.63464</param>
+      <regression-coeff>0.99998856</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="11">
+    <fit model="linear">
+      <param name="slope">-0.0019954867</param>
+      <param name="intercept">2.654465</param>
+      <regression-coeff>0.9999928</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="12">
+    <fit model="linear">
+      <param name="slope">-0.0020016988</param>
+      <param name="intercept">2.6550264</param>
+      <regression-coeff>0.9999758</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="13">
+    <fit model="linear">
+      <param name="slope">-0.0019993496</param>
+      <param name="intercept">2.6551502</param>
+      <regression-coeff>0.9999933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="14">
+    <fit model="linear">
+      <param name="slope">-0.0019919334</param>
+      <param name="intercept">2.6403215</param>
+      <regression-coeff>0.9999928</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="15">
+    <fit model="linear">
+      <param name="slope">-0.001996373</param>
+      <param name="intercept">2.6590054</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="16">
+    <fit model="linear">
+      <param name="slope">-0.0020020257</param>
+      <param name="intercept">2.6666265</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="17">
+    <fit model="linear">
+      <param name="slope">-0.0020044153</param>
+      <param name="intercept">2.668537</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="18">
+    <fit model="linear">
+      <param name="slope">-0.0019948888</param>
+      <param name="intercept">2.6415226</param>
+      <regression-coeff>0.9999906</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="19">
+    <fit model="linear">
+      <param name="slope">-0.0020005433</param>
+      <param name="intercept">2.6565511</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="20">
+    <fit model="linear">
+      <param name="slope">-0.002000236</param>
+      <param name="intercept">2.649878</param>
+      <regression-coeff>0.99998945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="21">
+    <fit model="linear">
+      <param name="slope">-0.002001437</param>
+      <param name="intercept">2.6585584</param>
+      <regression-coeff>0.9999932</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="22">
+    <fit model="linear">
+      <param name="slope">-0.0019954883</param>
+      <param name="intercept">2.6606333</param>
+      <regression-coeff>0.9999937</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="23">
+    <fit model="linear">
+      <param name="slope">-0.0020008257</param>
+      <param name="intercept">2.6568496</param>
+      <regression-coeff>0.9999869</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="24">
+    <fit model="linear">
+      <param name="slope">-0.0020020267</param>
+      <param name="intercept">2.6566179</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="25">
+    <fit model="linear">
+      <param name="slope">-0.0019999358</param>
+      <param name="intercept">2.654847</param>
+      <regression-coeff>0.9999876</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="26">
+    <fit model="linear">
+      <param name="slope">-0.0020032213</param>
+      <param name="intercept">2.6514645</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="27">
+    <fit model="linear">
+      <param name="slope">-0.0020029247</param>
+      <param name="intercept">2.6617224</param>
+      <regression-coeff>0.999991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="28">
+    <fit model="linear">
+      <param name="slope">-0.0020032239</param>
+      <param name="intercept">2.6589332</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="29">
+    <fit model="linear">
+      <param name="slope">-0.0020032106</param>
+      <param name="intercept">2.653281</param>
+      <regression-coeff>0.99998444</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="30">
+    <fit model="linear">
+      <param name="slope">-0.001999348</param>
+      <param name="intercept">2.6431537</param>
+      <regression-coeff>0.99999166</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="31">
+    <fit model="linear">
+      <param name="slope">-0.0020032267</param>
+      <param name="intercept">2.6660366</param>
+      <regression-coeff>0.9999925</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="32">
+    <fit model="linear">
+      <param name="slope">-0.001995476</param>
+      <param name="intercept">2.6602662</param>
+      <regression-coeff>0.99998754</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="33">
+    <fit model="linear">
+      <param name="slope">-0.001998447</param>
+      <param name="intercept">2.636792</param>
+      <regression-coeff>0.99998796</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="34">
+    <fit model="linear">
+      <param name="slope">-0.0019996448</param>
+      <param name="intercept">2.6572719</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="35">
+    <fit model="linear">
+      <param name="slope">-0.0020089133</param>
+      <param name="intercept">2.665484</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="36">
+    <fit model="linear">
+      <param name="slope">-0.002000537</param>
+      <param name="intercept">2.6472733</param>
+      <regression-coeff>0.9999908</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="37">
+    <fit model="linear">
+      <param name="slope">-0.0020011389</param>
+      <param name="intercept">2.6462455</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="38">
+    <fit model="linear">
+      <param name="slope">-0.0019969628</param>
+      <param name="intercept">2.6467233</param>
+      <regression-coeff>0.99998933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="39">
+    <fit model="linear">
+      <param name="slope">-0.0020032213</param>
+      <param name="intercept">2.6634843</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="40">
+    <fit model="linear">
+      <param name="slope">-0.0020074104</param>
+      <param name="intercept">2.6447856</param>
+      <regression-coeff>0.9999874</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="41">
+    <fit model="linear">
+      <param name="slope">-0.0020032213</param>
+      <param name="intercept">2.6735005</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="42">
+    <fit model="linear">
+      <param name="slope">-0.0020035242</param>
+      <param name="intercept">2.656507</param>
+      <regression-coeff>0.9999918</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="43">
+    <fit model="linear">
+      <param name="slope">-0.0020059047</param>
+      <param name="intercept">2.6576693</param>
+      <regression-coeff>0.99998564</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="44">
+    <fit model="linear">
+      <param name="slope">-0.0019996448</param>
+      <param name="intercept">2.6372752</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="45">
+    <fit model="linear">
+      <param name="slope">-0.0019993416</param>
+      <param name="intercept">2.6569643</param>
+      <regression-coeff>0.9999885</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="46">
+    <fit model="linear">
+      <param name="slope">-0.0019975614</param>
+      <param name="intercept">2.659862</param>
+      <regression-coeff>0.99999046</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="47">
+    <fit model="linear">
+      <param name="slope">-0.0020047242</param>
+      <param name="intercept">2.6553607</param>
+      <regression-coeff>0.999993</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="48">
+    <fit model="linear">
+      <param name="slope">-0.0020047207</param>
+      <param name="intercept">2.6608262</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="49">
+    <fit model="linear">
+      <param name="slope">-0.0020017165</param>
+      <param name="intercept">2.645571</param>
+      <regression-coeff>0.99998456</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="50">
+    <fit model="linear">
+      <param name="slope">-0.0020023289</param>
+      <param name="intercept">2.646366</param>
+      <regression-coeff>0.9999921</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="51">
+    <fit model="linear">
+      <param name="slope">-0.0020041012</param>
+      <param name="intercept">2.6580203</param>
+      <regression-coeff>0.999981</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="52">
+    <fit model="linear">
+      <param name="slope">-0.0020008304</param>
+      <param name="intercept">2.6612177</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="53">
+    <fit model="linear">
+      <param name="slope">-0.0019972576</param>
+      <param name="intercept">2.6566484</param>
+      <regression-coeff>0.9999872</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="54">
+    <fit model="linear">
+      <param name="slope">-0.0020020257</param>
+      <param name="intercept">2.6466064</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="55">
+    <fit model="linear">
+      <param name="slope">-0.0019948808</param>
+      <param name="intercept">2.6366246</param>
+      <regression-coeff>0.9999857</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="56">
+    <fit model="linear">
+      <param name="slope">-0.002003223</param>
+      <param name="intercept">2.640903</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="57">
+    <fit model="linear">
+      <param name="slope">-0.0020020355</param>
+      <param name="intercept">2.6427884</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="58">
+    <fit model="linear">
+      <param name="slope">-0.0020032239</param>
+      <param name="intercept">2.6418145</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="59">
+    <fit model="linear">
+      <param name="slope">-0.0020053142</param>
+      <param name="intercept">2.6526854</param>
+      <regression-coeff>0.99998933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="60">
+    <fit model="linear">
+      <param name="slope">-0.0019975542</param>
+      <param name="intercept">2.6607656</param>
+      <regression-coeff>0.9999877</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="61">
+    <fit model="linear">
+      <param name="slope">-0.0020044143</param>
+      <param name="intercept">2.6464863</param>
+      <regression-coeff>0.99998784</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="62">
+    <fit model="linear">
+      <param name="slope">-0.0020008401</param>
+      <param name="intercept">2.641577</param>
+      <regression-coeff>0.9999932</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="63">
+    <fit model="linear">
+      <param name="slope">-0.002001132</param>
+      <param name="intercept">2.656067</param>
+      <regression-coeff>0.9999899</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="64">
+    <fit model="linear">
+      <param name="slope">-0.002003216</param>
+      <param name="intercept">2.6379855</param>
+      <regression-coeff>0.9999872</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="65">
+    <fit model="linear">
+      <param name="slope">-0.0020059173</param>
+      <param name="intercept">2.6574929</param>
+      <regression-coeff>0.999991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="66">
+    <fit model="linear">
+      <param name="slope">-0.0020080267</param>
+      <param name="intercept">2.661464</param>
+      <regression-coeff>0.99999684</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="67">
+    <fit model="linear">
+      <param name="slope">-0.002002632</param>
+      <param name="intercept">2.62792</param>
+      <regression-coeff>0.99999416</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="68">
+    <fit model="linear">
+      <param name="slope">-0.0020046956</param>
+      <param name="intercept">2.630928</param>
+      <regression-coeff>0.9999797</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="69">
+    <fit model="linear">
+      <param name="slope">-0.002000529</param>
+      <param name="intercept">2.630903</param>
+      <regression-coeff>0.9999869</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="70">
+    <fit model="linear">
+      <param name="slope">-0.0020026143</param>
+      <param name="intercept">2.6468468</param>
+      <regression-coeff>0.9999853</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="71">
+    <fit model="linear">
+      <param name="slope">-0.0019981554</param>
+      <param name="intercept">2.6384912</param>
+      <regression-coeff>0.9999908</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="72">
+    <fit model="linear">
+      <param name="slope">-0.0020035126</param>
+      <param name="intercept">2.6433873</param>
+      <regression-coeff>0.99998677</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="73">
+    <fit model="linear">
+      <param name="slope">-0.0020047207</param>
+      <param name="intercept">2.6688461</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="74">
+    <fit model="linear">
+      <param name="slope">-0.0020059163</param>
+      <param name="intercept">2.652022</param>
+      <regression-coeff>0.9999906</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="75">
+    <fit model="linear">
+      <param name="slope">-0.0020062174</param>
+      <param name="intercept">2.664183</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="76">
+    <fit model="linear">
+      <param name="slope">-0.0020020169</param>
+      <param name="intercept">2.6405966</param>
+      <regression-coeff>0.9999854</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="77">
+    <fit model="linear">
+      <param name="slope">-0.0020082868</param>
+      <param name="intercept">2.63017</param>
+      <regression-coeff>0.9999758</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="78">
+    <fit model="linear">
+      <param name="slope">-0.0020008313</param>
+      <param name="intercept">2.648666</param>
+      <regression-coeff>0.9999888</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="79">
+    <fit model="linear">
+      <param name="slope">-0.002005612</param>
+      <param name="intercept">2.663566</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="80">
+    <fit model="linear">
+      <param name="slope">-0.0020047207</param>
+      <param name="intercept">2.6579099</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="81">
+    <fit model="linear">
+      <param name="slope">-0.00200502</param>
+      <param name="intercept">2.6532948</param>
+      <regression-coeff>0.99999195</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="82">
+    <fit model="linear">
+      <param name="slope">-0.002007422</param>
+      <param name="intercept">2.648988</param>
+      <regression-coeff>0.9999941</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="83">
+    <fit model="linear">
+      <param name="slope">-0.0019999226</param>
+      <param name="intercept">2.634661</param>
+      <regression-coeff>0.999981</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="84">
+    <fit model="linear">
+      <param name="slope">-0.0020059156</param>
+      <param name="intercept">2.654027</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="85">
+    <fit model="linear">
+      <param name="slope">-0.0020074123</param>
+      <param name="intercept">2.6488006</param>
+      <regression-coeff>0.9999892</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="86">
+    <fit model="linear">
+      <param name="slope">-0.002006212</param>
+      <param name="intercept">2.643205</param>
+      <regression-coeff>0.99998933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="87">
+    <fit model="linear">
+      <param name="slope">-0.0020059156</param>
+      <param name="intercept">2.6419914</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="88">
+    <fit model="linear">
+      <param name="slope">-0.0020104137</param>
+      <param name="intercept">2.6653764</param>
+      <regression-coeff>0.9999869</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="89">
+    <fit model="linear">
+      <param name="slope">-0.0020059163</param>
+      <param name="intercept">2.6439981</param>
+      <regression-coeff>0.9999906</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="90">
+    <fit model="linear">
+      <param name="slope">-0.0020020267</param>
+      <param name="intercept">2.648609</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="91">
+    <fit model="linear">
+      <param name="slope">-0.002005903</param>
+      <param name="intercept">2.6452692</param>
+      <regression-coeff>0.999984</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="92">
+    <fit model="linear">
+      <param name="slope">-0.0020074123</param>
+      <param name="intercept">2.652815</param>
+      <regression-coeff>0.9999892</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="93">
+    <fit model="linear">
+      <param name="slope">-0.00200502</param>
+      <param name="intercept">2.6542077</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="94">
+    <fit model="linear">
+      <param name="slope">-0.0020146351</param>
+      <param name="intercept">2.6555898</param>
+      <regression-coeff>0.99998635</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="95">
+    <fit model="linear">
+      <param name="slope">-0.002017367</param>
+      <param name="intercept">2.679632</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="96">
+    <fit model="linear">
+      <param name="slope">-0.0019987393</param>
+      <param name="intercept">2.6194668</param>
+      <regression-coeff>0.9999852</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="97">
+    <fit model="linear">
+      <param name="slope">-0.0020065203</param>
+      <param name="intercept">2.6522684</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="98">
+    <fit model="linear">
+      <param name="slope">-0.0020058958</param>
+      <param name="intercept">2.6408887</param>
+      <regression-coeff>0.99998045</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="99">
+    <fit model="linear">
+      <param name="slope">-0.0020047242</param>
+      <param name="intercept">2.6713986</param>
+      <regression-coeff>0.999993</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="100">
+    <fit model="linear">
+      <param name="slope">-0.0020125278</param>
+      <param name="intercept">2.6558251</param>
+      <regression-coeff>0.99998945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="101">
+    <fit model="linear">
+      <param name="slope">-0.0020017298</param>
+      <param name="intercept">2.6443024</param>
+      <regression-coeff>0.99999124</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="102">
+    <fit model="linear">
+      <param name="slope">-0.0020101012</param>
+      <param name="intercept">2.6632361</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="103">
+    <fit model="linear">
+      <param name="slope">-0.002002328</param>
+      <param name="intercept">2.6356268</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="104">
+    <fit model="linear">
+      <param name="slope">-0.0020062102</param>
+      <param name="intercept">2.6459413</param>
+      <regression-coeff>0.99998754</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="105">
+    <fit model="linear">
+      <param name="slope">-0.0020110193</param>
+      <param name="intercept">2.6327202</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="106">
+    <fit model="linear">
+      <param name="slope">-0.0020005433</param>
+      <param name="intercept">2.644548</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="107">
+    <fit model="linear">
+      <param name="slope">-0.002002616</param>
+      <param name="intercept">2.649578</param>
+      <regression-coeff>0.9999862</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="108">
+    <fit model="linear">
+      <param name="slope">-0.0020055978</param>
+      <param name="intercept">2.6469676</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="109">
+    <fit model="linear">
+      <param name="slope">-0.0020086225</param>
+      <param name="intercept">2.657511</param>
+      <regression-coeff>0.99999416</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="110">
+    <fit model="linear">
+      <param name="slope">-0.0020005344</param>
+      <param name="intercept">2.637997</param>
+      <regression-coeff>0.9999895</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="111">
+    <fit model="linear">
+      <param name="slope">-0.0020014227</param>
+      <param name="intercept">2.6432686</param>
+      <regression-coeff>0.99998605</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="112">
+    <fit model="linear">
+      <param name="slope">-0.0020113133</param>
+      <param name="intercept">2.654962</param>
+      <regression-coeff>0.9999847</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="113">
+    <fit model="linear">
+      <param name="slope">-0.0020068074</param>
+      <param name="intercept">2.6487381</param>
+      <regression-coeff>0.9999862</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="114">
+    <fit model="linear">
+      <param name="slope">-0.002009199</param>
+      <param name="intercept">2.6482513</param>
+      <regression-coeff>0.99998087</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="115">
+    <fit model="linear">
+      <param name="slope">-0.0020074095</param>
+      <param name="intercept">2.6522682</param>
+      <regression-coeff>0.9999869</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="116">
+    <fit model="linear">
+      <param name="slope">-0.0020095163</param>
+      <param name="intercept">2.6312077</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="117">
+    <fit model="linear">
+      <param name="slope">-0.0020032169</param>
+      <param name="intercept">2.6399906</param>
+      <regression-coeff>0.9999876</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="118">
+    <fit model="linear">
+      <param name="slope">-0.0020061957</param>
+      <param name="intercept">2.66782</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="119">
+    <fit model="linear">
+      <param name="slope">-0.0020068127</param>
+      <param name="intercept">2.6502</param>
+      <regression-coeff>0.9999888</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="120">
+    <fit model="linear">
+      <param name="slope">-0.0020086206</param>
+      <param name="intercept">2.631399</param>
+      <regression-coeff>0.9999924</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="121">
+    <fit model="linear">
+      <param name="slope">-0.0020071114</param>
+      <param name="intercept">2.6426573</param>
+      <regression-coeff>0.9999889</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="122">
+    <fit model="linear">
+      <param name="slope">-0.0020050209</param>
+      <param name="intercept">2.6312406</param>
+      <regression-coeff>0.9999925</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="123">
+    <fit model="linear">
+      <param name="slope">-0.0020182792</param>
+      <param name="intercept">2.662402</param>
+      <regression-coeff>0.999991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="124">
+    <fit model="linear">
+      <param name="slope">-0.0020062146</param>
+      <param name="intercept">2.6546974</param>
+      <regression-coeff>0.99998975</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="125">
+    <fit model="linear">
+      <param name="slope">-0.002008016</param>
+      <param name="intercept">2.651238</param>
+      <regression-coeff>0.9999906</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="126">
+    <fit model="linear">
+      <param name="slope">-0.002003829</param>
+      <param name="intercept">2.642788</param>
+      <regression-coeff>0.9999945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="127">
+    <fit model="linear">
+      <param name="slope">-0.0019784304</param>
+      <param name="intercept">2.6263835</param>
+      <regression-coeff>0.9999914</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="0">
+    <fit model="linear">
+      <param name="slope">-0.0019633817</param>
+      <param name="intercept">2.6863751</param>
+      <regression-coeff>0.99998796</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="1">
+    <fit model="linear">
+      <param name="slope">-0.0019642273</param>
+      <param name="intercept">2.671566</param>
+      <regression-coeff>0.9999795</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="2">
+    <fit model="linear">
+      <param name="slope">-0.0019700152</param>
+      <param name="intercept">2.645029</param>
+      <regression-coeff>0.99999225</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="3">
+    <fit model="linear">
+      <param name="slope">-0.0019880969</param>
+      <param name="intercept">2.6763573</param>
+      <regression-coeff>0.99999124</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="4">
+    <fit model="linear">
+      <param name="slope">-0.0019871893</param>
+      <param name="intercept">2.6738029</param>
+      <regression-coeff>0.9999781</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="5">
+    <fit model="linear">
+      <param name="slope">-0.0019872016</param>
+      <param name="intercept">2.6624277</param>
+      <regression-coeff>0.9999843</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="6">
+    <fit model="linear">
+      <param name="slope">-0.0019831103</param>
+      <param name="intercept">2.644852</param>
+      <regression-coeff>0.999993</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="7">
+    <fit model="linear">
+      <param name="slope">-0.0019845457</param>
+      <param name="intercept">2.6605945</param>
+      <regression-coeff>0.99997896</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="8">
+    <fit model="linear">
+      <param name="slope">-0.0019895663</param>
+      <param name="intercept">2.6637783</param>
+      <regression-coeff>0.99998975</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="9">
+    <fit model="linear">
+      <param name="slope">-0.0019892857</param>
+      <param name="intercept">2.6511838</param>
+      <regression-coeff>0.9999962</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="10">
+    <fit model="linear">
+      <param name="slope">-0.001978703</param>
+      <param name="intercept">2.6371064</param>
+      <regression-coeff>0.9999817</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="11">
+    <fit model="linear">
+      <param name="slope">-0.0019842829</param>
+      <param name="intercept">2.6599433</param>
+      <regression-coeff>0.99999356</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="12">
+    <fit model="linear">
+      <param name="slope">-0.0019839965</param>
+      <param name="intercept">2.6563973</param>
+      <regression-coeff>0.999997</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="13">
+    <fit model="linear">
+      <param name="slope">-0.0019869127</param>
+      <param name="intercept">2.6581519</param>
+      <regression-coeff>0.999987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="14">
+    <fit model="linear">
+      <param name="slope">-0.0019772742</param>
+      <param name="intercept">2.642097</param>
+      <regression-coeff>0.9999955</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="15">
+    <fit model="linear">
+      <param name="slope">-0.0019860524</param>
+      <param name="intercept">2.6641133</param>
+      <regression-coeff>0.9999981</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="16">
+    <fit model="linear">
+      <param name="slope">-0.0019880733</param>
+      <param name="intercept">2.6685765</param>
+      <regression-coeff>0.99997854</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="17">
+    <fit model="linear">
+      <param name="slope">-0.0019916315</param>
+      <param name="intercept">2.6715236</param>
+      <regression-coeff>0.9999888</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="18">
+    <fit model="linear">
+      <param name="slope">-0.0019813501</param>
+      <param name="intercept">2.646109</param>
+      <regression-coeff>0.9999913</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="19">
+    <fit model="linear">
+      <param name="slope">-0.0019886682</param>
+      <param name="intercept">2.6579788</param>
+      <regression-coeff>0.9999821</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="20">
+    <fit model="linear">
+      <param name="slope">-0.001986313</param>
+      <param name="intercept">2.6521232</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="21">
+    <fit model="linear">
+      <param name="slope">-0.0019895567</param>
+      <param name="intercept">2.6632314</param>
+      <regression-coeff>0.99998415</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="22">
+    <fit model="linear">
+      <param name="slope">-0.0019860533</param>
+      <param name="intercept">2.6659195</param>
+      <regression-coeff>0.9999985</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="23">
+    <fit model="linear">
+      <param name="slope">-0.0019863113</param>
+      <param name="intercept">2.6571784</param>
+      <regression-coeff>0.99998045</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="24">
+    <fit model="linear">
+      <param name="slope">-0.001990458</param>
+      <param name="intercept">2.6589036</param>
+      <regression-coeff>0.9999929</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="25">
+    <fit model="linear">
+      <param name="slope">-0.0019895758</param>
+      <param name="intercept">2.6596227</param>
+      <regression-coeff>0.9999946</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="26">
+    <fit model="linear">
+      <param name="slope">-0.0019892768</param>
+      <param name="intercept">2.652626</param>
+      <regression-coeff>0.9999918</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="27">
+    <fit model="linear">
+      <param name="slope">-0.00199193</param>
+      <param name="intercept">2.664587</param>
+      <regression-coeff>0.99999017</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="28">
+    <fit model="linear">
+      <param name="slope">-0.0019895618</param>
+      <param name="intercept">2.6610634</param>
+      <regression-coeff>0.99998754</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="29">
+    <fit model="linear">
+      <param name="slope">-0.001988083</param>
+      <param name="intercept">2.655386</param>
+      <regression-coeff>0.99998415</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="30">
+    <fit model="linear">
+      <param name="slope">-0.0019845762</param>
+      <param name="intercept">2.64437</param>
+      <regression-coeff>0.9999944</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="31">
+    <fit model="linear">
+      <param name="slope">-0.0019910487</param>
+      <param name="intercept">2.668924</param>
+      <regression-coeff>0.9999929</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="32">
+    <fit model="linear">
+      <param name="slope">-0.001982203</param>
+      <param name="intercept">2.6621382</param>
+      <regression-coeff>0.9999786</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="33">
+    <fit model="linear">
+      <param name="slope">-0.0019848524</param>
+      <param name="intercept">2.6392503</param>
+      <regression-coeff>0.9999847</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="34">
+    <fit model="linear">
+      <param name="slope">-0.0019878007</param>
+      <param name="intercept">2.6601486</param>
+      <regression-coeff>0.99999034</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="35">
+    <fit model="linear">
+      <param name="slope">-0.0019969346</param>
+      <param name="intercept">2.6683154</param>
+      <regression-coeff>0.9999743</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="36">
+    <fit model="linear">
+      <param name="slope">-0.0019874957</param>
+      <param name="intercept">2.6495419</param>
+      <regression-coeff>0.99998426</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="37">
+    <fit model="linear">
+      <param name="slope">-0.0019904335</param>
+      <param name="intercept">2.6485794</param>
+      <regression-coeff>0.9999806</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="38">
+    <fit model="linear">
+      <param name="slope">-0.0019831043</param>
+      <param name="intercept">2.6486342</param>
+      <regression-coeff>0.9999908</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="39">
+    <fit model="linear">
+      <param name="slope">-0.0019875027</param>
+      <param name="intercept">2.6645403</param>
+      <regression-coeff>0.99998856</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="40">
+    <fit model="linear">
+      <param name="slope">-0.0019954513</param>
+      <param name="intercept">2.6475558</param>
+      <regression-coeff>0.99997514</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="41">
+    <fit model="linear">
+      <param name="slope">-0.0019916429</param>
+      <param name="intercept">2.6751494</param>
+      <regression-coeff>0.9999945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="42">
+    <fit model="linear">
+      <param name="slope">-0.0019898734</param>
+      <param name="intercept">2.6590228</param>
+      <regression-coeff>0.99999493</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="43">
+    <fit model="linear">
+      <param name="slope">-0.0019928233</param>
+      <param name="intercept">2.6600688</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="44">
+    <fit model="linear">
+      <param name="slope">-0.0019872207</param>
+      <param name="intercept">2.6405764</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="45">
+    <fit model="linear">
+      <param name="slope">-0.0019860421</param>
+      <param name="intercept">2.6581497</param>
+      <regression-coeff>0.9999929</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="46">
+    <fit model="linear">
+      <param name="slope">-0.0019839923</param>
+      <param name="intercept">2.662167</param>
+      <regression-coeff>0.99999505</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="47">
+    <fit model="linear">
+      <param name="slope">-0.0019931183</param>
+      <param name="intercept">2.6565685</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="48">
+    <fit model="linear">
+      <param name="slope">-0.001992228</param>
+      <param name="intercept">2.6638052</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="49">
+    <fit model="linear">
+      <param name="slope">-0.0019883951</param>
+      <param name="intercept">2.6486475</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="50">
+    <fit model="linear">
+      <param name="slope">-0.001989868</param>
+      <param name="intercept">2.6481667</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="51">
+    <fit model="linear">
+      <param name="slope">-0.001989869</param>
+      <param name="intercept">2.6588404</param>
+      <regression-coeff>0.9999927</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="52">
+    <fit model="linear">
+      <param name="slope">-0.0019875166</param>
+      <param name="intercept">2.6634626</param>
+      <regression-coeff>0.9999955</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="53">
+    <fit model="linear">
+      <param name="slope">-0.0019863374</param>
+      <param name="intercept">2.6597185</param>
+      <regression-coeff>0.99999356</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="54">
+    <fit model="linear">
+      <param name="slope">-0.0019881038</param>
+      <param name="intercept">2.6476228</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="55">
+    <fit model="linear">
+      <param name="slope">-0.0019813552</param>
+      <param name="intercept">2.637827</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="56">
+    <fit model="linear">
+      <param name="slope">-0.0019875115</param>
+      <param name="intercept">2.642501</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="57">
+    <fit model="linear">
+      <param name="slope">-0.001988389</param>
+      <param name="intercept">2.6444871</param>
+      <regression-coeff>0.9999891</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="58">
+    <fit model="linear">
+      <param name="slope">-0.0019898734</param>
+      <param name="intercept">2.6431034</param>
+      <regression-coeff>0.99999493</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="59">
+    <fit model="linear">
+      <param name="slope">-0.0019919327</param>
+      <param name="intercept">2.6542659</param>
+      <regression-coeff>0.99999154</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="60">
+    <fit model="linear">
+      <param name="slope">-0.001986332</param>
+      <param name="intercept">2.6640494</param>
+      <regression-coeff>0.9999908</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="61">
+    <fit model="linear">
+      <param name="slope">-0.0019916445</param>
+      <param name="intercept">2.647266</param>
+      <regression-coeff>0.9999962</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="62">
+    <fit model="linear">
+      <param name="slope">-0.001989868</param>
+      <param name="intercept">2.644187</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="63">
+    <fit model="linear">
+      <param name="slope">-0.0019875115</param>
+      <param name="intercept">2.6584005</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="64">
+    <fit model="linear">
+      <param name="slope">-0.0019895697</param>
+      <param name="intercept">2.6384583</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="65">
+    <fit model="linear">
+      <param name="slope">-0.0019934168</param>
+      <param name="intercept">2.6590476</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="66">
+    <fit model="linear">
+      <param name="slope">-0.0019954883</param>
+      <param name="intercept">2.6637173</param>
+      <regression-coeff>0.9999937</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="67">
+    <fit model="linear">
+      <param name="slope">-0.001990149</param>
+      <param name="intercept">2.6300087</param>
+      <regression-coeff>0.99998605</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="68">
+    <fit model="linear">
+      <param name="slope">-0.001990162</param>
+      <param name="intercept">2.6310995</param>
+      <regression-coeff>0.9999926</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="69">
+    <fit model="linear">
+      <param name="slope">-0.001989868</param>
+      <param name="intercept">2.6342375</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="70">
+    <fit model="linear">
+      <param name="slope">-0.0019877953</param>
+      <param name="intercept">2.6484008</param>
+      <regression-coeff>0.99998677</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="71">
+    <fit model="linear">
+      <param name="slope">-0.0019872207</param>
+      <param name="intercept">2.6405764</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="72">
+    <fit model="linear">
+      <param name="slope">-0.0019904615</param>
+      <param name="intercept">2.6451545</param>
+      <regression-coeff>0.99999386</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="73">
+    <fit model="linear">
+      <param name="slope">-0.0019910296</param>
+      <param name="intercept">2.6689157</param>
+      <regression-coeff>0.9999834</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="74">
+    <fit model="linear">
+      <param name="slope">-0.0019910426</param>
+      <param name="intercept">2.6535366</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="75">
+    <fit model="linear">
+      <param name="slope">-0.0019916384</param>
+      <param name="intercept">2.6642838</param>
+      <regression-coeff>0.99999225</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="76">
+    <fit model="linear">
+      <param name="slope">-0.0019889441</param>
+      <param name="intercept">2.641459</param>
+      <regression-coeff>0.9999727</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="77">
+    <fit model="linear">
+      <param name="slope">-0.0019933905</param>
+      <param name="intercept">2.6304042</param>
+      <regression-coeff>0.99998146</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="78">
+    <fit model="linear">
+      <param name="slope">-0.00198869</param>
+      <param name="intercept">2.6502132</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="79">
+    <fit model="linear">
+      <param name="slope">-0.001988988</param>
+      <param name="intercept">2.6620903</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="80">
+    <fit model="linear">
+      <param name="slope">-0.0019966755</param>
+      <param name="intercept">2.6604002</param>
+      <regression-coeff>0.9999933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="81">
+    <fit model="linear">
+      <param name="slope">-0.0019913383</param>
+      <param name="intercept">2.654925</param>
+      <regression-coeff>0.9999899</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="82">
+    <fit model="linear">
+      <param name="slope">-0.0019937</param>
+      <param name="intercept">2.6495593</param>
+      <regression-coeff>0.99998814</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="83">
+    <fit model="linear">
+      <param name="slope">-0.0019857564</param>
+      <param name="intercept">2.635827</param>
+      <regression-coeff>0.999997</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="84">
+    <fit model="linear">
+      <param name="slope">-0.0019916429</param>
+      <param name="intercept">2.6552327</param>
+      <regression-coeff>0.9999945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="85">
+    <fit model="linear">
+      <param name="slope">-0.001997563</param>
+      <param name="intercept">2.6518712</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="86">
+    <fit model="linear">
+      <param name="slope">-0.0019925304</param>
+      <param name="intercept">2.6440065</param>
+      <regression-coeff>0.99999547</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="87">
+    <fit model="linear">
+      <param name="slope">-0.0019940138</param>
+      <param name="intercept">2.6438875</param>
+      <regression-coeff>0.99999696</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="88">
+    <fit model="linear">
+      <param name="slope">-0.0019969505</param>
+      <param name="intercept">2.667959</param>
+      <regression-coeff>0.99998224</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="89">
+    <fit model="linear">
+      <param name="slope">-0.0019910522</param>
+      <param name="intercept">2.643223</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="90">
+    <fit model="linear">
+      <param name="slope">-0.0019886917</param>
+      <param name="intercept">2.6494918</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="91">
+    <fit model="linear">
+      <param name="slope">-0.0019939865</param>
+      <param name="intercept">2.6465945</param>
+      <regression-coeff>0.9999833</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="92">
+    <fit model="linear">
+      <param name="slope">-0.0019951921</param>
+      <param name="intercept">2.6537993</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="93">
+    <fit model="linear">
+      <param name="slope">-0.0019922236</param>
+      <param name="intercept">2.6540232</param>
+      <regression-coeff>0.9999899</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="94">
+    <fit model="linear">
+      <param name="slope">-0.002005298</param>
+      <param name="intercept">2.6576018</param>
+      <regression-coeff>0.99998116</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="95">
+    <fit model="linear">
+      <param name="slope">-0.002001429</param>
+      <param name="intercept">2.6802056</param>
+      <regression-coeff>0.9999892</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="96">
+    <fit model="linear">
+      <param name="slope">-0.0019842517</param>
+      <param name="intercept">2.6186225</param>
+      <regression-coeff>0.99997777</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="97">
+    <fit model="linear">
+      <param name="slope">-0.0019936655</param>
+      <param name="intercept">2.653894</param>
+      <regression-coeff>0.9999716</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="98">
+    <fit model="linear">
+      <param name="slope">-0.001990169</param>
+      <param name="intercept">2.6405113</param>
+      <regression-coeff>0.99999523</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="99">
+    <fit model="linear">
+      <param name="slope">-0.0019901393</param>
+      <param name="intercept">2.672159</param>
+      <regression-coeff>0.99998116</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="100">
+    <fit model="linear">
+      <param name="slope">-0.0019975756</param>
+      <param name="intercept">2.654599</param>
+      <regression-coeff>0.9999984</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="101">
+    <fit model="linear">
+      <param name="slope">-0.0019869215</param>
+      <param name="intercept">2.6444283</param>
+      <regression-coeff>0.9999914</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="102">
+    <fit model="linear">
+      <param name="slope">-0.0019981482</param>
+      <param name="intercept">2.6657348</param>
+      <regression-coeff>0.9999872</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="103">
+    <fit model="linear">
+      <param name="slope">-0.0019898645</param>
+      <param name="intercept">2.6358643</param>
+      <regression-coeff>0.99999046</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="104">
+    <fit model="linear">
+      <param name="slope">-0.0019922254</param>
+      <param name="intercept">2.6458747</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="105">
+    <fit model="linear">
+      <param name="slope">-0.001998426</param>
+      <param name="intercept">2.6349673</param>
+      <regression-coeff>0.99997723</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="106">
+    <fit model="linear">
+      <param name="slope">-0.0019931227</param>
+      <param name="intercept">2.647691</param>
+      <regression-coeff>0.9999948</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="107">
+    <fit model="linear">
+      <param name="slope">-0.001989868</param>
+      <param name="intercept">2.6481667</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="108">
+    <fit model="linear">
+      <param name="slope">-0.0019945928</param>
+      <param name="intercept">2.6477494</param>
+      <regression-coeff>0.9999909</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="109">
+    <fit model="linear">
+      <param name="slope">-0.0019966702</param>
+      <param name="intercept">2.6593096</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="110">
+    <fit model="linear">
+      <param name="slope">-0.0019910391</param>
+      <param name="intercept">2.639054</param>
+      <regression-coeff>0.99998814</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="111">
+    <fit model="linear">
+      <param name="slope">-0.0019863225</param>
+      <param name="intercept">2.6425579</param>
+      <regression-coeff>0.99998605</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="112">
+    <fit model="linear">
+      <param name="slope">-0.0019966755</param>
+      <param name="intercept">2.6547742</param>
+      <regression-coeff>0.9999933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="113">
+    <fit model="linear">
+      <param name="slope">-0.0019980979</param>
+      <param name="intercept">2.6513646</param>
+      <regression-coeff>0.99996203</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="114">
+    <fit model="linear">
+      <param name="slope">-0.001994571</param>
+      <param name="intercept">2.6470156</param>
+      <regression-coeff>0.9999791</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="115">
+    <fit model="linear">
+      <param name="slope">-0.0019963705</param>
+      <param name="intercept">2.6537387</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="116">
+    <fit model="linear">
+      <param name="slope">-0.0019987596</param>
+      <param name="intercept">2.632738</param>
+      <regression-coeff>0.9999962</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="117">
+    <fit model="linear">
+      <param name="slope">-0.0019901576</param>
+      <param name="intercept">2.6408677</param>
+      <regression-coeff>0.99999034</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="118">
+    <fit model="linear">
+      <param name="slope">-0.0019951789</param>
+      <param name="intercept">2.6672165</param>
+      <regression-coeff>0.99998647</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="119">
+    <fit model="linear">
+      <param name="slope">-0.0019919344</param>
+      <param name="intercept">2.6491957</param>
+      <regression-coeff>0.9999932</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="120">
+    <fit model="linear">
+      <param name="slope">-0.0019972683</param>
+      <param name="intercept">2.6330483</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="121">
+    <fit model="linear">
+      <param name="slope">-0.0019972718</param>
+      <param name="intercept">2.6423104</param>
+      <regression-coeff>0.9999943</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="122">
+    <fit model="linear">
+      <param name="slope">-0.0019928173</param>
+      <param name="intercept">2.6299937</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="123">
+    <fit model="linear">
+      <param name="slope">-0.0020047268</param>
+      <param name="intercept">2.6613758</param>
+      <regression-coeff>0.99999523</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="124">
+    <fit model="linear">
+      <param name="slope">-0.001993705</param>
+      <param name="intercept">2.6560867</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="125">
+    <fit model="linear">
+      <param name="slope">-0.0019933959</param>
+      <param name="intercept">2.6505213</param>
+      <regression-coeff>0.99998415</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="126">
+    <fit model="linear">
+      <param name="slope">-0.0019916375</param>
+      <param name="intercept">2.6425567</param>
+      <regression-coeff>0.99999183</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="127">
+    <fit model="linear">
+      <param name="slope">-0.0019702925</param>
+      <param name="intercept">2.62562</param>
+      <regression-coeff>0.99998623</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="0">
+    <fit model="linear">
+      <param name="slope">-0.0020907072</param>
+      <param name="intercept">2.6907156</param>
+      <regression-coeff>0.99991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="1">
+    <fit model="linear">
+      <param name="slope">-0.0020982912</param>
+      <param name="intercept">2.6780012</param>
+      <regression-coeff>0.9999431</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="2">
+    <fit model="linear">
+      <param name="slope">-0.0021094908</param>
+      <param name="intercept">2.651454</param>
+      <regression-coeff>0.9999396</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="3">
+    <fit model="linear">
+      <param name="slope">-0.0021251899</param>
+      <param name="intercept">2.6855738</param>
+      <regression-coeff>0.9997844</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="4">
+    <fit model="linear">
+      <param name="slope">-0.0021262234</param>
+      <param name="intercept">2.6832826</param>
+      <regression-coeff>0.9999537</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="5">
+    <fit model="linear">
+      <param name="slope">-0.0021200136</param>
+      <param name="intercept">2.6688452</param>
+      <regression-coeff>0.9998744</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="6">
+    <fit model="linear">
+      <param name="slope">-0.0021213705</param>
+      <param name="intercept">2.6527967</param>
+      <regression-coeff>0.999883</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="7">
+    <fit model="linear">
+      <param name="slope">-0.002124257</param>
+      <param name="intercept">2.6705225</param>
+      <regression-coeff>0.99997693</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="8">
+    <fit model="linear">
+      <param name="slope">-0.0021275452</param>
+      <param name="intercept">2.670275</param>
+      <regression-coeff>0.99994105</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="9">
+    <fit model="linear">
+      <param name="slope">-0.0021238276</param>
+      <param name="intercept">2.6560636</param>
+      <regression-coeff>0.999934</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="10">
+    <fit model="linear">
+      <param name="slope">-0.0021105085</param>
+      <param name="intercept">2.6411061</param>
+      <regression-coeff>0.9999502</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="11">
+    <fit model="linear">
+      <param name="slope">-0.0021405981</param>
+      <param name="intercept">2.6734774</param>
+      <regression-coeff>0.9998588</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="12">
+    <fit model="linear">
+      <param name="slope">-0.0021172077</param>
+      <param name="intercept">2.6604218</param>
+      <regression-coeff>0.9999712</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="13">
+    <fit model="linear">
+      <param name="slope">-0.0021100887</param>
+      <param name="intercept">2.6593602</param>
+      <regression-coeff>0.9999085</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="14">
+    <fit model="linear">
+      <param name="slope">-0.0021108743</param>
+      <param name="intercept">2.647963</param>
+      <regression-coeff>0.99996614</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="15">
+    <fit model="linear">
+      <param name="slope">-0.0021228648</param>
+      <param name="intercept">2.6695864</param>
+      <regression-coeff>0.9999544</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="16">
+    <fit model="linear">
+      <param name="slope">-0.0021234753</param>
+      <param name="intercept">2.677548</param>
+      <regression-coeff>0.9999264</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="17">
+    <fit model="linear">
+      <param name="slope">-0.0021292605</param>
+      <param name="intercept">2.6833405</param>
+      <regression-coeff>0.99995375</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="18">
+    <fit model="linear">
+      <param name="slope">-0.0021165856</param>
+      <param name="intercept">2.650365</param>
+      <regression-coeff>0.99999195</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="19">
+    <fit model="linear">
+      <param name="slope">-0.0021215614</param>
+      <param name="intercept">2.6642497</param>
+      <regression-coeff>0.99981487</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="20">
+    <fit model="linear">
+      <param name="slope">-0.0021225237</param>
+      <param name="intercept">2.6630847</param>
+      <regression-coeff>0.99995196</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="21">
+    <fit model="linear">
+      <param name="slope">-0.0021188643</param>
+      <param name="intercept">2.6693547</param>
+      <regression-coeff>0.9998062</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="22">
+    <fit model="linear">
+      <param name="slope">-0.0021136815</param>
+      <param name="intercept">2.667688</param>
+      <regression-coeff>0.9998792</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="23">
+    <fit model="linear">
+      <param name="slope">-0.0021201486</param>
+      <param name="intercept">2.6662004</param>
+      <regression-coeff>0.9999391</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="24">
+    <fit model="linear">
+      <param name="slope">-0.0021172247</param>
+      <param name="intercept">2.665433</param>
+      <regression-coeff>0.9999783</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="25">
+    <fit model="linear">
+      <param name="slope">-0.0021232623</param>
+      <param name="intercept">2.6645312</param>
+      <regression-coeff>0.9999843</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="26">
+    <fit model="linear">
+      <param name="slope">-0.002122238</param>
+      <param name="intercept">2.6600783</param>
+      <regression-coeff>0.99997556</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="27">
+    <fit model="linear">
+      <param name="slope">-0.0021235966</param>
+      <param name="intercept">2.671614</param>
+      <regression-coeff>0.99998266</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="28">
+    <fit model="linear">
+      <param name="slope">-0.0021288444</param>
+      <param name="intercept">2.6684644</param>
+      <regression-coeff>0.99991804</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="29">
+    <fit model="linear">
+      <param name="slope">-0.0021285915</param>
+      <param name="intercept">2.6646895</param>
+      <regression-coeff>0.99995697</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="30">
+    <fit model="linear">
+      <param name="slope">-0.002117518</param>
+      <param name="intercept">2.65169</param>
+      <regression-coeff>0.99995905</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="31">
+    <fit model="linear">
+      <param name="slope">-0.0021393339</param>
+      <param name="intercept">2.684066</param>
+      <regression-coeff>0.9999051</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="32">
+    <fit model="linear">
+      <param name="slope">-0.0021178771</param>
+      <param name="intercept">2.6695411</param>
+      <regression-coeff>0.9999708</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="33">
+    <fit model="linear">
+      <param name="slope">-0.00211651</param>
+      <param name="intercept">2.645911</param>
+      <regression-coeff>0.9999562</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="34">
+    <fit model="linear">
+      <param name="slope">-0.002130121</param>
+      <param name="intercept">2.6716764</param>
+      <regression-coeff>0.99988353</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="35">
+    <fit model="linear">
+      <param name="slope">-0.0021293375</param>
+      <param name="intercept">2.6740777</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="36">
+    <fit model="linear">
+      <param name="slope">-0.002114547</param>
+      <param name="intercept">2.6530366</param>
+      <regression-coeff>0.9998158</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="37">
+    <fit model="linear">
+      <param name="slope">-0.0021248541</param>
+      <param name="intercept">2.6578164</param>
+      <regression-coeff>0.99994224</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="38">
+    <fit model="linear">
+      <param name="slope">-0.0021155416</param>
+      <param name="intercept">2.657077</param>
+      <regression-coeff>0.9999716</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="39">
+    <fit model="linear">
+      <param name="slope">-0.002123222</param>
+      <param name="intercept">2.6722362</param>
+      <regression-coeff>0.9999653</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="40">
+    <fit model="linear">
+      <param name="slope">-0.0021252583</param>
+      <param name="intercept">2.654301</param>
+      <regression-coeff>0.999975</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="41">
+    <fit model="linear">
+      <param name="slope">-0.0021182236</param>
+      <param name="intercept">2.6821957</param>
+      <regression-coeff>0.9999765</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="42">
+    <fit model="linear">
+      <param name="slope">-0.002121239</param>
+      <param name="intercept">2.6656659</param>
+      <regression-coeff>0.9999791</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="43">
+    <fit model="linear">
+      <param name="slope">-0.0021222592</param>
+      <param name="intercept">2.6652958</param>
+      <regression-coeff>0.9999855</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="44">
+    <fit model="linear">
+      <param name="slope">-0.0021208809</param>
+      <param name="intercept">2.6479788</param>
+      <regression-coeff>0.9999683</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="45">
+    <fit model="linear">
+      <param name="slope">-0.0021167968</param>
+      <param name="intercept">2.6664188</param>
+      <regression-coeff>0.999934</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="46">
+    <fit model="linear">
+      <param name="slope">-0.0021138638</param>
+      <param name="intercept">2.6660311</param>
+      <regression-coeff>0.9999654</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="47">
+    <fit model="linear">
+      <param name="slope">-0.002123255</param>
+      <param name="intercept">2.6651077</param>
+      <regression-coeff>0.99998003</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="48">
+    <fit model="linear">
+      <param name="slope">-0.0021299801</param>
+      <param name="intercept">2.6749146</param>
+      <regression-coeff>0.99997526</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="49">
+    <fit model="linear">
+      <param name="slope">-0.0021212623</param>
+      <param name="intercept">2.6529472</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="50">
+    <fit model="linear">
+      <param name="slope">-0.0021192126</param>
+      <param name="intercept">2.652539</param>
+      <regression-coeff>0.9999705</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="51">
+    <fit model="linear">
+      <param name="slope">-0.0021235785</param>
+      <param name="intercept">2.6689036</param>
+      <regression-coeff>0.9999741</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="52">
+    <fit model="linear">
+      <param name="slope">-0.0021165763</param>
+      <param name="intercept">2.6684492</param>
+      <regression-coeff>0.99998754</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="53">
+    <fit model="linear">
+      <param name="slope">-0.0021232488</param>
+      <param name="intercept">2.6664565</param>
+      <regression-coeff>0.99997705</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="54">
+    <fit model="linear">
+      <param name="slope">-0.0021229084</param>
+      <param name="intercept">2.6566732</param>
+      <regression-coeff>0.99997586</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="55">
+    <fit model="linear">
+      <param name="slope">-0.0021155877</param>
+      <param name="intercept">2.646324</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="56">
+    <fit model="linear">
+      <param name="slope">-0.0021252744</param>
+      <param name="intercept">2.6510239</param>
+      <regression-coeff>0.9999816</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="57">
+    <fit model="linear">
+      <param name="slope">-0.0021185619</param>
+      <param name="intercept">2.64882</param>
+      <regression-coeff>0.99997926</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="58">
+    <fit model="linear">
+      <param name="slope">-0.002121239</param>
+      <param name="intercept">2.6510098</param>
+      <regression-coeff>0.9999791</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="59">
+    <fit model="linear">
+      <param name="slope">-0.0021205582</param>
+      <param name="intercept">2.6609645</param>
+      <regression-coeff>0.99997324</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="60">
+    <fit model="linear">
+      <param name="slope">-0.002122166</param>
+      <param name="intercept">2.6716251</param>
+      <regression-coeff>0.9999416</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="61">
+    <fit model="linear">
+      <param name="slope">-0.002123238</param>
+      <param name="intercept">2.6562226</param>
+      <regression-coeff>0.999972</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="62">
+    <fit model="linear">
+      <param name="slope">-0.0021265969</param>
+      <param name="intercept">2.6548212</param>
+      <regression-coeff>0.9999708</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="63">
+    <fit model="linear">
+      <param name="slope">-0.002124276</param>
+      <param name="intercept">2.6666665</param>
+      <regression-coeff>0.99998677</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="64">
+    <fit model="linear">
+      <param name="slope">-0.0021202418</param>
+      <param name="intercept">2.6438785</param>
+      <regression-coeff>0.999982</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="65">
+    <fit model="linear">
+      <param name="slope">-0.002127511</param>
+      <param name="intercept">2.6706483</param>
+      <regression-coeff>0.999925</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="66">
+    <fit model="linear">
+      <param name="slope">-0.0021237852</param>
+      <param name="intercept">2.6693711</param>
+      <regression-coeff>0.9999141</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="67">
+    <fit model="linear">
+      <param name="slope">-0.002133258</param>
+      <param name="intercept">2.6387832</param>
+      <regression-coeff>0.99992603</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="68">
+    <fit model="linear">
+      <param name="slope">-0.0021205435</param>
+      <param name="intercept">2.636668</param>
+      <regression-coeff>0.9999664</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="69">
+    <fit model="linear">
+      <param name="slope">-0.0021332828</param>
+      <param name="intercept">2.6459692</param>
+      <regression-coeff>0.9999368</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="70">
+    <fit model="linear">
+      <param name="slope">-0.0021229074</param>
+      <param name="intercept">2.655708</param>
+      <regression-coeff>0.9999745</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="71">
+    <fit model="linear">
+      <param name="slope">-0.0021155311</param>
+      <param name="intercept">2.6455333</param>
+      <regression-coeff>0.99996585</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="72">
+    <fit model="linear">
+      <param name="slope">-0.0021336633</param>
+      <param name="intercept">2.6596923</param>
+      <regression-coeff>0.9999561</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="73">
+    <fit model="linear">
+      <param name="slope">-0.0021205158</param>
+      <param name="intercept">2.6777184</param>
+      <regression-coeff>0.9999542</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="74">
+    <fit model="linear">
+      <param name="slope">-0.00213109</param>
+      <param name="intercept">2.6637297</param>
+      <regression-coeff>0.999861</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="75">
+    <fit model="linear">
+      <param name="slope">-0.002121868</param>
+      <param name="intercept">2.6713142</param>
+      <regression-coeff>0.9998012</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="76">
+    <fit model="linear">
+      <param name="slope">-0.0021269706</param>
+      <param name="intercept">2.6541922</param>
+      <regression-coeff>0.9998295</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="77">
+    <fit model="linear">
+      <param name="slope">-0.0021146077</param>
+      <param name="intercept">2.6342218</param>
+      <regression-coeff>0.9998445</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="78">
+    <fit model="linear">
+      <param name="slope">-0.0021282511</param>
+      <param name="intercept">2.6593304</param>
+      <regression-coeff>0.99995565</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="79">
+    <fit model="linear">
+      <param name="slope">-0.0021256458</param>
+      <param name="intercept">2.6745498</param>
+      <regression-coeff>0.9998405</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="80">
+    <fit model="linear">
+      <param name="slope">-0.0021222592</param>
+      <param name="intercept">2.666259</param>
+      <regression-coeff>0.9999855</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="81">
+    <fit model="linear">
+      <param name="slope">-0.0021266034</param>
+      <param name="intercept">2.6606226</param>
+      <regression-coeff>0.999973</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="82">
+    <fit model="linear">
+      <param name="slope">-0.0021306784</param>
+      <param name="intercept">2.6596942</param>
+      <regression-coeff>0.99998635</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="83">
+    <fit model="linear">
+      <param name="slope">-0.0021138974</param>
+      <param name="intercept">2.6422153</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="84">
+    <fit model="linear">
+      <param name="slope">-0.002123586</param>
+      <param name="intercept">2.6617618</param>
+      <regression-coeff>0.99997854</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="85">
+    <fit model="linear">
+      <param name="slope">-0.0021286395</param>
+      <param name="intercept">2.6558056</param>
+      <regression-coeff>0.99998045</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="86">
+    <fit model="linear">
+      <param name="slope">-0.0021229296</param>
+      <param name="intercept">2.652822</param>
+      <regression-coeff>0.99998486</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="87">
+    <fit model="linear">
+      <param name="slope">-0.002128961</param>
+      <param name="intercept">2.653995</param>
+      <regression-coeff>0.9999728</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="88">
+    <fit model="linear">
+      <param name="slope">-0.002127638</param>
+      <param name="intercept">2.6716657</param>
+      <regression-coeff>0.99998474</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="89">
+    <fit model="linear">
+      <param name="slope">-0.002124601</param>
+      <param name="intercept">2.6536613</param>
+      <regression-coeff>0.99998146</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="90">
+    <fit model="linear">
+      <param name="slope">-0.0021215484</param>
+      <param name="intercept">2.6605802</param>
+      <regression-coeff>0.9999668</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="91">
+    <fit model="linear">
+      <param name="slope">-0.0021275675</param>
+      <param name="intercept">2.6546164</param>
+      <regression-coeff>0.99995154</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="92">
+    <fit model="linear">
+      <param name="slope">-0.0021168578</param>
+      <param name="intercept">2.6550896</param>
+      <regression-coeff>0.99996275</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="93">
+    <fit model="linear">
+      <param name="slope">-0.0021248201</param>
+      <param name="intercept">2.666881</param>
+      <regression-coeff>0.99992627</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="94">
+    <fit model="linear">
+      <param name="slope">-0.0021431227</param>
+      <param name="intercept">2.6697938</param>
+      <regression-coeff>0.99992085</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="95">
+    <fit model="linear">
+      <param name="slope">-0.002122061</param>
+      <param name="intercept">2.681808</param>
+      <regression-coeff>0.9998921</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="96">
+    <fit model="linear">
+      <param name="slope">-0.0021189214</param>
+      <param name="intercept">2.6271896</param>
+      <regression-coeff>0.999991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="97">
+    <fit model="linear">
+      <param name="slope">-0.0021388158</param>
+      <param name="intercept">2.6694713</param>
+      <regression-coeff>0.9998224</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="98">
+    <fit model="linear">
+      <param name="slope">-0.0021175137</param>
+      <param name="intercept">2.6466808</param>
+      <regression-coeff>0.9999579</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="99">
+    <fit model="linear">
+      <param name="slope">-0.0021250697</param>
+      <param name="intercept">2.6791499</param>
+      <regression-coeff>0.9998863</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="100">
+    <fit model="linear">
+      <param name="slope">-0.0021299063</param>
+      <param name="intercept">2.6644292</param>
+      <regression-coeff>0.9999406</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="101">
+    <fit model="linear">
+      <param name="slope">-0.002132296</param>
+      <param name="intercept">2.6591609</param>
+      <regression-coeff>0.999951</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="102">
+    <fit model="linear">
+      <param name="slope">-0.002125927</param>
+      <param name="intercept">2.6704087</param>
+      <regression-coeff>0.9999727</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="103">
+    <fit model="linear">
+      <param name="slope">-0.0021208301</param>
+      <param name="intercept">2.6446817</param>
+      <regression-coeff>0.9999443</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="104">
+    <fit model="linear">
+      <param name="slope">-0.0021299147</param>
+      <param name="intercept">2.658623</param>
+      <regression-coeff>0.99994457</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="105">
+    <fit model="linear">
+      <param name="slope">-0.0021273002</param>
+      <param name="intercept">2.6409745</param>
+      <regression-coeff>0.9999854</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="106">
+    <fit model="linear">
+      <param name="slope">-0.002125224</param>
+      <param name="intercept">2.6523573</param>
+      <regression-coeff>0.99979955</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="107">
+    <fit model="linear">
+      <param name="slope">-0.0021157153</param>
+      <param name="intercept">2.6581075</param>
+      <regression-coeff>0.9998961</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="108">
+    <fit model="linear">
+      <param name="slope">-0.002131618</param>
+      <param name="intercept">2.6598659</param>
+      <regression-coeff>0.9999508</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="109">
+    <fit model="linear">
+      <param name="slope">-0.002132322</param>
+      <param name="intercept">2.6684754</param>
+      <regression-coeff>0.99996316</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="110">
+    <fit model="linear">
+      <param name="slope">-0.0021222509</param>
+      <param name="intercept">2.6465774</param>
+      <regression-coeff>0.9999816</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="111">
+    <fit model="linear">
+      <param name="slope">-0.0021147104</param>
+      <param name="intercept">2.64887</param>
+      <regression-coeff>0.999894</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="112">
+    <fit model="linear">
+      <param name="slope">-0.0021353</param>
+      <param name="intercept">2.6684802</param>
+      <regression-coeff>0.9997694</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="113">
+    <fit model="linear">
+      <param name="slope">-0.002135555</param>
+      <param name="intercept">2.6608148</param>
+      <regression-coeff>0.9998887</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="114">
+    <fit model="linear">
+      <param name="slope">-0.0021151348</param>
+      <param name="intercept">2.6524968</param>
+      <regression-coeff>0.9999361</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="115">
+    <fit model="linear">
+      <param name="slope">-0.002137768</param>
+      <param name="intercept">2.6675048</param>
+      <regression-coeff>0.99996984</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="116">
+    <fit model="linear">
+      <param name="slope">-0.0021296581</param>
+      <param name="intercept">2.6407115</param>
+      <regression-coeff>0.9999828</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="117">
+    <fit model="linear">
+      <param name="slope">-0.0021063206</param>
+      <param name="intercept">2.6433282</param>
+      <regression-coeff>0.9998479</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="118">
+    <fit model="linear">
+      <param name="slope">-0.0021218264</param>
+      <param name="intercept">2.6786282</param>
+      <regression-coeff>0.9999397</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="119">
+    <fit model="linear">
+      <param name="slope">-0.0021359294</param>
+      <param name="intercept">2.6654263</param>
+      <regression-coeff>0.9999048</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="120">
+    <fit model="linear">
+      <param name="slope">-0.0021168094</param>
+      <param name="intercept">2.6346722</param>
+      <regression-coeff>0.9999399</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="121">
+    <fit model="linear">
+      <param name="slope">-0.0021276562</param>
+      <param name="intercept">2.6498148</param>
+      <regression-coeff>0.9999932</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="122">
+    <fit model="linear">
+      <param name="slope">-0.0021295673</param>
+      <param name="intercept">2.6433878</param>
+      <regression-coeff>0.9999392</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="123">
+    <fit model="linear">
+      <param name="slope">-0.0021445726</param>
+      <param name="intercept">2.676406</param>
+      <regression-coeff>0.9999581</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="124">
+    <fit model="linear">
+      <param name="slope">-0.0021289238</param>
+      <param name="intercept">2.664626</param>
+      <regression-coeff>0.9999544</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="125">
+    <fit model="linear">
+      <param name="slope">-0.0021262171</param>
+      <param name="intercept">2.659119</param>
+      <regression-coeff>0.9999507</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="126">
+    <fit model="linear">
+      <param name="slope">-0.002118137</param>
+      <param name="intercept">2.653853</param>
+      <regression-coeff>0.9999365</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="127">
+    <fit model="linear">
+      <param name="slope">-0.0020911337</param>
+      <param name="intercept">2.631769</param>
+      <regression-coeff>0.9999581</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="0">
+    <fit model="linear">
+      <param name="slope">-0.0019648194</param>
+      <param name="intercept">2.6819997</param>
+      <regression-coeff>0.9999889</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="1">
+    <fit model="linear">
+      <param name="slope">-0.0019758102</param>
+      <param name="intercept">2.668977</param>
+      <regression-coeff>0.99999046</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="2">
+    <fit model="linear">
+      <param name="slope">-0.0019834081</param>
+      <param name="intercept">2.641546</param>
+      <regression-coeff>0.9999962</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="3">
+    <fit model="linear">
+      <param name="slope">-0.0019996306</param>
+      <param name="intercept">2.6727169</param>
+      <regression-coeff>0.99998486</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="4">
+    <fit model="linear">
+      <param name="slope">-0.0020008313</param>
+      <param name="intercept">2.6704946</param>
+      <regression-coeff>0.9999888</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="5">
+    <fit model="linear">
+      <param name="slope">-0.001997256</param>
+      <param name="intercept">2.6577373</param>
+      <regression-coeff>0.99998635</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="6">
+    <fit model="linear">
+      <param name="slope">-0.0019937009</param>
+      <param name="intercept">2.6412225</param>
+      <regression-coeff>0.99998856</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="7">
+    <fit model="linear">
+      <param name="slope">-0.0020002376</param>
+      <param name="intercept">2.6586065</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="8">
+    <fit model="linear">
+      <param name="slope">-0.002000832</param>
+      <param name="intercept">2.6586711</param>
+      <regression-coeff>0.9999892</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="9">
+    <fit model="linear">
+      <param name="slope">-0.0020014388</param>
+      <param name="intercept">2.6487334</param>
+      <regression-coeff>0.99999505</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="10">
+    <fit model="linear">
+      <param name="slope">-0.0019931085</param>
+      <param name="intercept">2.63464</param>
+      <regression-coeff>0.99998856</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="11">
+    <fit model="linear">
+      <param name="slope">-0.0019954867</param>
+      <param name="intercept">2.654465</param>
+      <regression-coeff>0.9999928</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="12">
+    <fit model="linear">
+      <param name="slope">-0.0020016988</param>
+      <param name="intercept">2.6550264</param>
+      <regression-coeff>0.9999758</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="13">
+    <fit model="linear">
+      <param name="slope">-0.0019993496</param>
+      <param name="intercept">2.6551502</param>
+      <regression-coeff>0.9999933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="14">
+    <fit model="linear">
+      <param name="slope">-0.0019919334</param>
+      <param name="intercept">2.6403215</param>
+      <regression-coeff>0.9999928</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="15">
+    <fit model="linear">
+      <param name="slope">-0.001996373</param>
+      <param name="intercept">2.6590054</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="16">
+    <fit model="linear">
+      <param name="slope">-0.0020020257</param>
+      <param name="intercept">2.6666265</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="17">
+    <fit model="linear">
+      <param name="slope">-0.0020044153</param>
+      <param name="intercept">2.668537</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="18">
+    <fit model="linear">
+      <param name="slope">-0.0019948888</param>
+      <param name="intercept">2.6415226</param>
+      <regression-coeff>0.9999906</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="19">
+    <fit model="linear">
+      <param name="slope">-0.0020005433</param>
+      <param name="intercept">2.6565511</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="20">
+    <fit model="linear">
+      <param name="slope">-0.002000236</param>
+      <param name="intercept">2.649878</param>
+      <regression-coeff>0.99998945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="21">
+    <fit model="linear">
+      <param name="slope">-0.002001437</param>
+      <param name="intercept">2.6585584</param>
+      <regression-coeff>0.9999932</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="22">
+    <fit model="linear">
+      <param name="slope">-0.0019954883</param>
+      <param name="intercept">2.6606333</param>
+      <regression-coeff>0.9999937</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="23">
+    <fit model="linear">
+      <param name="slope">-0.0020008257</param>
+      <param name="intercept">2.6568496</param>
+      <regression-coeff>0.9999869</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="24">
+    <fit model="linear">
+      <param name="slope">-0.0020020267</param>
+      <param name="intercept">2.6566179</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="25">
+    <fit model="linear">
+      <param name="slope">-0.0019999358</param>
+      <param name="intercept">2.654847</param>
+      <regression-coeff>0.9999876</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="26">
+    <fit model="linear">
+      <param name="slope">-0.0020032213</param>
+      <param name="intercept">2.6514645</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="27">
+    <fit model="linear">
+      <param name="slope">-0.0020029247</param>
+      <param name="intercept">2.6617224</param>
+      <regression-coeff>0.999991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="28">
+    <fit model="linear">
+      <param name="slope">-0.0020032239</param>
+      <param name="intercept">2.6589332</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="29">
+    <fit model="linear">
+      <param name="slope">-0.0020032106</param>
+      <param name="intercept">2.653281</param>
+      <regression-coeff>0.99998444</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="30">
+    <fit model="linear">
+      <param name="slope">-0.001999348</param>
+      <param name="intercept">2.6431537</param>
+      <regression-coeff>0.99999166</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="31">
+    <fit model="linear">
+      <param name="slope">-0.0020032267</param>
+      <param name="intercept">2.6660366</param>
+      <regression-coeff>0.9999925</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="32">
+    <fit model="linear">
+      <param name="slope">-0.001995476</param>
+      <param name="intercept">2.6602662</param>
+      <regression-coeff>0.99998754</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="33">
+    <fit model="linear">
+      <param name="slope">-0.001998447</param>
+      <param name="intercept">2.636792</param>
+      <regression-coeff>0.99998796</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="34">
+    <fit model="linear">
+      <param name="slope">-0.0019996448</param>
+      <param name="intercept">2.6572719</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="35">
+    <fit model="linear">
+      <param name="slope">-0.0020089133</param>
+      <param name="intercept">2.665484</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="36">
+    <fit model="linear">
+      <param name="slope">-0.002000537</param>
+      <param name="intercept">2.6472733</param>
+      <regression-coeff>0.9999908</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="37">
+    <fit model="linear">
+      <param name="slope">-0.0020011389</param>
+      <param name="intercept">2.6462455</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="38">
+    <fit model="linear">
+      <param name="slope">-0.0019969628</param>
+      <param name="intercept">2.6467233</param>
+      <regression-coeff>0.99998933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="39">
+    <fit model="linear">
+      <param name="slope">-0.0020032213</param>
+      <param name="intercept">2.6634843</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="40">
+    <fit model="linear">
+      <param name="slope">-0.0020074104</param>
+      <param name="intercept">2.6447856</param>
+      <regression-coeff>0.9999874</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="41">
+    <fit model="linear">
+      <param name="slope">-0.0020032213</param>
+      <param name="intercept">2.6735005</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="42">
+    <fit model="linear">
+      <param name="slope">-0.0020035242</param>
+      <param name="intercept">2.656507</param>
+      <regression-coeff>0.9999918</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="43">
+    <fit model="linear">
+      <param name="slope">-0.0020059047</param>
+      <param name="intercept">2.6576693</param>
+      <regression-coeff>0.99998564</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="44">
+    <fit model="linear">
+      <param name="slope">-0.0019996448</param>
+      <param name="intercept">2.6372752</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="45">
+    <fit model="linear">
+      <param name="slope">-0.0019993416</param>
+      <param name="intercept">2.6569643</param>
+      <regression-coeff>0.9999885</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="46">
+    <fit model="linear">
+      <param name="slope">-0.0019975614</param>
+      <param name="intercept">2.659862</param>
+      <regression-coeff>0.99999046</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="47">
+    <fit model="linear">
+      <param name="slope">-0.0020047242</param>
+      <param name="intercept">2.6553607</param>
+      <regression-coeff>0.999993</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="48">
+    <fit model="linear">
+      <param name="slope">-0.0020047207</param>
+      <param name="intercept">2.6608262</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="49">
+    <fit model="linear">
+      <param name="slope">-0.0020017165</param>
+      <param name="intercept">2.645571</param>
+      <regression-coeff>0.99998456</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="50">
+    <fit model="linear">
+      <param name="slope">-0.0020023289</param>
+      <param name="intercept">2.646366</param>
+      <regression-coeff>0.9999921</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="51">
+    <fit model="linear">
+      <param name="slope">-0.0020041012</param>
+      <param name="intercept">2.6580203</param>
+      <regression-coeff>0.999981</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="52">
+    <fit model="linear">
+      <param name="slope">-0.0020008304</param>
+      <param name="intercept">2.6612177</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="53">
+    <fit model="linear">
+      <param name="slope">-0.0019972576</param>
+      <param name="intercept">2.6566484</param>
+      <regression-coeff>0.9999872</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="54">
+    <fit model="linear">
+      <param name="slope">-0.0020020257</param>
+      <param name="intercept">2.6466064</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="55">
+    <fit model="linear">
+      <param name="slope">-0.0019948808</param>
+      <param name="intercept">2.6366246</param>
+      <regression-coeff>0.9999857</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="56">
+    <fit model="linear">
+      <param name="slope">-0.002003223</param>
+      <param name="intercept">2.640903</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="57">
+    <fit model="linear">
+      <param name="slope">-0.0020020355</param>
+      <param name="intercept">2.6427884</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="58">
+    <fit model="linear">
+      <param name="slope">-0.0020032239</param>
+      <param name="intercept">2.6418145</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="59">
+    <fit model="linear">
+      <param name="slope">-0.0020053142</param>
+      <param name="intercept">2.6526854</param>
+      <regression-coeff>0.99998933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="60">
+    <fit model="linear">
+      <param name="slope">-0.0019975542</param>
+      <param name="intercept">2.6607656</param>
+      <regression-coeff>0.9999877</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="61">
+    <fit model="linear">
+      <param name="slope">-0.0020044143</param>
+      <param name="intercept">2.6464863</param>
+      <regression-coeff>0.99998784</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="62">
+    <fit model="linear">
+      <param name="slope">-0.0020008401</param>
+      <param name="intercept">2.641577</param>
+      <regression-coeff>0.9999932</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="63">
+    <fit model="linear">
+      <param name="slope">-0.002001132</param>
+      <param name="intercept">2.656067</param>
+      <regression-coeff>0.9999899</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="64">
+    <fit model="linear">
+      <param name="slope">-0.002003216</param>
+      <param name="intercept">2.6379855</param>
+      <regression-coeff>0.9999872</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="65">
+    <fit model="linear">
+      <param name="slope">-0.0020059173</param>
+      <param name="intercept">2.6574929</param>
+      <regression-coeff>0.999991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="66">
+    <fit model="linear">
+      <param name="slope">-0.0020080267</param>
+      <param name="intercept">2.661464</param>
+      <regression-coeff>0.99999684</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="67">
+    <fit model="linear">
+      <param name="slope">-0.002002632</param>
+      <param name="intercept">2.62792</param>
+      <regression-coeff>0.99999416</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="68">
+    <fit model="linear">
+      <param name="slope">-0.0020046956</param>
+      <param name="intercept">2.630928</param>
+      <regression-coeff>0.9999797</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="69">
+    <fit model="linear">
+      <param name="slope">-0.002000529</param>
+      <param name="intercept">2.630903</param>
+      <regression-coeff>0.9999869</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="70">
+    <fit model="linear">
+      <param name="slope">-0.0020026143</param>
+      <param name="intercept">2.6468468</param>
+      <regression-coeff>0.9999853</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="71">
+    <fit model="linear">
+      <param name="slope">-0.0019981554</param>
+      <param name="intercept">2.6384912</param>
+      <regression-coeff>0.9999908</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="72">
+    <fit model="linear">
+      <param name="slope">-0.0020035126</param>
+      <param name="intercept">2.6433873</param>
+      <regression-coeff>0.99998677</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="73">
+    <fit model="linear">
+      <param name="slope">-0.0020047207</param>
+      <param name="intercept">2.6688461</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="74">
+    <fit model="linear">
+      <param name="slope">-0.0020059163</param>
+      <param name="intercept">2.652022</param>
+      <regression-coeff>0.9999906</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="75">
+    <fit model="linear">
+      <param name="slope">-0.0020062174</param>
+      <param name="intercept">2.664183</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="76">
+    <fit model="linear">
+      <param name="slope">-0.0020020169</param>
+      <param name="intercept">2.6405966</param>
+      <regression-coeff>0.9999854</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="77">
+    <fit model="linear">
+      <param name="slope">-0.0020082868</param>
+      <param name="intercept">2.63017</param>
+      <regression-coeff>0.9999758</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="78">
+    <fit model="linear">
+      <param name="slope">-0.0020008313</param>
+      <param name="intercept">2.648666</param>
+      <regression-coeff>0.9999888</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="79">
+    <fit model="linear">
+      <param name="slope">-0.002005612</param>
+      <param name="intercept">2.663566</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="80">
+    <fit model="linear">
+      <param name="slope">-0.0020047207</param>
+      <param name="intercept">2.6579099</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="81">
+    <fit model="linear">
+      <param name="slope">-0.00200502</param>
+      <param name="intercept">2.6532948</param>
+      <regression-coeff>0.99999195</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="82">
+    <fit model="linear">
+      <param name="slope">-0.002007422</param>
+      <param name="intercept">2.648988</param>
+      <regression-coeff>0.9999941</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="83">
+    <fit model="linear">
+      <param name="slope">-0.0019999226</param>
+      <param name="intercept">2.634661</param>
+      <regression-coeff>0.999981</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="84">
+    <fit model="linear">
+      <param name="slope">-0.0020059156</param>
+      <param name="intercept">2.654027</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="85">
+    <fit model="linear">
+      <param name="slope">-0.0020074123</param>
+      <param name="intercept">2.6488006</param>
+      <regression-coeff>0.9999892</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="86">
+    <fit model="linear">
+      <param name="slope">-0.002006212</param>
+      <param name="intercept">2.643205</param>
+      <regression-coeff>0.99998933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="87">
+    <fit model="linear">
+      <param name="slope">-0.0020059156</param>
+      <param name="intercept">2.6419914</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="88">
+    <fit model="linear">
+      <param name="slope">-0.0020104137</param>
+      <param name="intercept">2.6653764</param>
+      <regression-coeff>0.9999869</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="89">
+    <fit model="linear">
+      <param name="slope">-0.0020059163</param>
+      <param name="intercept">2.6439981</param>
+      <regression-coeff>0.9999906</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="90">
+    <fit model="linear">
+      <param name="slope">-0.0020020267</param>
+      <param name="intercept">2.648609</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="91">
+    <fit model="linear">
+      <param name="slope">-0.002005903</param>
+      <param name="intercept">2.6452692</param>
+      <regression-coeff>0.999984</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="92">
+    <fit model="linear">
+      <param name="slope">-0.0020074123</param>
+      <param name="intercept">2.652815</param>
+      <regression-coeff>0.9999892</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="93">
+    <fit model="linear">
+      <param name="slope">-0.00200502</param>
+      <param name="intercept">2.6542077</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="94">
+    <fit model="linear">
+      <param name="slope">-0.0020146351</param>
+      <param name="intercept">2.6555898</param>
+      <regression-coeff>0.99998635</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="95">
+    <fit model="linear">
+      <param name="slope">-0.002017367</param>
+      <param name="intercept">2.679632</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="96">
+    <fit model="linear">
+      <param name="slope">-0.0019987393</param>
+      <param name="intercept">2.6194668</param>
+      <regression-coeff>0.9999852</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="97">
+    <fit model="linear">
+      <param name="slope">-0.0020065203</param>
+      <param name="intercept">2.6522684</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="98">
+    <fit model="linear">
+      <param name="slope">-0.0020058958</param>
+      <param name="intercept">2.6408887</param>
+      <regression-coeff>0.99998045</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="99">
+    <fit model="linear">
+      <param name="slope">-0.0020047242</param>
+      <param name="intercept">2.6713986</param>
+      <regression-coeff>0.999993</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="100">
+    <fit model="linear">
+      <param name="slope">-0.0020125278</param>
+      <param name="intercept">2.6558251</param>
+      <regression-coeff>0.99998945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="101">
+    <fit model="linear">
+      <param name="slope">-0.0020017298</param>
+      <param name="intercept">2.6443024</param>
+      <regression-coeff>0.99999124</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="102">
+    <fit model="linear">
+      <param name="slope">-0.0020101012</param>
+      <param name="intercept">2.6632361</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="103">
+    <fit model="linear">
+      <param name="slope">-0.002002328</param>
+      <param name="intercept">2.6356268</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="104">
+    <fit model="linear">
+      <param name="slope">-0.0020062102</param>
+      <param name="intercept">2.6459413</param>
+      <regression-coeff>0.99998754</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="105">
+    <fit model="linear">
+      <param name="slope">-0.0020110193</param>
+      <param name="intercept">2.6327202</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="106">
+    <fit model="linear">
+      <param name="slope">-0.0020005433</param>
+      <param name="intercept">2.644548</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="107">
+    <fit model="linear">
+      <param name="slope">-0.002002616</param>
+      <param name="intercept">2.649578</param>
+      <regression-coeff>0.9999862</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="108">
+    <fit model="linear">
+      <param name="slope">-0.0020055978</param>
+      <param name="intercept">2.6469676</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="109">
+    <fit model="linear">
+      <param name="slope">-0.0020086225</param>
+      <param name="intercept">2.657511</param>
+      <regression-coeff>0.99999416</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="110">
+    <fit model="linear">
+      <param name="slope">-0.0020005344</param>
+      <param name="intercept">2.637997</param>
+      <regression-coeff>0.9999895</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="111">
+    <fit model="linear">
+      <param name="slope">-0.0020014227</param>
+      <param name="intercept">2.6432686</param>
+      <regression-coeff>0.99998605</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="112">
+    <fit model="linear">
+      <param name="slope">-0.0020113133</param>
+      <param name="intercept">2.654962</param>
+      <regression-coeff>0.9999847</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="113">
+    <fit model="linear">
+      <param name="slope">-0.0020068074</param>
+      <param name="intercept">2.6487381</param>
+      <regression-coeff>0.9999862</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="114">
+    <fit model="linear">
+      <param name="slope">-0.002009199</param>
+      <param name="intercept">2.6482513</param>
+      <regression-coeff>0.99998087</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="115">
+    <fit model="linear">
+      <param name="slope">-0.0020074095</param>
+      <param name="intercept">2.6522682</param>
+      <regression-coeff>0.9999869</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="116">
+    <fit model="linear">
+      <param name="slope">-0.0020095163</param>
+      <param name="intercept">2.6312077</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="117">
+    <fit model="linear">
+      <param name="slope">-0.0020032169</param>
+      <param name="intercept">2.6399906</param>
+      <regression-coeff>0.9999876</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="118">
+    <fit model="linear">
+      <param name="slope">-0.0020061957</param>
+      <param name="intercept">2.66782</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="119">
+    <fit model="linear">
+      <param name="slope">-0.0020068127</param>
+      <param name="intercept">2.6502</param>
+      <regression-coeff>0.9999888</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="120">
+    <fit model="linear">
+      <param name="slope">-0.0020086206</param>
+      <param name="intercept">2.631399</param>
+      <regression-coeff>0.9999924</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="121">
+    <fit model="linear">
+      <param name="slope">-0.0020071114</param>
+      <param name="intercept">2.6426573</param>
+      <regression-coeff>0.9999889</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="122">
+    <fit model="linear">
+      <param name="slope">-0.0020050209</param>
+      <param name="intercept">2.6312406</param>
+      <regression-coeff>0.9999925</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="123">
+    <fit model="linear">
+      <param name="slope">-0.0020182792</param>
+      <param name="intercept">2.662402</param>
+      <regression-coeff>0.999991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="124">
+    <fit model="linear">
+      <param name="slope">-0.0020062146</param>
+      <param name="intercept">2.6546974</param>
+      <regression-coeff>0.99998975</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="125">
+    <fit model="linear">
+      <param name="slope">-0.002008016</param>
+      <param name="intercept">2.651238</param>
+      <regression-coeff>0.9999906</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="126">
+    <fit model="linear">
+      <param name="slope">-0.002003829</param>
+      <param name="intercept">2.642788</param>
+      <regression-coeff>0.9999945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="127">
+    <fit model="linear">
+      <param name="slope">-0.0019784304</param>
+      <param name="intercept">2.6263835</param>
+      <regression-coeff>0.9999914</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="0">
+    <fit model="linear">
+      <param name="slope">-0.0019633817</param>
+      <param name="intercept">2.6863751</param>
+      <regression-coeff>0.99998796</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="1">
+    <fit model="linear">
+      <param name="slope">-0.0019642273</param>
+      <param name="intercept">2.671566</param>
+      <regression-coeff>0.9999795</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="2">
+    <fit model="linear">
+      <param name="slope">-0.0019700152</param>
+      <param name="intercept">2.645029</param>
+      <regression-coeff>0.99999225</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="3">
+    <fit model="linear">
+      <param name="slope">-0.0019880969</param>
+      <param name="intercept">2.6763573</param>
+      <regression-coeff>0.99999124</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="4">
+    <fit model="linear">
+      <param name="slope">-0.0019871893</param>
+      <param name="intercept">2.6738029</param>
+      <regression-coeff>0.9999781</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="5">
+    <fit model="linear">
+      <param name="slope">-0.0019872016</param>
+      <param name="intercept">2.6624277</param>
+      <regression-coeff>0.9999843</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="6">
+    <fit model="linear">
+      <param name="slope">-0.0019831103</param>
+      <param name="intercept">2.644852</param>
+      <regression-coeff>0.999993</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="7">
+    <fit model="linear">
+      <param name="slope">-0.0019845457</param>
+      <param name="intercept">2.6605945</param>
+      <regression-coeff>0.99997896</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="8">
+    <fit model="linear">
+      <param name="slope">-0.0019895663</param>
+      <param name="intercept">2.6637783</param>
+      <regression-coeff>0.99998975</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="9">
+    <fit model="linear">
+      <param name="slope">-0.0019892857</param>
+      <param name="intercept">2.6511838</param>
+      <regression-coeff>0.9999962</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="10">
+    <fit model="linear">
+      <param name="slope">-0.001978703</param>
+      <param name="intercept">2.6371064</param>
+      <regression-coeff>0.9999817</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="11">
+    <fit model="linear">
+      <param name="slope">-0.0019842829</param>
+      <param name="intercept">2.6599433</param>
+      <regression-coeff>0.99999356</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="12">
+    <fit model="linear">
+      <param name="slope">-0.0019839965</param>
+      <param name="intercept">2.6563973</param>
+      <regression-coeff>0.999997</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="13">
+    <fit model="linear">
+      <param name="slope">-0.0019869127</param>
+      <param name="intercept">2.6581519</param>
+      <regression-coeff>0.999987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="14">
+    <fit model="linear">
+      <param name="slope">-0.0019772742</param>
+      <param name="intercept">2.642097</param>
+      <regression-coeff>0.9999955</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="15">
+    <fit model="linear">
+      <param name="slope">-0.0019860524</param>
+      <param name="intercept">2.6641133</param>
+      <regression-coeff>0.9999981</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="16">
+    <fit model="linear">
+      <param name="slope">-0.0019880733</param>
+      <param name="intercept">2.6685765</param>
+      <regression-coeff>0.99997854</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="17">
+    <fit model="linear">
+      <param name="slope">-0.0019916315</param>
+      <param name="intercept">2.6715236</param>
+      <regression-coeff>0.9999888</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="18">
+    <fit model="linear">
+      <param name="slope">-0.0019813501</param>
+      <param name="intercept">2.646109</param>
+      <regression-coeff>0.9999913</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="19">
+    <fit model="linear">
+      <param name="slope">-0.0019886682</param>
+      <param name="intercept">2.6579788</param>
+      <regression-coeff>0.9999821</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="20">
+    <fit model="linear">
+      <param name="slope">-0.001986313</param>
+      <param name="intercept">2.6521232</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="21">
+    <fit model="linear">
+      <param name="slope">-0.0019895567</param>
+      <param name="intercept">2.6632314</param>
+      <regression-coeff>0.99998415</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="22">
+    <fit model="linear">
+      <param name="slope">-0.0019860533</param>
+      <param name="intercept">2.6659195</param>
+      <regression-coeff>0.9999985</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="23">
+    <fit model="linear">
+      <param name="slope">-0.0019863113</param>
+      <param name="intercept">2.6571784</param>
+      <regression-coeff>0.99998045</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="24">
+    <fit model="linear">
+      <param name="slope">-0.001990458</param>
+      <param name="intercept">2.6589036</param>
+      <regression-coeff>0.9999929</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="25">
+    <fit model="linear">
+      <param name="slope">-0.0019895758</param>
+      <param name="intercept">2.6596227</param>
+      <regression-coeff>0.9999946</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="26">
+    <fit model="linear">
+      <param name="slope">-0.0019892768</param>
+      <param name="intercept">2.652626</param>
+      <regression-coeff>0.9999918</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="27">
+    <fit model="linear">
+      <param name="slope">-0.00199193</param>
+      <param name="intercept">2.664587</param>
+      <regression-coeff>0.99999017</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="28">
+    <fit model="linear">
+      <param name="slope">-0.0019895618</param>
+      <param name="intercept">2.6610634</param>
+      <regression-coeff>0.99998754</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="29">
+    <fit model="linear">
+      <param name="slope">-0.001988083</param>
+      <param name="intercept">2.655386</param>
+      <regression-coeff>0.99998415</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="30">
+    <fit model="linear">
+      <param name="slope">-0.0019845762</param>
+      <param name="intercept">2.64437</param>
+      <regression-coeff>0.9999944</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="31">
+    <fit model="linear">
+      <param name="slope">-0.0019910487</param>
+      <param name="intercept">2.668924</param>
+      <regression-coeff>0.9999929</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="32">
+    <fit model="linear">
+      <param name="slope">-0.001982203</param>
+      <param name="intercept">2.6621382</param>
+      <regression-coeff>0.9999786</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="33">
+    <fit model="linear">
+      <param name="slope">-0.0019848524</param>
+      <param name="intercept">2.6392503</param>
+      <regression-coeff>0.9999847</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="34">
+    <fit model="linear">
+      <param name="slope">-0.0019878007</param>
+      <param name="intercept">2.6601486</param>
+      <regression-coeff>0.99999034</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="35">
+    <fit model="linear">
+      <param name="slope">-0.0019969346</param>
+      <param name="intercept">2.6683154</param>
+      <regression-coeff>0.9999743</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="36">
+    <fit model="linear">
+      <param name="slope">-0.0019874957</param>
+      <param name="intercept">2.6495419</param>
+      <regression-coeff>0.99998426</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="37">
+    <fit model="linear">
+      <param name="slope">-0.0019904335</param>
+      <param name="intercept">2.6485794</param>
+      <regression-coeff>0.9999806</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="38">
+    <fit model="linear">
+      <param name="slope">-0.0019831043</param>
+      <param name="intercept">2.6486342</param>
+      <regression-coeff>0.9999908</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="39">
+    <fit model="linear">
+      <param name="slope">-0.0019875027</param>
+      <param name="intercept">2.6645403</param>
+      <regression-coeff>0.99998856</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="40">
+    <fit model="linear">
+      <param name="slope">-0.0019954513</param>
+      <param name="intercept">2.6475558</param>
+      <regression-coeff>0.99997514</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="41">
+    <fit model="linear">
+      <param name="slope">-0.0019916429</param>
+      <param name="intercept">2.6751494</param>
+      <regression-coeff>0.9999945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="42">
+    <fit model="linear">
+      <param name="slope">-0.0019898734</param>
+      <param name="intercept">2.6590228</param>
+      <regression-coeff>0.99999493</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="43">
+    <fit model="linear">
+      <param name="slope">-0.0019928233</param>
+      <param name="intercept">2.6600688</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="44">
+    <fit model="linear">
+      <param name="slope">-0.0019872207</param>
+      <param name="intercept">2.6405764</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="45">
+    <fit model="linear">
+      <param name="slope">-0.0019860421</param>
+      <param name="intercept">2.6581497</param>
+      <regression-coeff>0.9999929</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="46">
+    <fit model="linear">
+      <param name="slope">-0.0019839923</param>
+      <param name="intercept">2.662167</param>
+      <regression-coeff>0.99999505</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="47">
+    <fit model="linear">
+      <param name="slope">-0.0019931183</param>
+      <param name="intercept">2.6565685</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="48">
+    <fit model="linear">
+      <param name="slope">-0.001992228</param>
+      <param name="intercept">2.6638052</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="49">
+    <fit model="linear">
+      <param name="slope">-0.0019883951</param>
+      <param name="intercept">2.6486475</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="50">
+    <fit model="linear">
+      <param name="slope">-0.001989868</param>
+      <param name="intercept">2.6481667</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="51">
+    <fit model="linear">
+      <param name="slope">-0.001989869</param>
+      <param name="intercept">2.6588404</param>
+      <regression-coeff>0.9999927</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="52">
+    <fit model="linear">
+      <param name="slope">-0.0019875166</param>
+      <param name="intercept">2.6634626</param>
+      <regression-coeff>0.9999955</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="53">
+    <fit model="linear">
+      <param name="slope">-0.0019863374</param>
+      <param name="intercept">2.6597185</param>
+      <regression-coeff>0.99999356</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="54">
+    <fit model="linear">
+      <param name="slope">-0.0019881038</param>
+      <param name="intercept">2.6476228</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="55">
+    <fit model="linear">
+      <param name="slope">-0.0019813552</param>
+      <param name="intercept">2.637827</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="56">
+    <fit model="linear">
+      <param name="slope">-0.0019875115</param>
+      <param name="intercept">2.642501</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="57">
+    <fit model="linear">
+      <param name="slope">-0.001988389</param>
+      <param name="intercept">2.6444871</param>
+      <regression-coeff>0.9999891</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="58">
+    <fit model="linear">
+      <param name="slope">-0.0019898734</param>
+      <param name="intercept">2.6431034</param>
+      <regression-coeff>0.99999493</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="59">
+    <fit model="linear">
+      <param name="slope">-0.0019919327</param>
+      <param name="intercept">2.6542659</param>
+      <regression-coeff>0.99999154</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="60">
+    <fit model="linear">
+      <param name="slope">-0.001986332</param>
+      <param name="intercept">2.6640494</param>
+      <regression-coeff>0.9999908</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="61">
+    <fit model="linear">
+      <param name="slope">-0.0019916445</param>
+      <param name="intercept">2.647266</param>
+      <regression-coeff>0.9999962</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="62">
+    <fit model="linear">
+      <param name="slope">-0.001989868</param>
+      <param name="intercept">2.644187</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="63">
+    <fit model="linear">
+      <param name="slope">-0.0019875115</param>
+      <param name="intercept">2.6584005</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="64">
+    <fit model="linear">
+      <param name="slope">-0.0019895697</param>
+      <param name="intercept">2.6384583</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="65">
+    <fit model="linear">
+      <param name="slope">-0.0019934168</param>
+      <param name="intercept">2.6590476</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="66">
+    <fit model="linear">
+      <param name="slope">-0.0019954883</param>
+      <param name="intercept">2.6637173</param>
+      <regression-coeff>0.9999937</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="67">
+    <fit model="linear">
+      <param name="slope">-0.001990149</param>
+      <param name="intercept">2.6300087</param>
+      <regression-coeff>0.99998605</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="68">
+    <fit model="linear">
+      <param name="slope">-0.001990162</param>
+      <param name="intercept">2.6310995</param>
+      <regression-coeff>0.9999926</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="69">
+    <fit model="linear">
+      <param name="slope">-0.001989868</param>
+      <param name="intercept">2.6342375</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="70">
+    <fit model="linear">
+      <param name="slope">-0.0019877953</param>
+      <param name="intercept">2.6484008</param>
+      <regression-coeff>0.99998677</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="71">
+    <fit model="linear">
+      <param name="slope">-0.0019872207</param>
+      <param name="intercept">2.6405764</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="72">
+    <fit model="linear">
+      <param name="slope">-0.0019904615</param>
+      <param name="intercept">2.6451545</param>
+      <regression-coeff>0.99999386</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="73">
+    <fit model="linear">
+      <param name="slope">-0.0019910296</param>
+      <param name="intercept">2.6689157</param>
+      <regression-coeff>0.9999834</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="74">
+    <fit model="linear">
+      <param name="slope">-0.0019910426</param>
+      <param name="intercept">2.6535366</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="75">
+    <fit model="linear">
+      <param name="slope">-0.0019916384</param>
+      <param name="intercept">2.6642838</param>
+      <regression-coeff>0.99999225</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="76">
+    <fit model="linear">
+      <param name="slope">-0.0019889441</param>
+      <param name="intercept">2.641459</param>
+      <regression-coeff>0.9999727</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="77">
+    <fit model="linear">
+      <param name="slope">-0.0019933905</param>
+      <param name="intercept">2.6304042</param>
+      <regression-coeff>0.99998146</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="78">
+    <fit model="linear">
+      <param name="slope">-0.00198869</param>
+      <param name="intercept">2.6502132</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="79">
+    <fit model="linear">
+      <param name="slope">-0.001988988</param>
+      <param name="intercept">2.6620903</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="80">
+    <fit model="linear">
+      <param name="slope">-0.0019966755</param>
+      <param name="intercept">2.6604002</param>
+      <regression-coeff>0.9999933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="81">
+    <fit model="linear">
+      <param name="slope">-0.0019913383</param>
+      <param name="intercept">2.654925</param>
+      <regression-coeff>0.9999899</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="82">
+    <fit model="linear">
+      <param name="slope">-0.0019937</param>
+      <param name="intercept">2.6495593</param>
+      <regression-coeff>0.99998814</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="83">
+    <fit model="linear">
+      <param name="slope">-0.0019857564</param>
+      <param name="intercept">2.635827</param>
+      <regression-coeff>0.999997</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="84">
+    <fit model="linear">
+      <param name="slope">-0.0019916429</param>
+      <param name="intercept">2.6552327</param>
+      <regression-coeff>0.9999945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="85">
+    <fit model="linear">
+      <param name="slope">-0.001997563</param>
+      <param name="intercept">2.6518712</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="86">
+    <fit model="linear">
+      <param name="slope">-0.0019925304</param>
+      <param name="intercept">2.6440065</param>
+      <regression-coeff>0.99999547</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="87">
+    <fit model="linear">
+      <param name="slope">-0.0019940138</param>
+      <param name="intercept">2.6438875</param>
+      <regression-coeff>0.99999696</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="88">
+    <fit model="linear">
+      <param name="slope">-0.0019969505</param>
+      <param name="intercept">2.667959</param>
+      <regression-coeff>0.99998224</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="89">
+    <fit model="linear">
+      <param name="slope">-0.0019910522</param>
+      <param name="intercept">2.643223</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="90">
+    <fit model="linear">
+      <param name="slope">-0.0019886917</param>
+      <param name="intercept">2.6494918</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="91">
+    <fit model="linear">
+      <param name="slope">-0.0019939865</param>
+      <param name="intercept">2.6465945</param>
+      <regression-coeff>0.9999833</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="92">
+    <fit model="linear">
+      <param name="slope">-0.0019951921</param>
+      <param name="intercept">2.6537993</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="93">
+    <fit model="linear">
+      <param name="slope">-0.0019922236</param>
+      <param name="intercept">2.6540232</param>
+      <regression-coeff>0.9999899</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="94">
+    <fit model="linear">
+      <param name="slope">-0.002005298</param>
+      <param name="intercept">2.6576018</param>
+      <regression-coeff>0.99998116</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="95">
+    <fit model="linear">
+      <param name="slope">-0.002001429</param>
+      <param name="intercept">2.6802056</param>
+      <regression-coeff>0.9999892</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="96">
+    <fit model="linear">
+      <param name="slope">-0.0019842517</param>
+      <param name="intercept">2.6186225</param>
+      <regression-coeff>0.99997777</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="97">
+    <fit model="linear">
+      <param name="slope">-0.0019936655</param>
+      <param name="intercept">2.653894</param>
+      <regression-coeff>0.9999716</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="98">
+    <fit model="linear">
+      <param name="slope">-0.001990169</param>
+      <param name="intercept">2.6405113</param>
+      <regression-coeff>0.99999523</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="99">
+    <fit model="linear">
+      <param name="slope">-0.0019901393</param>
+      <param name="intercept">2.672159</param>
+      <regression-coeff>0.99998116</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="100">
+    <fit model="linear">
+      <param name="slope">-0.0019975756</param>
+      <param name="intercept">2.654599</param>
+      <regression-coeff>0.9999984</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="101">
+    <fit model="linear">
+      <param name="slope">-0.0019869215</param>
+      <param name="intercept">2.6444283</param>
+      <regression-coeff>0.9999914</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="102">
+    <fit model="linear">
+      <param name="slope">-0.0019981482</param>
+      <param name="intercept">2.6657348</param>
+      <regression-coeff>0.9999872</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="103">
+    <fit model="linear">
+      <param name="slope">-0.0019898645</param>
+      <param name="intercept">2.6358643</param>
+      <regression-coeff>0.99999046</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="104">
+    <fit model="linear">
+      <param name="slope">-0.0019922254</param>
+      <param name="intercept">2.6458747</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="105">
+    <fit model="linear">
+      <param name="slope">-0.001998426</param>
+      <param name="intercept">2.6349673</param>
+      <regression-coeff>0.99997723</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="106">
+    <fit model="linear">
+      <param name="slope">-0.0019931227</param>
+      <param name="intercept">2.647691</param>
+      <regression-coeff>0.9999948</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="107">
+    <fit model="linear">
+      <param name="slope">-0.001989868</param>
+      <param name="intercept">2.6481667</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="108">
+    <fit model="linear">
+      <param name="slope">-0.0019945928</param>
+      <param name="intercept">2.6477494</param>
+      <regression-coeff>0.9999909</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="109">
+    <fit model="linear">
+      <param name="slope">-0.0019966702</param>
+      <param name="intercept">2.6593096</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="110">
+    <fit model="linear">
+      <param name="slope">-0.0019910391</param>
+      <param name="intercept">2.639054</param>
+      <regression-coeff>0.99998814</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="111">
+    <fit model="linear">
+      <param name="slope">-0.0019863225</param>
+      <param name="intercept">2.6425579</param>
+      <regression-coeff>0.99998605</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="112">
+    <fit model="linear">
+      <param name="slope">-0.0019966755</param>
+      <param name="intercept">2.6547742</param>
+      <regression-coeff>0.9999933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="113">
+    <fit model="linear">
+      <param name="slope">-0.0019980979</param>
+      <param name="intercept">2.6513646</param>
+      <regression-coeff>0.99996203</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="114">
+    <fit model="linear">
+      <param name="slope">-0.001994571</param>
+      <param name="intercept">2.6470156</param>
+      <regression-coeff>0.9999791</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="115">
+    <fit model="linear">
+      <param name="slope">-0.0019963705</param>
+      <param name="intercept">2.6537387</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="116">
+    <fit model="linear">
+      <param name="slope">-0.0019987596</param>
+      <param name="intercept">2.632738</param>
+      <regression-coeff>0.9999962</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="117">
+    <fit model="linear">
+      <param name="slope">-0.0019901576</param>
+      <param name="intercept">2.6408677</param>
+      <regression-coeff>0.99999034</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="118">
+    <fit model="linear">
+      <param name="slope">-0.0019951789</param>
+      <param name="intercept">2.6672165</param>
+      <regression-coeff>0.99998647</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="119">
+    <fit model="linear">
+      <param name="slope">-0.0019919344</param>
+      <param name="intercept">2.6491957</param>
+      <regression-coeff>0.9999932</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="120">
+    <fit model="linear">
+      <param name="slope">-0.0019972683</param>
+      <param name="intercept">2.6330483</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="121">
+    <fit model="linear">
+      <param name="slope">-0.0019972718</param>
+      <param name="intercept">2.6423104</param>
+      <regression-coeff>0.9999943</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="122">
+    <fit model="linear">
+      <param name="slope">-0.0019928173</param>
+      <param name="intercept">2.6299937</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="123">
+    <fit model="linear">
+      <param name="slope">-0.0020047268</param>
+      <param name="intercept">2.6613758</param>
+      <regression-coeff>0.99999523</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="124">
+    <fit model="linear">
+      <param name="slope">-0.001993705</param>
+      <param name="intercept">2.6560867</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="125">
+    <fit model="linear">
+      <param name="slope">-0.0019933959</param>
+      <param name="intercept">2.6505213</param>
+      <regression-coeff>0.99998415</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="126">
+    <fit model="linear">
+      <param name="slope">-0.0019916375</param>
+      <param name="intercept">2.6425567</param>
+      <regression-coeff>0.99999183</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="127">
+    <fit model="linear">
+      <param name="slope">-0.0019702925</param>
+      <param name="intercept">2.62562</param>
+      <regression-coeff>0.99998623</regression-coeff>
+    </fit>
+  </atwd>
+  <fadc parname="pedestal" value="6208"/>
+  <fadc parname="gain" value="2176"/>
+  <amplifier channel="0">
+    <gain error="0.0081545245">-16.683222</gain>
+  </amplifier>
+  <amplifier channel="1">
+    <gain error="0.0013284996">-2.308496</gain>
+  </amplifier>
+  <amplifier channel="2">
+    <gain error="3.021913E-4">-0.129257</gain>
+  </amplifier>
+  <atwdfreq chip="0">
+    <fit model="linear">
+      <param name="slope">0.011939764</param>
+      <param name="intercept">4.0535746</param>
+      <regression-coeff>0.9979043</regression-coeff>
+    </fit>
+  </atwdfreq>
+  <atwdfreq chip="1">
+    <fit model="linear">
+      <param name="slope">0.011952878</param>
+      <param name="intercept">3.872122</param>
+      <regression-coeff>0.99882513</regression-coeff>
+    </fit>
+  </atwdfreq>
+</domcal>
Index: dom-cal/src/icecube/daq/domcal/Baseline.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/Baseline.java:1.1
--- /dev/null	Thu Oct  6 09:02:10 2005
+++ dom-cal/src/icecube/daq/domcal/Baseline.java	Tue Mar 29 13:13:27 2005
@@ -0,0 +1,55 @@
+/*************************************************  120 columns wide   ************************************************
+
+ Class:  	Baseline
+
+ @author 	Jim Braun
+ @author     jbraun@amanda.wisc.edu
+
+ ICECUBE Project
+ University of Wisconsin - Madison
+
+ **********************************************************************************************************************/
+
+package icecube.daq.domcal;
+
+import java.nio.ByteBuffer;
+
+public class Baseline {
+
+    private short voltage;
+    private float[][] baseVals;
+
+    public static Baseline parseHvBaseline(ByteBuffer bb) {
+        short voltage = bb.getShort();
+        float[][] baseVals = parse(bb);
+        return new Baseline(voltage, baseVals);
+    }
+
+    public static Baseline parseBaseline(ByteBuffer bb) {
+        short voltage = 0;
+        float[][] baseVals = parse(bb);
+        return new Baseline(voltage, baseVals);
+    }
+
+    private static float[][] parse(ByteBuffer bb) {
+        float[][] vals = new float[2][3];
+        for (int i = 0; i < 2; i++) {
+            for (int j = 0; j < 3; j++) vals[i][j] = bb.getFloat();
+        }
+        return vals;
+    }
+
+    public Baseline(short voltage, float[][] baseVals) {
+        this.voltage = voltage;
+        this.baseVals = baseVals;
+    }
+
+    public short getVoltage() {
+        return voltage;
+    }
+
+    public float getBaseline(int atwd, int ch) {
+        if (atwd > 1 || atwd < 0 || ch < 0 || ch > 2) throw new IndexOutOfBoundsException("" + atwd + " " + ch);
+        return baseVals[atwd][ch];
+    } 
+}
Index: dom-cal/src/icecube/daq/domcal/CalibratorComparator.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/CalibratorComparator.java:1.2
--- /dev/null	Thu Oct  6 09:02:10 2005
+++ dom-cal/src/icecube/daq/domcal/CalibratorComparator.java	Mon Jan 10 14:18:16 2005
@@ -0,0 +1,990 @@
+package icecube.daq.domcal;
+
+import java.util.Calendar;
+import java.util.Comparator;
+import java.util.Iterator;
+
+/**
+ * Compare calibration data.
+ */
+public class CalibratorComparator
+    implements Comparator
+{
+    /**
+     * Create calibration comparator.
+     */
+    CalibratorComparator()
+    {
+    }
+
+    /**
+     * Compare calibration data.
+     *
+     * @param o1 first object being compared
+     * @param o2 second object being compared
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    public int compare(Object o1, Object o2)
+    {
+        if (o1 == null) {
+            if (o2 == null) {
+                return 0;
+            }
+
+            return 1;
+        } else if (o2 == null) {
+            return -1;
+        }
+
+        if (!(o1 instanceof Calibrator) || !(o2 instanceof Calibrator)) {
+            return o1.getClass().getName().compareTo(o2.getClass().getName());
+        }
+
+        return compare((Calibrator) o1, (Calibrator) o2);
+    }
+
+    /**
+     * Compare calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    public static final int compare(Calibrator c1, Calibrator c2)
+    {
+        return compare(c1, c2, false);
+    }
+
+    /**
+     * Compare calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    public static final int compare(Calibrator c1, Calibrator c2,
+                                    boolean verbose)
+    {
+        int cmp = compareMain(c1, c2, verbose);
+        if (cmp == 0) {
+            cmp = compareADCs(c1, c2, verbose);
+            if (cmp == 0) {
+                cmp = compareDACs(c1, c2, verbose);
+                if (cmp == 0) {
+                    cmp = comparePulsers(c1, c2, verbose);
+                    if (cmp == 0) {
+                        cmp = compareATWDs(c1, c2, verbose);
+                        if (cmp == 0) {
+                            cmp = compareAmpGains(c1, c2, verbose);
+                            if (cmp == 0) {
+                                cmp = compareATWDFreqs(c1, c2, verbose);
+                                if (cmp == 0) {
+                                    cmp = compareHvGains(c1, c2, verbose);
+                                    if (cmp == 0) {
+                                        cmp = compareHvHistos(c1, c2, verbose);
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+
+        return cmp;
+    }
+
+    /**
+     * Compare ADC calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int compareADCs(Calibrator c1, Calibrator c2,
+                                   boolean verbose)
+    {
+        final int len = c1.getNumberOfADCs();
+        if (len != c2.getNumberOfADCs()) {
+            if (verbose) {
+                System.err.println("ADC length mismatch (" + len + " != " +
+                                   c2.getNumberOfADCs() + ")");
+            }
+            return len - c2.getNumberOfADCs();
+        }
+
+        for (int i = 0; i < len; i++) {
+            if (c1.getADC(i) != c2.getADC(i)) {
+                if (verbose) {
+                    System.err.println("ADC#" + i + " mismatch (" +
+                                       c1.getADC(i) + " != " + c2.getADC(i) +
+                                       ")");
+                }
+                return c1.getADC(i) - c2.getADC(i);
+            }
+        }
+
+        return 0;
+    }
+
+    /**
+     * Compare ATWD frequency calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int compareATWDFreqs(Calibrator c1, Calibrator c2,
+                                        boolean verbose)
+    {
+        final int numChips = c1.getNumberOfATWDFrequencyChips();
+        if (numChips != c2.getNumberOfATWDFrequencyChips()) {
+            if (verbose) {
+                System.err.println("ATWD frequency chip mismatch (" +
+                                   numChips + " != " +
+                                   c2.getNumberOfATWDFrequencyChips() + ")");
+            }
+            return numChips - c2.getNumberOfATWDFrequencyChips();
+        }
+
+        for (int ch = 0; ch < numChips; ch++) {
+            final String model = c1.getATWDFrequencyFitModel(ch);
+            if (!model.equals(c2.getATWDFrequencyFitModel(ch))) {
+                if (verbose) {
+                    System.err.println("ATWD chip#" + ch +
+                                       " model mismatch (" + model + " != " +
+                                       c2.getATWDFrequencyFitModel(ch) + ")");
+                }
+                return model.compareTo(c2.getATWDFrequencyFitModel(ch));
+            }
+
+            Iterator i1 = c1.getATWDFrequencyFitKeys(ch);
+            Iterator i2 = c2.getATWDFrequencyFitKeys(ch);
+
+            int num = 0;
+            while (i1.hasNext()) {
+                if (!i2.hasNext()) {
+                    if (verbose) {
+                        int num1 = num;
+                        while (i1.hasNext()) {
+                            num1++;
+                            i1.next();
+                        }
+
+                        System.err.println("ATWD chip#" + ch +
+                                           " entry length mismatch (" + num1 +
+                                           " != " + num + ")");
+                    }
+                    return -1;
+                }
+
+                final String p1 = (String) i1.next();
+                final String p2 = (String) i2.next();
+                if (!p1.equals(p2)) {
+                    if (verbose) {
+                        System.err.println("ATWD chip#" + ch + " parameter#" +
+                                           num + " mismatch (" + p1 + " != " +
+                                           p2 + ")");
+                    }
+                    return p1.compareTo(p2);
+                }
+
+                if (p1.equals("model")) {
+                    continue;
+                }
+
+                final double v1 = c1.getATWDFrequencyFitParam(ch, p1);
+                final double v2 = c1.getATWDFrequencyFitParam(ch, p2);
+                final double delta = 0.00000001;
+                if (v1 < v2 - delta || v1 > v2 + delta) {
+                    if (verbose) {
+                        System.err.println("ATWD chip#" + ch + " parameter " +
+                                           p1 + " mismatch (" + v1 +
+                                           " != " + v2 + ")");
+                    }
+                    return (int) (v1 < v2 - delta ? 1 : -1);
+                }
+
+                num++;
+            }
+
+            if (i2.hasNext()) {
+                if (verbose) {
+                    int num2 = num;
+                    while (i2.hasNext()) {
+                        num2++;
+                        i2.next();
+                    }
+
+                    System.err.println("ATWD chip#" + ch +
+                                       " entry length mismatch (" + num +
+                                       " != " + num2 + ")");
+                }
+                return 1;
+            }
+        }
+
+        return 0;
+    }
+
+    /**
+     * Compare ATWD calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int compareATWDs(Calibrator c1, Calibrator c2,
+                                    boolean verbose)
+    {
+        final int numChan = c1.getNumberOfATWDChannels();
+        if (numChan != c2.getNumberOfATWDChannels()) {
+            if (verbose) {
+                System.err.println("ATWD channel mismatch (" + numChan +
+                                   " != " + c2.getNumberOfATWDChannels() +
+                                   ")");
+            }
+            return numChan - c2.getNumberOfATWDChannels();
+        }
+
+        for (int ch = 0; ch < numChan; ch++) {
+            if (ch == 3 || ch == 7) {
+                // channels 3 and 7 do not exist
+                continue;
+            }
+
+            final int numBin = c1.getNumberOfATWDBins(ch);
+            if (numBin != c2.getNumberOfATWDBins(ch)) {
+                if (verbose) {
+                    System.err.println("ATWD channel#" + ch +
+                                       " bin mismatch (" + numBin +
+                                       " != " + c2.getNumberOfATWDBins(ch) +
+                                       ")");
+                }
+                return numBin - c2.getNumberOfATWDBins(ch);
+            }
+
+            for (int bin = 0; bin < numBin; bin++) {
+                final String model = c1.getATWDFitModel(ch, bin);
+                if (!model.equals(c2.getATWDFitModel(ch, bin))) {
+                    if (verbose) {
+                        System.err.println("ATWD model mismatch (" + model +
+                                           " != " +
+                                           c2.getATWDFitModel(ch, bin) + ")");
+                    }
+                    return model.compareTo(c2.getATWDFitModel(ch, bin));
+                }
+
+                Iterator i1 = c1.getATWDFitKeys(ch, bin);
+                Iterator i2 = c2.getATWDFitKeys(ch, bin);
+
+                int num = 0;
+                while (i1.hasNext()) {
+                    if (!i2.hasNext()) {
+                        if (verbose) {
+                            int num1 = num;
+                            while (i1.hasNext()) {
+                                num1++;
+                                i1.next();
+                            }
+
+                            System.err.println("ATWD channel#" + ch + " bin#" +
+                                               bin +
+                                               " entry length mismatch (" +
+                                               num1 + " != " + num + ")");
+                        }
+                        return -1;
+                    }
+
+                    final String p1 = (String) i1.next();
+                    final String p2 = (String) i2.next();
+                    if (!p1.equals(p2)) {
+                        if (verbose) {
+                            System.err.println("ATWD channel#" + ch +
+                                               " bin#" + bin + " parameter#" +
+                                               num +
+                                               " mismatch (" + p1 + " != " +
+                                               p2 + ")");
+                        }
+                        return p1.compareTo(p2);
+                    }
+
+                    if (p1.equals("model")) {
+                        continue;
+                    }
+
+                    final double v1 = c1.getATWDFitParam(ch, bin, p1);
+                    final double v2 = c1.getATWDFitParam(ch, bin, p2);
+                    final double delta = 0.00000001;
+                    if (v1 < v2 - delta || v1 > v2 + delta) {
+                        if (verbose) {
+                            System.err.println("ATWD channel#" + ch +
+                                               " bin#" + bin + " parameter " +
+                                               p1 + " mismatch (" + v1 +
+                                               " != " + v2 + ")");
+                        }
+                        return (int) (v1 < v2 - delta ? 1 : -1);
+                    }
+
+                    num++;
+                }
+
+                if (i2.hasNext()) {
+                    if (verbose) {
+                        int num2 = num;
+                        while (i2.hasNext()) {
+                            num2++;
+                            i2.next();
+                        }
+
+                        System.err.println("ATWD channel#" + ch + " bin#" +
+                                           bin +
+                                           " entry length mismatch (" +
+                                           num + " != " + num2 + ")");
+                    }
+                    return 1;
+                }
+            }
+        }
+
+        return 0;
+    }
+
+    /**
+     * Compare amplifier gain calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int compareAmpGains(Calibrator c1, Calibrator c2,
+                                       boolean verbose)
+    {
+        final int len = c1.getNumberOfAmplifierGainChannels();
+        if (len != c2.getNumberOfAmplifierGainChannels()) {
+            if (verbose) {
+                System.err.println("Amplifier gain length mismatch (" + len +
+                                   " != " +
+                                   c2.getNumberOfAmplifierGainChannels() +
+                                   ")");
+            }
+            return len - c2.getNumberOfAmplifierGainChannels();
+        }
+
+        for (int i = 0; i < len; i++) {
+            final double delta = 0.00000001;
+
+            final double g1 = c1.getAmplifierGain(i);
+            final double g2 = c2.getAmplifierGain(i);
+            if (g1 < g2 - delta || g1 > g2 + delta) {
+                if (verbose) {
+                    System.err.println("Amplifier#" + i + " gain mismatch (" +
+                                       g1 + " != " + g2 + ")");
+                }
+                return (int) (g1 < g2 - delta ? 1 : -1);
+            }
+
+            final double e1 = c1.getAmplifierGainError(i);
+            final double e2 = c2.getAmplifierGainError(i);
+            if (e1 < e2 - delta || e1 > e2 + delta) {
+                if (verbose) {
+                    System.err.println("Amplifier#" + i + " error mismatch (" +
+                                       e1 + " != " + e2 + ")");
+                }
+                return (int) (e1 < e2 - delta ? 1 : -1);
+            }
+        }
+
+        return 0;
+    }
+
+    /**
+     * Compare DAC calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int compareDACs(Calibrator c1, Calibrator c2,
+                                   boolean verbose)
+    {
+        final int len = c1.getNumberOfDACs();
+        if (len != c2.getNumberOfDACs()) {
+            if (verbose) {
+                System.err.println("DAC length mismatch (" + len + " != " +
+                                   c2.getNumberOfDACs() + ")");
+            }
+            return len - c2.getNumberOfDACs();
+        }
+
+        for (int i = 0; i < len; i++) {
+            if (c1.getDAC(i) != c2.getDAC(i)) {
+                if (verbose) {
+                    System.err.println("DAC#" + i + " mismatch (" +
+                                       c1.getDAC(i) + " != " + c2.getDAC(i) +
+                                       ")");
+                }
+                return c1.getDAC(i) - c2.getDAC(i);
+            }
+        }
+
+        return 0;
+    }
+
+    /**
+     * Compare high-voltage histograms.
+     *
+     * @param h1 first histogram
+     * @param h2 second histogram
+     * @param num histogram index number
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int compareHisto(HVHistogram h1, HVHistogram h2, int num,
+                                    boolean verbose)
+    {
+        final short v1 = h1.getVoltage();
+        if (v1 != h2.getVoltage()) {
+            if (verbose) {
+                System.err.println("Histogram#" + num + " voltage mismatch (" +
+                                   v1 + " != " + h2.getVoltage() + ")");
+                                   
+            }
+            return (h2.getVoltage() - v1);
+        }
+
+        final boolean convergent = h1.isConvergent();
+        if (convergent != h2.isConvergent()) {
+            if (verbose) {
+                System.err.println("Histogram#" + num +
+                                   " convergence mismatch (" +
+                                   (convergent ? "" : "!") + "convergent != " +
+                                   (h2.isConvergent() ?"" : "!") +
+                                   "convergent)");
+            }
+            return (convergent ? -1 : 1);
+        }
+
+        final float delta = 0.00000001f;
+
+        final float p1 = h1.getPV();
+        final float p2 = h2.getPV();
+        if (p1 < p2 - delta || p1 > p2 + delta) {
+            if (verbose) {
+                System.err.println("Histogram#" + num + " PV mismatch (" + p1 +
+                                   " != " + p2 + ")");
+            }
+            return (p1 < p2 - delta ? 1 : -1);
+        }
+
+        final float n1 = h1.getNoiseRate();
+        final float n2 = h2.getNoiseRate();
+        if (n1 < n2 - delta || n1 > n2 + delta) {
+            if (verbose) {
+                System.err.println("Histogram#" + num +
+                                   " noise rate mismatch (" + n1 + " != " +
+                                   n2 + ")");
+            }
+            return (n1 < n2 - delta ? 1 : -1);
+        }
+
+        final boolean isFilled = h1.isFilled();
+        if (isFilled != h2.isFilled()) {
+            if (verbose) {
+                System.err.println("Histogram#" + num +
+                                   " isFilled mismatch (" +
+                                   (isFilled ? "" : "!") + "isFilled != " +
+                                   (h2.isFilled() ?"" : "!") + "isFilled)");
+            }
+            return (isFilled ? -1 : 1);
+        }
+
+        float[] hp1 = h1.getFitParams();
+        float[] hp2 = h2.getFitParams();
+
+        if (hp1 == null) {
+            if (hp2 != null) {
+                if (verbose) {
+                    System.err.println("Histogram#" + num +
+                                       " param array mismatch" +
+                                       " (null != float[" + hp2.length + "])");
+                }
+
+                return 1;
+            }
+
+            return 0;
+        } else if (hp2 == null) {
+            if (verbose) {
+                System.err.println("Histogram#" + num +
+                                   " param array mismatch (float[" +
+                                   hp1.length + "] != null)");
+            }
+
+            return -1;
+        } else if (hp1.length != hp2.length) {
+            if (verbose) {
+                System.err.println("Histogram#" + num +
+                                   " param array mismatch (float[" +
+                                   hp1.length + "] != float[" + hp2.length +
+                                   "])");
+            }
+
+            return (hp2.length - hp1.length);
+        }
+
+        for (int i = 0; i < hp1.length; i++) {
+            if (hp1[i] < hp2[i] - delta || hp1[i] > hp2[i] + delta) {
+                if (verbose) {
+                    System.err.println("Histogram#" + num + " \"" +
+                                       HVHistogram.getParameterName(i) +
+                                       "\" mismatch (" + hp1[i] + " != " +
+                                       hp2[i] + ")");
+                }
+                return (hp1[i] < hp2[i] - delta ? 1 : -1);
+            }
+        }
+
+        float[] x1 = h1.getXVals();
+        float[] x2 = h2.getXVals();
+
+        if (x1 == null) {
+            if (x2 != null) {
+                if (verbose) {
+                    System.err.println("Histogram#" + num +
+                                       " charge array mismatch" +
+                                       " (null != float[" + x2.length + "])");
+                }
+
+                return 1;
+            }
+
+            return 0;
+        } else if (x2 == null) {
+            if (verbose) {
+                System.err.println("Histogram#" + num +
+                                   " charge array mismatch (float[" +
+                                   x1.length + "] != null)");
+            }
+
+            return -1;
+        } else if (x1.length != x2.length) {
+            if (verbose) {
+                System.err.println("Histogram#" + num +
+                                   " charge array mismatch (float[" +
+                                   x1.length + "] != float[" + x2.length +
+                                   "])");
+            }
+
+            return (x2.length - x1.length);
+        }
+
+        float[] y1 = h1.getYVals();
+        float[] y2 = h2.getYVals();
+
+        if (y1 == null) {
+            if (y2 != null) {
+                if (verbose) {
+                    System.err.println("Histogram#" + num +
+                                       " count array mismatch" +
+                                       " (null != float[" + y2.length + "])");
+                }
+
+                return 1;
+            }
+
+            return 0;
+        } else if (y2 == null) {
+            if (verbose) {
+                System.err.println("Histogram#" + num +
+                                   " count array mismatch (float[" +
+                                   y1.length + "] != null)");
+            }
+
+            return -1;
+        } else if (y1.length != y2.length) {
+            if (verbose) {
+                System.err.println("Histogram#" + num +
+                                   " count array mismatch (float[" +
+                                   y1.length + "] != float[" + y2.length +
+                                   "])");
+            }
+
+            return (y2.length - y1.length);
+        }
+
+        for (int i = 0; i < x1.length; i++) {
+            if (x1[i] < x2[i] - delta || x1[i] > x2[i] + delta) {
+                if (verbose) {
+                    System.err.println("Histogram#" + num + " charge#" + i +
+                                       " mismatch (" + x1[i] + " != " + x2[i] +
+                                       ")");
+                }
+                return (x1[i] < x2[i] - delta ? 1 : -1);
+            }
+
+            if (y1[i] < y2[i] - delta || y1[i] > y2[i] + delta) {
+                if (verbose) {
+                    System.err.println("Histogram#" + num + " count#" + i +
+                                       " mismatch (" + y1[i] + " != " + y2[i] +
+                                       ")");
+                }
+                return (y1[i] < y2[i] - delta ? 1 : -1);
+            }
+        }
+
+        return 0;
+    }
+
+    /**
+     * Compare high-voltage gain calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int compareHvGains(Calibrator c1, Calibrator c2,
+                                      boolean verbose)
+    {
+        final boolean hasHvGain = c1.hasHvGainFit();
+        if (hasHvGain != c2.hasHvGainFit()) {
+            if (verbose) {
+                System.err.println("High-voltage gain mismatch (" +
+                                   (hasHvGain ? "present" : "absent") +
+                                   " != " + (c2.hasHvGainFit() ?
+                                             "present" : "absent") + ")");
+            }
+            return (hasHvGain ? -1 : 1);
+        }
+
+        final double delta = 0.00000001;
+
+        final double s1 = c1.getHvGainSlope();
+        final double s2 = c2.getHvGainSlope();
+        if (s1 < s2 - delta || s1 > s2 + delta) {
+            if (verbose) {
+                System.err.println("high-voltage slope mismatch (" +
+                                   s1 + " != " + s2 + ")");
+            }
+            return (int) (s1 < s2 - delta ? 1 : -1);
+        }
+
+        final double i1 = c1.getHvGainIntercept();
+        final double i2 = c2.getHvGainIntercept();
+        if (i1 < i2 - delta || i1 > i2 + delta) {
+            if (verbose) {
+                System.err.println("high-voltage intercept mismatch (" +
+                                   i1 + " != " + i2 + ")");
+            }
+            return (int) (i1 < i2 - delta ? 1 : -1);
+        }
+
+        return 0;
+    }
+
+    /**
+     * Compare high-voltage histogram data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int compareHvHistos(Calibrator c1, Calibrator c2,
+                                       boolean verbose)
+    {
+        Iterator i1 = c1.getHvHistogramKeys();
+        Iterator i2 = c2.getHvHistogramKeys();
+        if (i1 == null) {
+            if (i2 != null) {
+                int num2 = 0;
+                while (i2.hasNext()) {
+                    num2++;
+                    i2.next();
+                }
+
+                if (verbose) {
+                    System.err.println("Mismatch in number of histograms (" +
+                                       "null !=" + num2 + ")");
+                }
+
+                return 1;
+            }
+
+            return 0;
+        } else if (i2 == null) {
+            int num1 = 0;
+            while (i1.hasNext()) {
+                num1++;
+                i1.next();
+            }
+
+            if (verbose) {
+                System.err.println("Mismatch in number of histograms (" +
+                                   num1 + " != null)");
+            }
+
+            return -1;
+        }
+
+        int cmp = 0;
+
+        int num = 0;
+        boolean notDone = true;
+        while (notDone) {
+            if (!i1.hasNext()) {
+                if (i2.hasNext()) {
+                    int num2 = num;
+                    while (i2.hasNext()) {
+                        num2++;
+                        i2.next();
+                    }
+
+                    if (verbose) {
+                        System.err.println("Mismatch in number of histograms" +
+                                           " (" + num + " != " + num2 + ")");
+                    }
+
+                    return 1;
+                }
+
+                break;
+            } else if (!i2.hasNext()) {
+                int num1 = num;
+                while (i1.hasNext()) {
+                    num1++;
+                    i1.next();
+                }
+
+                if (verbose) {
+                    System.err.println("Mismatch in number of histograms (" +
+                                       num1 + " != " + num + ")");
+                }
+
+                return -1;
+            }
+
+            HVHistogram h1 = c1.getHvHistogram((Short) i1.next());
+            HVHistogram h2 = c2.getHvHistogram((Short) i2.next());
+
+            cmp = compareHisto(h1, h2, num, verbose);
+
+            notDone = (cmp == 0);
+            num++;
+        }
+
+        return cmp;
+    }
+
+    /**
+     * Compare pulser calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int comparePulsers(Calibrator c1, Calibrator c2,
+                                      boolean verbose)
+    {
+        if (!c1.getPulserFitModel().equals(c2.getPulserFitModel())) {
+            if (verbose) {
+                System.err.println("Pulser model mismatch (" +
+                                   c1.getPulserFitModel() + " != " +
+                                   c2.getPulserFitModel() + ")");
+            }
+            return c1.getPulserFitModel().compareTo(c2.getPulserFitModel());
+        }
+
+        Iterator i1 = c1.getPulserFitKeys();
+        Iterator i2 = c2.getPulserFitKeys();
+
+        int num = 0;
+        while (i1.hasNext()) {
+            if (!i2.hasNext()) {
+                if (verbose) {
+                    int num1 = num;
+                    while (i1.hasNext()) {
+                        num1++;
+                        i1.next();
+                    }
+
+                    System.err.println("Pulser entry length mismatch (" +
+                                       num1 + " != " + num + ")");
+                }
+                return -1;
+            }
+
+            final String p1 = (String) i1.next();
+            final String p2 = (String) i2.next();
+            if (!p1.equals(p2)) {
+                if (verbose) {
+                    System.err.println("Pulser parameter#" + num +
+                                       " mismatch (" + p1 + " != " + p2 + ")");
+                }
+                return p1.compareTo(p2);
+            }
+
+            if (p1.equals("model")) {
+                continue;
+            }
+
+            final double v1 = c1.getPulserFitParam(p1);
+            final double v2 = c1.getPulserFitParam(p2);
+            final double delta = 0.00000001;
+            if (v1 < v2 - delta || v1 > v2 + delta) {
+                if (verbose) {
+                    System.err.println("Pulser parameter " + p1 +
+                                       " mismatch (" + v1 + " != " + v2 + ")");
+                }
+                return (int) (v1 < v2 - delta ? 1 : -1);
+            }
+
+            num++;
+        }
+
+        if (i2.hasNext()) {
+            if (verbose) {
+                int num2 = num;
+                while (i2.hasNext()) {
+                    num2++;
+                    i2.next();
+                }
+
+                System.err.println("Pulser entry length mismatch (" +
+                                   num + " != " + num2 + ")");
+            }
+            return 1;
+        }
+
+        return 0;
+    }
+
+    /**
+     * Compare main calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int compareMain(Calibrator c1, Calibrator c2,
+                                   boolean verbose)
+    {
+        if (!c1.getDOMId().equals(c2.getDOMId())) {
+            if (verbose) {
+                System.err.println("DOMId mismatch (" + c1.getDOMId() +
+                                   " != " + c2.getDOMId() + ")");
+            }
+            return c1.getDOMId().compareTo(c2.getDOMId());
+        }
+
+        final Calendar cal1 = c1.getCalendar();
+        final Calendar cal2 = c2.getCalendar();
+        int calCmp = cal1.get(Calendar.YEAR) - cal2.get(Calendar.YEAR);
+        if (calCmp == 0) {
+            calCmp = cal1.get(Calendar.MONTH) - cal2.get(Calendar.MONTH);
+            if (calCmp == 0) {
+                calCmp = cal1.get(Calendar.DATE) - cal2.get(Calendar.DATE);
+            }
+        }
+        if (calCmp != 0) {
+            if (verbose) {
+                System.err.println("Calendar mismatch (" +
+                                   cal1.get(Calendar.YEAR) + "/" +
+                                   cal1.get(Calendar.MONTH) + "/" +
+                                   cal1.get(Calendar.DATE) + " != " +
+                                   cal2.get(Calendar.YEAR) + "/" +
+                                   cal2.get(Calendar.MONTH) + "/" +
+                                   cal2.get(Calendar.DATE) + ")");
+            }
+            return calCmp;
+        }
+
+        final double t1 = c1.getTemperature();
+        final double t2 = c2.getTemperature();
+        final double delta = 0.01;
+        if (t1 < t2 - delta || t1 > t2 + delta) {
+            if (verbose) {
+                System.err.println("Temperature mismatch (" + t1 + " != " +
+                                   t2 + ")");
+            }
+            return (int) (t1 < t2 - delta ? 1 : -1);
+        }
+
+        return 0;
+    }
+
+    /**
+     * Silly implementation to check for equality to another
+     * CalibratorComparator.
+     *
+     * @param obj object being compared
+     *
+     * @return <tt>true</tt> if the object is a CalibratorComparator
+     */
+    public boolean equals(Object obj)
+    {
+        if (obj == null || !(obj instanceof CalibratorComparator)) {
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Silly implementation to provide lame hash code.
+     *
+     * @return class hash code
+     */
+    public int hashCode()
+    {
+        return getClass().hashCode();
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/CalibratorDB.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/CalibratorDB.java:1.5
--- /dev/null	Thu Oct  6 09:02:10 2005
+++ dom-cal/src/icecube/daq/domcal/CalibratorDB.java	Mon Apr 25 12:40:07 2005
@@ -0,0 +1,1556 @@
+package icecube.daq.domcal;
+
+import icecube.daq.db.domprodtest.DOMProdTestDB;
+import icecube.daq.db.domprodtest.DOMProdTestException;
+import icecube.daq.db.domprodtest.DOMProdTestUtil;
+import icecube.daq.db.domprodtest.DOMProduct;
+import icecube.daq.db.domprodtest.Laboratory;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+
+import java.sql.Connection;
+import java.sql.Date;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import java.text.FieldPosition;
+import java.text.SimpleDateFormat;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Properties;
+
+import org.apache.log4j.Logger;
+
+/**
+ * Database interface for Calibrator.
+ */
+public class CalibratorDB
+    extends DOMProdTestDB
+{
+    /** Log message handler. */
+    private static Logger logger = Logger.getLogger(CalibratorDB.class);
+
+    /** List of model types. */
+    private static ModelType modelType;
+    /** List of parameter types. */
+    private static ParamType paramType;
+
+    /** Lab where results are being saved. */
+    private Laboratory lab;
+
+    /**
+     * Constructor.
+     *
+     * @throws DOMProdTestException if there is a problem creating the object
+     * @throws IOException if there is a problem reading the properties.
+     * @throws SQLException if there is a problem initializing the database.
+     */
+    public CalibratorDB()
+        throws DOMProdTestException, IOException, SQLException
+    {
+        super();
+    }
+
+    /**
+     * Constructor.
+     *
+     * @param props properties used to initialize the database connection
+     *
+     * @throws DOMProdTestException if there is a problem creating the object
+     * @throws IOException if there is a problem reading the properties.
+     * @throws SQLException if there is a problem initializing the database.
+     */
+    public CalibratorDB(Properties props)
+        throws DOMProdTestException, IOException, SQLException
+    {
+        super(props);
+    }
+
+    /**
+     * Clear all cached entries.
+     */
+    public static void clearStatic()
+    {
+        modelType = null;
+        paramType = null;
+    }
+
+    /**
+     * Return a formatted creation date string.
+     *
+     * @param cal calibration data
+     *
+     * @return formatted creation date
+     */
+    private static final String formatDate(Calibrator cal)
+    {
+        SimpleDateFormat dateFmt = new SimpleDateFormat("MMM-dd-yyyy");
+        StringBuffer dateBuf = new StringBuffer();
+        FieldPosition fldPos = new FieldPosition(0);
+
+        dateFmt.format(cal.getCalendar().getTime(), dateBuf, fldPos);
+
+        return dateBuf.toString();
+    }
+
+    /**
+     * Return a formatted temperature string.
+     *
+     * @param cal calibration data
+     *
+     * @return formatted temperature
+     */
+    private static final String formatTemperature(Calibrator cal)
+    {
+        final String dblStr = Double.toString(cal.getTemperature());
+        final int dotIdx = dblStr.indexOf('.');
+        if (dblStr.length() <= dotIdx + 3) {
+            return dblStr;
+        }
+        return dblStr.substring(0, dotIdx + 3);
+    }
+
+    /**
+     * Get model ID.
+     *
+     * @param stmt SQL statement
+     * @param model model name
+     *
+     * @return ID associated with model name
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private static final int getModelId(Statement stmt, String model)
+        throws DOMCalibrationException, SQLException
+    {
+        if (modelType == null) {
+            modelType = new ModelType(stmt);
+        }
+
+        int id = modelType.getId(model);
+        if (id == DOMProdTestUtil.ILLEGAL_ID) {
+            throw new DOMCalibrationException("Model \"" + model +
+                                              "\" not found");
+        }
+
+        return id;
+    }
+
+    /**
+     * Get parameter ID.
+     *
+     * @param stmt SQL statement
+     * @param param parameter name
+     *
+     * @return ID associated with parameter name
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private static final int getParamId(Statement stmt, String param)
+        throws DOMCalibrationException, SQLException
+    {
+        if (paramType == null) {
+            paramType = new ParamType(stmt);
+        }
+
+        int id = paramType.getId(param);
+        if (id == DOMProdTestUtil.ILLEGAL_ID) {
+            throw new DOMCalibrationException("Param \"" + param +
+                                              "\" not found");
+        }
+
+        return id;
+    }
+
+    /**
+     * Get the database <tt>prod_id</tt> for the calibrated DOM.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration object
+     *
+     * @return product ID
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private int getProductId(Statement stmt, Calibrator cal)
+        throws DOMCalibrationException, SQLException
+    {
+        int prodId = cal.getDOMProductId();
+        if (prodId < 0) {
+            DOMProduct prod;
+            try {
+                prod = new DOMProduct(stmt, cal.getDOMId());
+            } catch (DOMProdTestException dpte) {
+                throw new DOMCalibrationException("Couldn't get DOM \"" +
+                                                  cal.getDOMId() + "\": " +
+                                                  dpte.getMessage());
+            }
+
+            cal.setDOMProduct(prod);
+            prodId = cal.getDOMProductId();
+            if (prodId < 0) {
+                final String errMsg = "No database entry for DOM \"" +
+                    cal.getDOMId() + "\"";
+                throw new DOMCalibrationException(errMsg);
+            }
+        }
+
+        return prodId;
+    }
+
+    /**
+     * Load calibration data.
+     *
+     * @param mbSerial mainboard serial number of DOM being loaded
+     * @param date date of data being loaded
+     * @param temp temperature of data being loaded
+     *
+     * @return loaded data
+     *
+     * @throws DOMCalibrationException if an argument is invalid
+     * @throws SQLException if there is a database problem
+     */
+    public Calibrator load(String mbSerial, java.util.Date date, double temp)
+        throws DOMCalibrationException, SQLException
+    {
+        Calibrator cal = new Calibrator();
+        load(cal, mbSerial, date, temp);
+        return cal;
+    }
+
+    /**
+     * Load calibration data.
+     *
+     * @param cal calibration object to be filled
+     * @param mbSerial mainboard serial number of DOM being loaded
+     * @param date date of data being loaded
+     * @param temp temperature of data being loaded
+     *
+     * @throws DOMCalibrationException if an argument is invalid
+     * @throws SQLException if there is a database problem
+     */
+    public void load(Calibrator cal, String mbSerial, java.util.Date date,
+                     double temp)
+        throws DOMCalibrationException, SQLException
+    {
+        Connection conn;
+        Statement stmt;
+
+        conn = getConnection();
+        stmt = getStatement(conn);
+
+        try {
+            loadMain(stmt, cal, mbSerial, date, temp);
+            loadADCs(stmt, cal);
+            loadDACs(stmt, cal);
+            loadPulser(stmt, cal);
+            loadATWDs(stmt, cal);
+            loadAmpGain(stmt, cal);
+            loadATWDFreqs(stmt, cal);
+            loadHvGain(stmt, cal);
+            loadHvHisto(stmt, cal);
+        } finally {
+            try {
+                stmt.close();
+            } catch (SQLException se) {
+                // ignore errors on close
+            }
+
+            try {
+                conn.close();
+            } catch (SQLException se) {
+                // ignore errors on close
+            }
+        }
+    }
+
+    /**
+     * Load ADC data from database.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     *
+     * @throws SQLException if there is a database problem
+     */
+    private void loadADCs(Statement stmt, Calibrator cal)
+        throws SQLException
+    {
+        final String qStr =
+            "select channel,value from DOMCal_ADC where domcal_id=" +
+            cal.getDOMCalId() + " order by channel desc";
+
+        ResultSet rs = stmt.executeQuery(qStr);
+
+        int[] adcs = null;
+        while (rs.next()) {
+            final int channel = rs.getInt(1);
+            final int value = rs.getInt(2);
+
+            if (adcs == null) {
+                adcs = new int[channel + 1];
+            }
+
+            adcs[channel] = value;
+        }
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+
+        if (adcs != null) {
+            cal.setADCs(adcs);
+        }
+    }
+
+    /**
+     * Load ATWD frequency data from database.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     *
+     * @throws SQLException if there is a database problem
+     */
+    private void loadATWDFreqs(Statement stmt, Calibrator cal)
+        throws SQLException
+    {
+        HashMap[] freqs = null;
+
+        final String qStr =
+            "select da.chip,dm.name,da.fit_regression" +
+            " from DOMCal_ATWDFreq da,DOMCal_Model dm where da.domcal_id=" +
+            cal.getDOMCalId() + " and da.dc_model_id=dm.dc_model_id" +
+            " order by chip desc";
+
+        ResultSet rs = stmt.executeQuery(qStr);
+        while (rs.next()) {
+            final int chip = rs.getInt(1);
+            final String model = rs.getString(2);
+            final double regression = rs.getDouble(3);
+
+            if (freqs == null) {
+                freqs = new HashMap[chip + 1];
+
+                for (int i = 0; i <= chip; i++) {
+                    freqs[i] = null;
+                }
+            }
+
+            if (freqs[chip] == null) {
+                freqs[chip] = new HashMap();
+            }
+
+            freqs[chip].put("model", model);
+            freqs[chip].put("r", new Double(regression));
+        }
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+
+        if (freqs != null) {
+            final String pStr = "select dap.chip,dp.name,dap.value" +
+                " from DOMCal_ATWDFreqParam dap,DOMCal_Param dp" +
+                " where dap.domcal_id=" + cal.getDOMCalId() +
+                " and dap.dc_param_id=dp.dc_param_id order by chip desc";
+
+            rs = stmt.executeQuery(pStr);
+            while (rs.next()) {
+                final int chip = rs.getInt(1);
+                final String name = rs.getString(2);
+                final double value = rs.getDouble(3);
+
+                freqs[chip].put(name, new Double(value));
+            }
+
+            try {
+                rs.close();
+            } catch (SQLException se) {
+                // ignore errors on close
+            }
+
+            cal.setATWDFrequencyFits(freqs);
+        }
+    }
+
+    /**
+     * Load ATWD data from database.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void loadATWDs(Statement stmt, Calibrator cal)
+        throws DOMCalibrationException, SQLException
+    {
+        HashMap[][] atwds = null;
+
+        final String qStr =
+            "select da.channel,da.bin,dm.name,da.fit_regression" +
+            " from DOMCal_ATWD da,DOMCal_Model dm where da.domcal_id=" +
+            cal.getDOMCalId() + " and da.dc_model_id=dm.dc_model_id" +
+            " order by channel desc,bin desc";
+
+        ResultSet rs = stmt.executeQuery(qStr);
+        while (rs.next()) {
+            final int channel = rs.getInt(1);
+            final int bin = rs.getInt(2);
+            final String model = rs.getString(3);
+            final double regression = rs.getDouble(4);
+
+            if (atwds == null) {
+                atwds = new HashMap[channel + 1][];
+
+                for (int i = 0; i <= channel; i++) {
+                    atwds[i] = null;
+                }
+            }
+
+            if (atwds[channel] == null) {
+                atwds[channel] = new HashMap[bin + 1];
+
+                for (int i = 0; i <= bin; i++) {
+                    atwds[channel][bin] = null;
+                }
+            }
+
+            if (atwds[channel][bin] == null) {
+                atwds[channel][bin] = new HashMap();
+            }
+
+            atwds[channel][bin].put("model", model);
+            atwds[channel][bin].put("r", new Double(regression));
+        }
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+
+        if (atwds != null) {
+            final String pStr =
+                "select dap.channel,dap.bin,dp.name,dap.value" +
+                " from DOMCal_ATWDParam dap,DOMCal_Param dp" +
+                " where dap.domcal_id=" + cal.getDOMCalId() +
+                " and dap.dc_param_id=dp.dc_param_id" +
+                " order by channel desc,bin desc";
+
+            rs = stmt.executeQuery(pStr);
+            while (rs.next()) {
+                final int channel = rs.getInt(1);
+                final int bin = rs.getInt(2);
+                final String name = rs.getString(3);
+                final double value = rs.getDouble(4);
+
+                atwds[channel][bin].put(name, new Double(value));
+            }
+
+            try {
+                rs.close();
+            } catch (SQLException se) {
+                // ignore errors on close
+            }
+
+            cal.setATWDFits(atwds);
+        }
+    }
+
+    /**
+     * Load amplifier gain data from database.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void loadAmpGain(Statement stmt, Calibrator cal)
+        throws DOMCalibrationException, SQLException
+    {
+        final String qStr = "select channel,gain,error from DOMCal_AmpGain" +
+            " where domcal_id=" + cal.getDOMCalId() + " order by channel desc";
+
+        ResultSet rs = stmt.executeQuery(qStr);
+
+        double[] ampGain = null;
+        double[] ampGainErr = null;
+        while (rs.next()) {
+            final int channel = rs.getInt(1);
+            final double gain = rs.getDouble(2);
+            final double error = rs.getDouble(3);
+
+            if (ampGain == null) {
+                ampGain = new double[channel + 1];
+                ampGainErr = new double[channel + 1];
+            }
+
+            ampGain[channel] = gain;
+            ampGainErr[channel] = error;
+        }
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+
+        if (ampGain != null) {
+            cal.setAmpGain(ampGain, ampGainErr);
+        }
+    }
+
+    /**
+     * Load DAC data from database.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void loadDACs(Statement stmt, Calibrator cal)
+        throws DOMCalibrationException, SQLException
+    {
+        final String qStr =
+            "select channel,value from DOMCal_DAC where domcal_id=" +
+            cal.getDOMCalId() + " order by channel desc";
+
+        ResultSet rs = stmt.executeQuery(qStr);
+
+        int[] dacs = null;
+        while (rs.next()) {
+            final int channel = rs.getInt(1);
+            final int value = rs.getInt(2);
+
+            if (dacs == null) {
+                dacs = new int[channel + 1];
+            }
+
+            dacs[channel] = value;
+        }
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+
+        if (dacs != null) {
+            cal.setDACs(dacs);
+        }
+    }
+
+    /**
+     * Load high-voltage gain data from database.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void loadHvGain(Statement stmt, Calibrator cal)
+        throws DOMCalibrationException, SQLException
+    {
+        final String qStr = "select slope,intercept,regression" +
+            " from DOMCal_HvGain where domcal_id=" + cal.getDOMCalId();
+
+        ResultSet rs = stmt.executeQuery(qStr);
+
+        double slope = Double.NaN;
+        double intercept = Double.NaN;
+        double regression = Double.NaN;
+
+        boolean found = false;
+        if (rs.next()) {
+            slope = rs.getDouble(1);
+            intercept = rs.getDouble(2);
+            regression = rs.getDouble(3);
+            found = true;
+        }
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+
+        if (found) {
+            cal.setHvGain(slope, intercept, regression);
+        }
+    }
+
+    /**
+     * Load high-voltage histogram data from database.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void loadHvHisto(Statement stmt, Calibrator cal)
+        throws DOMCalibrationException, SQLException
+    {
+        ArrayList list = new ArrayList();
+        for (int i = 0; true; i++) {
+            final String qStr = "select voltage,convergent,pv,noise_rate" +
+                ",is_filled from DOMCal_ChargeMain where domcal_id=" +
+                cal.getDOMCalId() + " and dc_histo_num=" + i;
+
+            ResultSet rs = stmt.executeQuery(qStr);
+
+            short voltage = -1;
+            boolean convergent = false;
+            float pv = Float.NaN;
+            float noiseRate = Float.NaN;
+            boolean isFilled = false;
+
+            boolean found = false;
+            if (rs.next()) {
+                voltage = rs.getShort(1);
+                convergent = rs.getBoolean(2);
+                pv = rs.getFloat(3);
+                noiseRate = rs.getFloat(4);
+                isFilled = rs.getBoolean(5);
+                found = true;
+            }
+
+            try {
+                rs.close();
+            } catch (SQLException se) {
+                // ignore errors on close
+            }
+
+            if (!found) {
+                break;
+            }
+
+            float[] params = new float[5];
+
+            final String pStr = "select dp.name,cp.value" +
+                " from DOMCal_ChargeParam cp,DOMCal_Param dp" +
+                " where cp.domcal_id=" + cal.getDOMCalId() +
+                " and cp.dc_histo_num=" + i +
+                " and cp.dc_param_id=dp.dc_param_id";
+
+            rs = stmt.executeQuery(pStr);
+            while (rs.next()) {
+                final String name = rs.getString(1);
+                final float value = rs.getFloat(2);
+
+                boolean foundParam = false;
+                for (int j = 0; !foundParam && j < params.length; j++) {
+                    final String paramName = HVHistogram.getParameterName(j);
+                    if (name.equals(paramName)) {
+                        params[j] = value;
+                        foundParam = true;
+                    }
+                }
+
+                if (!foundParam) {
+                    System.err.println("Unknown HvHistogram parameter \"" +
+                                       name + "\"");
+                }
+            }
+
+            try {
+                rs.close();
+            } catch (SQLException se) {
+                // ignore errors on close
+            }
+
+            final String dStr =
+                "select bin,charge,count from DOMCal_ChargeData" +
+                " where domcal_id=" + cal.getDOMCalId() +
+                " and dc_histo_num=" + i +
+                " order by bin desc";
+
+            rs = stmt.executeQuery(dStr);
+
+            float[] charge = null;
+            float[] count = null;
+            while (rs.next()) {
+                final int bin = rs.getInt(1);
+                final float chg = rs.getFloat(2);
+                final float cnt = rs.getFloat(3);
+
+                if (charge == null) {
+                    charge = new float[bin + 1];
+                    count = new float[bin + 1];
+                }
+
+                charge[bin] = chg;
+                count[bin] = cnt;
+            }
+
+            try {
+                rs.close();
+            } catch (SQLException se) {
+                // ignore errors on close
+            }
+
+            list.add(new HVHistogram(voltage, params, charge, count,
+                                     convergent, pv, noiseRate, isFilled));
+        }
+
+        if (list.size() > 0) {
+            HVHistogram[] array = new HVHistogram[list.size()];
+            list.toArray(array);
+            cal.setHvHistograms(array);
+        }
+    }
+
+    /**
+     * Load main calibration data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration object to be filled
+     * @param mbSerial mainboard serial number of DOM being loaded
+     * @param date date of data being loaded
+     * @param temp temperature of data being loaded
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    public void loadMain(Statement stmt, Calibrator cal, String mbSerial,
+                         java.util.Date date, double temp)
+        throws DOMCalibrationException, SQLException
+    {
+        DOMProduct dcProd;
+        try {
+            dcProd = new DOMProduct(stmt, mbSerial);
+        } catch (DOMProdTestException dpte) {
+            throw new DOMCalibrationException("Couldn't get DOM \"" +
+                                              mbSerial + "\": " +
+                                              dpte.getMessage());
+        }
+
+        java.sql.Date sqlDate;
+        if (date == null) {
+            sqlDate = null;
+        } else {
+            sqlDate = new java.sql.Date(date.getTime());
+        }
+
+        final String qStr =
+            "select domcal_id,date,temperature from DOMCalibration" +
+            " where prod_id=" + dcProd.getId() +
+            (sqlDate == null ? "" : " and date<=" +
+             DOMProdTestUtil.quoteString(sqlDate.toString())) +
+            (Double.isNaN(temp) ? "" : " and temperature>=" + (temp - 5.0) +
+             " and temperature<=" + (temp + 5.0)) +
+            " order by date desc";
+
+        ResultSet rs = stmt.executeQuery(qStr);
+
+        boolean hasNext = rs.next();
+
+        final int domcalId;
+        final Date dcDate;
+        final double dcTemp;
+
+        if (!hasNext) {
+            domcalId = Integer.MIN_VALUE;
+            dcDate = null;
+            dcTemp = 0.0;
+        } else {
+            domcalId = rs.getInt(1);
+            dcDate = rs.getDate(2);
+            dcTemp = rs.getDouble(3);
+        }
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+
+        if (!hasNext) {
+            final String errMsg = "No calibration information for DOM " +
+                mbSerial + (date == null ? "" : ", date " + date) +
+                (Double.isNaN(temp) ? "" : ", temperature " + temp);
+            throw new DOMCalibrationException(errMsg);
+        }
+
+        cal.setMain(domcalId, mbSerial, dcProd, dcDate, dcTemp);
+    }
+
+    /**
+     * Load pulser data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void loadPulser(Statement stmt, Calibrator cal)
+        throws DOMCalibrationException, SQLException
+    {
+        final String qStr = "select dm.name,dp.fit_regression" +
+            " from DOMCal_Pulser dp,DOMCal_Model dm where dp.domcal_id=" +
+            cal.getDOMCalId() + " and dp.dc_model_id=dm.dc_model_id";
+
+        ResultSet rs = stmt.executeQuery(qStr);
+        if (!rs.next()) {
+            final String errMsg = "No Pulser data for DOM " + cal.getDOMId() +
+                ", date " + cal.getCalendar() +
+                ", temperature " + cal.getTemperature();
+            throw new DOMCalibrationException(errMsg);
+        }
+
+        final String model = rs.getString(1);
+        final double regression = rs.getDouble(2);
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+
+        cal.setPulserFitModel(model);
+        cal.setPulserFitParam("r", regression);
+
+        final String pStr = "select dp.name,dpp.value" +
+            " from DOMCal_PulserParam dpp,DOMCal_Param dp" +
+            " where dpp.domcal_id=" + cal.getDOMCalId() +
+            " and dpp.dc_param_id=dp.dc_param_id";
+
+        rs = stmt.executeQuery(pStr);
+        while (rs.next()) {
+            final String param = rs.getString(1);
+            final double value = rs.getDouble(2);
+            cal.setPulserFitParam(param, value);
+        }
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+    }
+
+    /**
+     * Save specified file to the database.
+     *
+     * @param fileName file name
+     * @param logger error logger
+     *
+     * @throws DOMProdTestException if there is a problem creating the object
+     * @throws IOException if there is a problem reading the properties.
+     * @throws SQLException if there is a problem initializing the database.
+     */
+    public static final void save(String fileName, Logger logger)
+        throws DOMCalibrationException, IOException, SQLException
+    {
+        save(fileName, logger, null, false);
+    }
+
+    /**
+     * Save specified file to the database.
+     *
+     * @param fileName file name
+     * @param logger error logger
+     * @param calDB database interface (one will be created if this
+     *              is not <code>null</code>
+     * @param verbose <code>true</code> for verbose comparison
+     *
+     * @throws DOMProdTestException if there is a problem creating the object
+     * @throws IOException if there is a problem reading the properties.
+     * @throws SQLException if there is a problem initializing the database.
+     */
+    public static final void save(String fileName, Logger logger,
+                                  CalibratorDB calDB, boolean verbose)
+        throws DOMCalibrationException, IOException, SQLException
+    {
+        FileInputStream fis = new FileInputStream(fileName);
+
+        Calibrator cal = new Calibrator(fis, calDB);
+
+        try {
+            fis.close();
+        } catch (IOException ioe) {
+            // ignore errors on close
+        }
+
+        Calibrator dbCal;
+        try {
+            dbCal = new Calibrator(cal.getDOMId(), cal.getCalendar().getTime(),
+                                   cal.getTemperature(), calDB);
+        } catch (DOMCalibrationException dce) {
+            dbCal = null;
+        }
+
+        if (dbCal != null &&
+            CalibratorComparator.compare(cal, dbCal, verbose) == 0)
+        {
+            logger.info("Calibration data for DOM " + cal.getDOMId() +
+                        "/" + formatDate(cal) + "/" +
+                        formatTemperature(cal) + " degrees already in DB");
+        } else {
+            cal.save();
+            cal.close();
+            logger.info("Saved calibration data for DOM " + cal.getDOMId() +
+                        "/" + formatDate(cal) + "/" + formatTemperature(cal) +
+                        " degrees");
+        }
+
+        if (dbCal != null) {
+            dbCal.close();
+        }
+    }
+
+    /**
+     * Save calibration data.
+     *
+     * @param cal calibration data
+     *
+     * @return ID of inserted data
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    public int save(Calibrator cal)
+        throws DOMCalibrationException, SQLException
+    {
+        Connection conn;
+        Statement stmt;
+
+        conn = getConnection();
+        stmt = getStatement(conn);
+
+        int id = DOMProdTestUtil.ILLEGAL_ID;
+        try {
+            if (lab == null) {
+                try {
+                    lab = new Laboratory(stmt);
+                } catch (DOMProdTestException dpte) {
+                    final String errMsg = "Couldn't get local laboratory: " +
+                        dpte.getMessage();
+                    throw new DOMCalibrationException(errMsg);
+                }
+            }
+
+            int domcalId = saveMain(stmt, cal);
+            saveADCs(stmt, cal, domcalId);
+            saveDACs(stmt, cal, domcalId);
+            savePulser(stmt, cal, domcalId);
+            saveATWDs(stmt, cal, domcalId);
+            saveAmpGain(stmt, cal, domcalId);
+            saveATWDFreqs(stmt, cal, domcalId);
+            saveHvGain(stmt, cal, domcalId);
+            saveHvHisto(stmt, cal, domcalId);
+
+            cal.setDOMCalId(domcalId);
+        } finally {
+            try {
+                stmt.close();
+            } catch (SQLException se) {
+                // ignore errors on close
+            }
+
+            try {
+                conn.close();
+            } catch (SQLException se) {
+                // ignore errors on close
+            }
+        }
+
+        return id;
+    }
+
+    /**
+     * Save ADC data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     * @param domcalId ID of main calibration row in database
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void saveADCs(Statement stmt, Calibrator cal, int domcalId)
+        throws DOMCalibrationException, SQLException
+    {
+        final int len = cal.getNumberOfADCs();
+        for (int i = 0; i < len; i++) {
+            saveChanValueRow(stmt, "DOMCal_ADC", domcalId, i, cal.getADC(i));
+        }
+    }
+
+    /**
+     * Save ATWD data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     * @param domcalId ID of main calibration row in database
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void saveATWDs(Statement stmt, Calibrator cal, int domcalId)
+        throws DOMCalibrationException, SQLException
+    {
+        final int numChan = cal.getNumberOfATWDChannels();
+        for (int ch = 0; ch < numChan; ch++) {
+            if (ch == 3 || ch == 7) {
+                // channels 3 and 7 do not exist
+                continue;
+            }
+
+            final int numBins = cal.getNumberOfATWDBins(ch);
+            for (int bin = 0; bin < numBins; bin++) {
+                Iterator iter = cal.getATWDFitKeys(ch, bin);
+                if (iter == null) {
+                    continue;
+                }
+
+                HashMap params = new HashMap();
+                int modelId = DOMProdTestUtil.ILLEGAL_ID;
+                double regression = Double.NaN;
+
+                while (iter.hasNext()) {
+                    final String key = (String) iter.next();
+                    if (key.equals("model")) {
+                        final String model = cal.getATWDFitModel(ch, bin);
+                        modelId = getModelId(stmt, model);
+                        if (modelId == DOMProdTestUtil.ILLEGAL_ID) {
+                            logger.error("Unknown model \"" + model +
+                                         "\" for ATWD channel " + ch +
+                                         " bin " + bin);
+                            break;
+                        }
+                    } else if (key.equals("r")) {
+                        regression = cal.getATWDFitParam(ch, bin, key);
+                    } else {
+                        double val = cal.getATWDFitParam(ch, bin, key);
+                        params.put(key, new Double(val));
+                    }
+                }
+
+                if (modelId == DOMProdTestUtil.ILLEGAL_ID ||
+                    Double.isNaN(regression))
+                {
+                    continue;
+                }
+
+                final String iStr = "insert into DOMCal_ATWD(domcal_id" +
+                    ",channel,bin,dc_model_id,fit_regression)values(" +
+                    domcalId + "," + ch + "," + bin + "," + modelId + "," +
+                    regression + ")";
+
+                int rows;
+                try {
+                    rows = stmt.executeUpdate(iStr);
+                } catch (SQLException se) {
+                    throw new SQLException(iStr + ": " + se.getMessage());
+                }
+
+                if (rows != 1) {
+                    throw new SQLException("Expected to insert 1 row, not " +
+                                           rows);
+                }
+
+                Iterator pIter = params.entrySet().iterator();
+                while (pIter.hasNext()) {
+                    java.util.Map.Entry entry =
+                        (java.util.Map.Entry) pIter.next();
+
+                    final String key = (String) entry.getKey();
+
+                    int paramId = getParamId(stmt, key);
+                    if (paramId == DOMProdTestUtil.ILLEGAL_ID) {
+                        logger.error("Ignoring unknown ATWD parameter \"" +
+                                     key + "\"");
+                        continue;
+                    }
+
+                    final String pStr =
+                        "insert into DOMCal_ATWDParam(domcal_id,channel,bin" +
+                        ",dc_param_id,value)values(" + domcalId + "," +
+                        ch + "," + bin + "," +  paramId + "," +
+                        entry.getValue() + ")";
+
+                    try {
+                        rows = stmt.executeUpdate(pStr);
+                    } catch (SQLException se) {
+                        throw new SQLException(pStr + ": " + se.getMessage());
+                    }
+
+                    if (rows != 1) {
+                        throw new SQLException("Expected to insert 1 row" +
+                                               ", not " + rows);
+                    }
+                }
+            }
+        }
+    }
+
+    /**
+     * Save ATWD frequency data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     * @param domcalId ID of main calibration row in database
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void saveATWDFreqs(Statement stmt, Calibrator cal, int domcalId)
+        throws DOMCalibrationException, SQLException
+    {
+        final int num = cal.getNumberOfATWDFrequencyChips();
+        for (int i = 0; i < num; i++) {
+            Iterator iter = cal.getATWDFrequencyFitKeys(i);
+            if (iter == null) {
+                continue;
+            }
+
+            HashMap params = new HashMap();
+            int modelId = DOMProdTestUtil.ILLEGAL_ID;
+            double regression = Double.NaN;
+
+            while (iter.hasNext()) {
+                final String key = (String) iter.next();
+                if (key.equals("model")) {
+                    final String model = cal.getATWDFrequencyFitModel(i);
+                    modelId = getModelId(stmt, model);
+                    if (modelId == DOMProdTestUtil.ILLEGAL_ID) {
+                        logger.error("Unknown model \"" + model +
+                                     "\" for ATWD frequency chip " + i);
+                        break;
+                    }
+                } else if (key.equals("r")) {
+                    regression = cal.getATWDFrequencyFitParam(i, key);
+                } else {
+                    double val = cal.getATWDFrequencyFitParam(i, key);
+                    params.put(key, new Double(val));
+                }
+            }
+
+            if (modelId == DOMProdTestUtil.ILLEGAL_ID ||
+                Double.isNaN(regression))
+            {
+                continue;
+            }
+
+            final String iStr = "insert into DOMCal_ATWDFreq(domcal_id" +
+                ",chip,dc_model_id,fit_regression)values(" + domcalId +
+                "," + i + "," + modelId + "," + regression + ")";
+
+            int rows;
+            try {
+                rows = stmt.executeUpdate(iStr);
+            } catch (SQLException se) {
+                throw new SQLException(iStr + ": " + se.getMessage());
+            }
+
+            if (rows != 1) {
+                throw new SQLException("Expected to insert 1 row, not " +
+                                       rows);
+            }
+
+            Iterator pIter = params.entrySet().iterator();
+            while (pIter.hasNext()) {
+                java.util.Map.Entry entry =
+                    (java.util.Map.Entry) pIter.next();
+
+                final String key = (String) entry.getKey();
+
+                int paramId = getParamId(stmt, key);
+                if (paramId == DOMProdTestUtil.ILLEGAL_ID) {
+                    logger.error("Ignoring unknown ATWD parameter \"" +
+                                 key + "\"");
+                    continue;
+                }
+
+                final String pStr =
+                    "insert into DOMCal_ATWDFreqParam(domcal_id,chip" +
+                    ",dc_param_id,value)values(" + domcalId + "," +
+                    i + "," +  paramId + "," + entry.getValue() + ")";
+
+                try {
+                    rows = stmt.executeUpdate(pStr);
+                } catch (SQLException se) {
+                    throw new SQLException(pStr + ": " + se.getMessage());
+                }
+
+                if (rows != 1) {
+                    throw new SQLException("Expected to insert 1 row" +
+                                           ", not " + rows);
+                }
+            }
+        }
+    }
+
+    /**
+     * Save amplifier gain data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     * @param domcalId ID of main calibration row in database
+     *
+     * @throws SQLException if there is a database problem
+     */
+    private void saveAmpGain(Statement stmt, Calibrator cal, int domcalId)
+        throws SQLException
+    {
+        final int len = cal.getNumberOfAmplifierGainChannels();
+        for (int i = 0; i < len; i++) {
+            final String iStr =
+                "insert into DOMCal_AmpGain(domcal_id,channel,gain,error)" +
+                "values(" + domcalId + "," + i + "," +
+                cal.getAmplifierGain(i) + "," +
+                cal.getAmplifierGainError(i) + ")";
+
+            int rows;
+            try {
+                rows = stmt.executeUpdate(iStr);
+            } catch (SQLException se) {
+                throw new SQLException(iStr + ": " + se.getMessage());
+            }
+
+            if (rows != 1) {
+                throw new SQLException("Expected to insert 1 row, not " + rows);
+            }
+        }
+    }
+
+    /**
+     * Save channel/value row.
+     *
+     * @param stmt SQL statement
+     * @param tblName database table name
+     * @param domcalId ID of main calibration row in database
+     * @param channel channel being saved
+     * @param value value being saved
+     *
+     * @throws SQLException if there is a database problem
+     */
+    private void saveChanValueRow(Statement stmt, String tblName, int domcalId,
+                                  int channel, int value)
+        throws SQLException
+    {
+        final String iStr = "insert into " + tblName +
+            "(domcal_id,channel,value)values(" + domcalId + "," + channel +
+            "," + value + ")";
+
+        int rows;
+        try {
+            rows = stmt.executeUpdate(iStr);
+        } catch (SQLException se) {
+            throw new SQLException(iStr + ": " + se.getMessage());
+        }
+
+        if (rows != 1) {
+            throw new SQLException("Expected to insert 1 row, not " + rows);
+        }
+    }
+
+    /**
+     * Save DAC data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     * @param domcalId ID of main calibration row in database
+     *
+     * @throws SQLException if there is a database problem
+     */
+    private void saveDACs(Statement stmt, Calibrator cal, int domcalId)
+        throws SQLException
+    {
+        final int len = cal.getNumberOfDACs();
+        for (int i = 0; i < len; i++) {
+            saveChanValueRow(stmt, "DOMCal_DAC", domcalId, i, cal.getDAC(i));
+        }
+    }
+
+    /**
+     * Save HV/gain fit data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     * @param domcalId ID of main calibration row in database
+     *
+     * @throws SQLException if there is a database problem
+     */
+    private void saveHvGain(Statement stmt, Calibrator cal, int domcalId)
+        throws SQLException
+    {
+        if (!cal.hasHvGainFit()) {
+            return;
+        }
+
+        final String iStr =
+            "insert into DOMCal_HvGain(domcal_id,slope,intercept,regression)" +
+            "values(" + domcalId + "," + cal.getHvGainSlope() + "," +
+            cal.getHvGainIntercept() + "," + cal.getHvGainRegression() + ")";
+
+        int rows;
+        try {
+            rows = stmt.executeUpdate(iStr);
+        } catch (SQLException se) {
+            throw new SQLException(iStr + ": " + se.getMessage());
+        }
+
+        if (rows != 1) {
+            throw new SQLException("Expected to insert 1 row, not " + rows);
+        }
+    }
+
+    /**
+     * Save HV histogram data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     * @param domcalId ID of main calibration row in database
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void saveHvHisto(Statement stmt, Calibrator cal, int domcalId)
+        throws DOMCalibrationException, SQLException
+    {
+        Iterator iter = cal.getHvHistogramKeys();
+        if (iter == null) {
+            return;
+        }
+
+        int num = 0;
+        while (iter.hasNext()) {
+            HVHistogram histo = cal.getHvHistogram((Short) iter.next());
+
+            saveHvHistoMain(stmt, domcalId, histo, num);
+            saveHvHistoParams(stmt, domcalId, histo, num);
+            saveHvHistoData(stmt, domcalId, histo, num);
+
+            num++;
+        }
+    }
+
+    /**
+     * Save HV histogram data.
+     *
+     * @param stmt SQL statement
+     * @param domcalId ID of main calibration row in database
+     * @param histo histogram being saved
+     * @param num histogram number
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void saveHvHistoData(Statement stmt, int domcalId,
+                                 HVHistogram histo, int num)
+        throws DOMCalibrationException, SQLException
+    {
+        float[] charge = histo.getXVals();
+        float[] count = histo.getYVals();
+
+        for (int i = 0; i < charge.length; i++) {
+            final String iStr =
+                "insert into DOMCal_ChargeData(domcal_id,dc_histo_num" +
+                ",bin,charge,count)values(" + domcalId + "," + num + "," +
+                i + "," + charge[i] + "," + count[i] + ")";
+
+            int rows;
+            try {
+                rows = stmt.executeUpdate(iStr);
+            } catch (SQLException se) {
+                throw new SQLException(iStr + ": " + se.getMessage());
+            }
+
+            if (rows != 1) {
+                throw new SQLException("Expected to insert 1 row, not " + rows);
+            }
+        }
+    }
+
+    /**
+     * Save main HV histogram data.
+     *
+     * @param stmt SQL statement
+     * @param domcalId ID of main calibration row in database
+     * @param histo histogram being saved
+     * @param num histogram number
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void saveHvHistoMain(Statement stmt, int domcalId,
+                                 HVHistogram histo, int num)
+        throws DOMCalibrationException, SQLException
+    {
+        final String iStr =
+            "insert into DOMCal_ChargeMain(domcal_id,dc_histo_num,voltage," +
+            "convergent,pv,noise_rate,is_filled)values(" + domcalId + "," +
+            num + "," + histo.getVoltage() + "," +
+            (histo.isConvergent() ? 1 : 0) + "," + histo.getPV() + "," +
+            histo.getNoiseRate() + "," + (histo.isFilled() ? 1 : 0) + ")";
+
+        int rows;
+        try {
+            rows = stmt.executeUpdate(iStr);
+        } catch (SQLException se) {
+            throw new SQLException(iStr + ": " + se.getMessage());
+        }
+
+        if (rows != 1) {
+            throw new SQLException("Expected to insert 1 row, not " + rows);
+        }
+
+    }
+
+    /**
+     * Save HV histogram parameter data.
+     *
+     * @param stmt SQL statement
+     * @param domcalId ID of main calibration row in database
+     * @param histo histogram being saved
+     * @param num histogram number
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void saveHvHistoParams(Statement stmt, int domcalId,
+                                   HVHistogram histo, int num)
+        throws DOMCalibrationException, SQLException
+    {
+        float[] paramVals = histo.getFitParams();
+
+        for (int i = 0; i < paramVals.length; i++) {
+            int paramId = getParamId(stmt, HVHistogram.getParameterName(i));
+
+            final String iStr =
+                "insert into DOMCal_ChargeParam(domcal_id,dc_histo_num" +
+                ",dc_param_id,value)values(" + domcalId + "," + num + "," +
+                paramId + "," + paramVals[i] + ")";
+
+            int rows;
+            try {
+                rows = stmt.executeUpdate(iStr);
+            } catch (SQLException se) {
+                throw new SQLException(iStr + ": " + se.getMessage());
+            }
+
+            if (rows != 1) {
+                throw new SQLException("Expected to insert 1 row, not " + rows);
+            }
+        }
+    }
+
+    /**
+     * Save main calibration data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     *
+     * @return ID of inserted data
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private int saveMain(Statement stmt, Calibrator cal)
+        throws DOMCalibrationException, SQLException
+    {
+        String[] cols = new String[] {
+            "prod_id", "date", "temperature",
+        };
+        Object[] vals = new Object[] {
+            new Integer(getProductId(stmt, cal)),
+            new java.sql.Date(cal.getCalendar().getTimeInMillis()).toString(),
+            new Double(cal.getTemperature()),
+        };
+
+        return DOMProdTestUtil.addId(stmt, "DOMCalibration", "domcal_id",
+                                     cols, vals,
+                                     lab.getMinimumId(), lab.getMaximumId());
+    }
+
+    /**
+     * Save pulser data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     * @param domcalId ID of main calibration row in database
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void savePulser(Statement stmt, Calibrator cal, int domcalId)
+        throws DOMCalibrationException, SQLException
+    {
+        final String model = cal.getPulserFitModel();
+        final int modelId = getModelId(stmt, model);
+
+        double regression = cal.getPulserFitParam("r");
+
+        final String iStr =
+            "insert into DOMCal_Pulser(domcal_id,dc_model_id,fit_regression)" +
+            "values(" + domcalId + "," + modelId + "," + regression + ")";
+
+        int rows;
+        try {
+            rows = stmt.executeUpdate(iStr);
+        } catch (SQLException se) {
+            throw new SQLException(iStr + ": " + se.getMessage());
+        }
+
+        if (rows != 1) {
+            throw new SQLException("Expected to insert 1 row, not " + rows);
+        }
+
+        Iterator keys = cal.getPulserFitKeys();
+        while (keys.hasNext()) {
+            final String key = (String) keys.next();
+            if (!key.equals("model") && !key.equals("r")) {
+                int paramId = getParamId(stmt, key);
+                if (paramId == DOMProdTestUtil.ILLEGAL_ID) {
+                    logger.error("Ignoring unknown pulser parameter \"" + key +
+                                 "\"");
+                    continue;
+                }
+
+                final String pStr =
+                    "insert into DOMCal_PulserParam(domcal_id,dc_param_id" +
+                    ",value)values(" + domcalId + "," + paramId + "," +
+                    cal.getPulserFitParam(key) + ")";
+
+                try {
+                    rows = stmt.executeUpdate(pStr);
+                } catch (SQLException se) {
+                    throw new SQLException(pStr + ": " + se.getMessage());
+                }
+
+                if (rows != 1) {
+                    throw new SQLException("Expected to insert 1 row, not " +
+                                           rows);
+                }
+            }
+        }
+    }
+
+    /**
+     * Set the laboratory used to generate unique IDs.
+     *
+     * @param lab laboratory
+     */
+    public void setLaboratory(Laboratory lab)
+    {
+        this.lab = lab;
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/DOMCalRecord.java
diff -u dom-cal/src/icecube/daq/domcal/DOMCalRecord.java:1.3.2.1 dom-cal/src/icecube/daq/domcal/DOMCalRecord.java:1.9
--- dom-cal/src/icecube/daq/domcal/DOMCalRecord.java:1.3.2.1	Tue Aug  2 09:40:57 2005
+++ dom-cal/src/icecube/daq/domcal/DOMCalRecord.java	Wed Sep 21 13:17:00 2005
@@ -62,4 +62,6 @@
 
     public Baseline getBaseline();
 
+    public short getNumTransitCalPts();
+
 }
Index: dom-cal/src/icecube/daq/domcal/DOMCalRecordFactory.java
diff -u dom-cal/src/icecube/daq/domcal/DOMCalRecordFactory.java:1.10.2.1 dom-cal/src/icecube/daq/domcal/DOMCalRecordFactory.java:1.16
--- dom-cal/src/icecube/daq/domcal/DOMCalRecordFactory.java:1.10.2.1	Tue Aug  2 09:40:57 2005
+++ dom-cal/src/icecube/daq/domcal/DOMCalRecordFactory.java	Wed Sep 21 13:17:00 2005
@@ -107,7 +107,9 @@
         boolean transitCalValid = transitCalValidShort == 0 ? false : true;
 
         LinearFit transitTimeFit = null;
+        short numTransitPts = 0;
         if (transitCalValid) {
+            numTransitPts = bb.getShort();
             transitTimeFit = LinearFitFactory.parseLinearFit(bb);
         }
 
@@ -141,7 +143,7 @@
         return new DefaultDOMCalRecord( pulserCalibration, atwdCalibration, atwdFrequencyCalibration,
                 amplifierCalibration, amplifierCalibrationError, temperature, year, month, day, domId, dacValues,
                adcValues, fadcValues, version, hvCalValid, transitCalValid, hvBaselinesValid, hvGainFit,
-                                                    numHVHistograms, histos, baseline, hvBaselines, transitTimeFit);
+                                      numHVHistograms, histos, baseline, hvBaselines, transitTimeFit, numTransitPts);
     }
     
     private static class DefaultDOMCalRecord implements DOMCalRecord {
@@ -169,6 +171,7 @@
 
         private boolean hvCalValid;
         private boolean transitCalValid;
+        private short numTransitPts;
         private boolean hvBaselineCalValid;
 
         private LinearFit hvGainCal;
@@ -185,8 +188,9 @@
                  temperature, short year, short month, short day, String domId, short[] dacValues, short[] adcValues,
                  short[] fadcValues, short version, boolean hvCalValid, boolean transitCalValid,
                  boolean hvBaselineCalValid, LinearFit hvGainCal, short numHVHistograms, HVHistogram[] hvHistos,
-                                                 Baseline baseline, Baseline[] hvBaselines, LinearFit transitTimeFit) {
+                             Baseline baseline, Baseline[] hvBaselines, LinearFit transitTimeFit, short numTransitPts) {
 
+            this.numTransitPts = numTransitPts;
             this.baseline = baseline;
             this.hvBaselines = hvBaselines;
             this.pulserCalibration = pulserCalibration;
@@ -303,6 +307,10 @@
 
         public boolean isTransitCalValid() {
             return transitCalValid;
+        }
+
+        public short getNumTransitCalPts() {
+            return numTransitPts;
         }
 
         public LinearFit getTransitTimeFit() {
Index: dom-cal/src/icecube/daq/domcal/DOMCalXML.java
diff -u dom-cal/src/icecube/daq/domcal/DOMCalXML.java:1.14.2.1 dom-cal/src/icecube/daq/domcal/DOMCalXML.java:1.24
--- dom-cal/src/icecube/daq/domcal/DOMCalXML.java:1.14.2.1	Tue Aug  2 09:40:57 2005
+++ dom-cal/src/icecube/daq/domcal/DOMCalXML.java	Wed Sep 21 13:17:00 2005
@@ -63,7 +63,7 @@
 
 
         if (rec.isTransitCalValid()) {
-            out.print("  <pmtTransitTime>\n");
+            out.print("  <pmtTransitTime num_pts=\"" + rec.getNumTransitCalPts() + "\">\n");
             format(rec.getTransitTimeFit(), out);
             out.print("  </pmtTransitTime>\n");
         }
Index: dom-cal/src/icecube/daq/domcal/HV2DB.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/HV2DB.java:1.2
--- /dev/null	Thu Oct  6 09:02:10 2005
+++ dom-cal/src/icecube/daq/domcal/HV2DB.java	Thu Aug  4 12:13:26 2005
@@ -0,0 +1,206 @@
+/*************************************************  120 columns wide   ************************************************
+
+ Class:  	HV2DB
+
+ @author 	Jim Braun
+ @author     jbraun@amanda.wisc.edu
+
+ ICECUBE Project
+ University of Wisconsin - Madison
+
+ **********************************************************************************************************************/
+
+package icecube.daq.domcal;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.NodeList;
+import org.xml.sax.SAXException;
+
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import java.io.File;
+import java.io.IOException;
+import java.io.FileInputStream;
+import java.util.LinkedList;
+import java.util.Hashtable;
+import java.util.Iterator;
+import java.util.Properties;
+
+import java.sql.*;
+
+public class HV2DB {
+
+    public static final double LGAIN = 5e5;
+    public static final double MGAIN = 5e6;
+    public static final double HGAIN = 1e7;
+    public static final double UHGAIN = 5e7;
+
+    public static void main(String[] args) {
+        if (args.length < 1) {
+            System.out.println("Usage: java icecube.daq.domcal.HV2DB <dir>");
+            System.out.println("where dir is a directory containing domcal files or an individual domcal file");
+            return;
+        }
+
+        //check for readability
+        File f = new File(args[0]);
+        if (!f.exists() || !f.canRead()) {
+            System.out.println("Cannot read " + args[0]);
+            return;
+        }
+
+        //if f is a directory, find all the domcal files it contains -- top level only
+        LinkedList filesFound = new LinkedList();
+        if (!f.isDirectory()) {
+            if (checkName(f)) filesFound.add(f);
+        } else {
+            File[] cfiles = f.listFiles();
+            for (int i = 0; i < cfiles.length; i++)
+            if (checkName(cfiles[i])) filesFound.add(cfiles[i]);
+        }
+
+        if (filesFound.size() == 0) {
+            System.out.println("No domcal files available");
+            return;
+        }
+
+        //parse all HV values into a hashtable
+        Hashtable hv = new Hashtable();
+        for (Iterator it = filesFound.iterator(); it.hasNext();) {
+            File inf = (File)it.next();
+            Document doc = null;
+            try {
+                doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(inf);
+            } catch (ParserConfigurationException ex) {
+                System.out.println("Parser configuration error on file " + inf.getAbsolutePath());
+            } catch (SAXException ex) {
+                System.out.println("Error parsing file " + inf.getAbsolutePath());
+            } catch (IOException ex) {
+                System.out.println("IO Error loading domcal file " + inf.getAbsolutePath());
+            }
+
+            if (doc == null) {
+                System.out.println("Skipping file " + inf.getAbsolutePath());
+                continue;
+            }
+
+            String domId = doc.getElementsByTagName("domid").item(0).getFirstChild().getNodeValue();
+
+            NodeList nl = doc.getElementsByTagName("hvGainCal");
+            if (nl.getLength() == 0) {
+                System.out.println("No HV data found for DOM " + domId + " in domcal file " + inf.getAbsolutePath());
+                continue;
+            } else if (nl.getLength()  > 1) {
+                System.out.println("Bad (multiple) HV data found in file " + inf.getAbsolutePath());
+                continue;
+            }
+            hv.put(domId, parseFit((Element)nl.item(0)));
+        }
+
+        // Stuff values into database
+        Properties calProps = new Properties();
+        File propFile = new File(System.getProperty("user.home") +
+                "/.domcal.properties"
+        );
+        if (!propFile.exists()) {
+            propFile = new File("/usr/local/etc/domcal.properties");
+        }
+
+        try {
+            calProps.load(new FileInputStream(propFile));
+        } catch (IOException e) {
+            System.out.println("Cannot access the domcal.properties file - using compiled defaults.");
+        }
+
+        String driver = calProps.getProperty("icecube.daq.domcal.db.driver", "com.mysql.jdbc.Driver");
+        try {
+            Class.forName(driver);
+        } catch (ClassNotFoundException x) {
+            System.out.println("No MySQL driver class found - PMT HV not stored in DB.");
+            return;
+        }
+
+        Connection jdbc;
+
+        String url = calProps.getProperty("icecube.daq.domcal.db.url", "jdbc:mysql://localhost/fat");
+        String user = calProps.getProperty("icecube.daq.domcal.db.user", "dfl");
+        String passwd = calProps.getProperty("icecube.daq.domcal.db.passwd", "(D0Mus)");
+
+        try {
+            jdbc = DriverManager.getConnection(url, user, passwd);
+        } catch (SQLException ex) {
+            System.out.println("Error connecting to database!");
+            return;
+        }
+
+        for (Iterator it = hv.keySet().iterator(); it.hasNext();) {
+            String domId = (String)it.next();
+            HVValues vals = (HVValues)hv.get(domId);
+            if (vals == null) {
+                System.out.println("Values for DOM " + domId + " not available");
+                continue;
+            }
+            try {
+                Statement stmt = jdbc.createStatement();
+                String updateSQL = "UPDATE domtune SET hv1=" + vals.hgain + " WHERE mbid='" + domId + "';";
+                System.out.println( "Executing stmt: " + updateSQL );
+                stmt.executeUpdate(updateSQL);
+                stmt = jdbc.createStatement();
+                updateSQL = "UPDATE domtune SET hv2=" + vals.mgain + " WHERE mbid='" + domId + "';";
+                System.out.println( "Executing stmt: " + updateSQL );
+                stmt.executeUpdate(updateSQL);
+                stmt = jdbc.createStatement();
+                updateSQL = "UPDATE domtune SET hv3=" + vals.lgain + " WHERE mbid='" + domId + "';";
+                System.out.println( "Executing stmt: " + updateSQL );
+                stmt.executeUpdate(updateSQL);
+                updateSQL = "UPDATE domtune SET hv0=" + vals.uhgain + " WHERE mbid='" + domId + "';";
+                System.out.println( "Executing stmt: " + updateSQL );
+                stmt.executeUpdate(updateSQL);
+            } catch (SQLException e) {
+                System.out.println("Unable to insert into database");
+            }
+        }
+    }
+
+    private static HVValues parseFit(Element el) {
+        double slope = 0.0;
+        double intercept = 0.0;
+        NodeList nodes = el.getElementsByTagName("param");
+        for (int i = 0; i < nodes.getLength(); i++) {
+            Element param = (Element) nodes.item(i);
+            if (param.getAttribute("name").equals("slope"))
+                                      slope = Double.parseDouble(param.getFirstChild().getNodeValue());
+            else if (param.getAttribute("name").equals("intercept"))
+                                      intercept = Double.parseDouble(param.getFirstChild().getNodeValue());
+        }
+        System.out.println("Slope: " + slope + " Intercept: " + intercept + " hgain: " + HGAIN);
+        if (slope == 0.0 || intercept == 0.0) return null;
+        int lgain = (int)Math.pow(10.0, (Math.log(LGAIN)/Math.log(10) - intercept) / slope);
+        int mgain = (int)Math.pow(10.0, (Math.log(MGAIN)/Math.log(10) - intercept) / slope);
+        int hgain = (int)Math.pow(10.0, (Math.log(HGAIN)/Math.log(10) - intercept) / slope);
+        int uhgain = (int)Math.pow(10.0, (Math.log(UHGAIN)/Math.log(10) - intercept) / slope);
+        return new HVValues(uhgain, hgain, mgain, lgain);
+    }
+
+    static boolean checkName(File f) {
+        boolean ret = f.getName().startsWith("domcal_") && f.getName().endsWith(".xml");
+        if (ret) System.out.println("Found domcal file " + f.getAbsolutePath());
+        else System.out.println("File " + f.getAbsolutePath() + " does not appear to be a domcal file -- omitting");
+        return ret;
+    }
+
+    static class HVValues {
+        int uhgain;
+        int hgain;
+        int mgain;
+        int lgain;
+
+        HVValues(int uhgain, int hgain, int mgain, int lgain) {
+            this.uhgain = uhgain;
+            this.hgain = hgain;
+            this.mgain = mgain;
+            this.lgain = lgain;
+        }
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/HVHistogramGrapher.java
diff -u dom-cal/src/icecube/daq/domcal/HVHistogramGrapher.java:1.7.2.1 dom-cal/src/icecube/daq/domcal/HVHistogramGrapher.java:1.11
--- dom-cal/src/icecube/daq/domcal/HVHistogramGrapher.java:1.7.2.1	Tue Aug  2 09:40:57 2005
+++ dom-cal/src/icecube/daq/domcal/HVHistogramGrapher.java	Mon Sep 19 11:55:15 2005
@@ -20,6 +20,7 @@
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.ParserConfigurationException;
+import javax.imageio.ImageIO;
 import java.io.*;
 import java.util.Hashtable;
 import java.util.Iterator;
@@ -37,15 +38,30 @@
 
     public static final double EC = 1.6022e-19;
 
-    public static short[] VOLTAGES = {1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900};
+    public static short[] VOLTAGES = {1020,
+                                      1100,
+                                      1180,
+                                      1260,
+                                      1340,
+                                      1420,
+                                      1500,
+                                      1580,
+                                      1660,
+                                      1740,
+                                      1820,
+                                      1900};
 
     private String inDir;
     private String outDir;
     private String htmlRoot;
     private Properties calProps;
 
+    public static final double SCALE_FACTOR = 5.0;
+
     public static void main( String[] args) {
         try {
+            //Disable X support while app is running
+            System.setProperty("java.awt.headless", "true");
             String inDir = args[0];
             String outDir = args[1];
             String htmlRoot = args[2];
@@ -124,7 +140,18 @@
         doc.addBr();
         sumDoc.add("Gain vs HV");
         sumDoc.addBr();
-        
+
+        Connection jdbc = null;
+        try {
+            String driver = calProps.getProperty("icecube.daq.domcal.db.driver", "com.mysql.jdbc.Driver");
+            Class.forName(driver);
+            String url = calProps.getProperty("icecube.daq.domcal.db.url", "jdbc:mysql://localhost/fat");
+            String user = calProps.getProperty("icecube.daq.domcal.db.user", "dfl");
+            String passwd = calProps.getProperty("icecube.daq.domcal.db.passwd", "(D0Mus)");
+            jdbc = DriverManager.getConnection(url, user, passwd);
+        } catch (Exception e) {
+            System.out.println("Error establishing DOM name lookup");
+        }
         for (Iterator it = histTable.keySet().iterator(); it.hasNext();) {
             String domId = (String)it.next();
             Hashtable hTable = (Hashtable)histTable.get(domId);
@@ -132,12 +159,6 @@
             String id = st.nextToken();
             if (calProps != null) {
                 try {
-                    String driver = calProps.getProperty("icecube.daq.domcal.db.driver", "com.mysql.jdbc.Driver");
-                    Class.forName(driver);
-                    String url = calProps.getProperty("icecube.daq.domcal.db.url", "jdbc:mysql://localhost/fat");
-                    String user = calProps.getProperty("icecube.daq.domcal.db.user", "dfl");
-                    String passwd = calProps.getProperty("icecube.daq.domcal.db.passwd", "(D0Mus)");
-                    Connection jdbc = DriverManager.getConnection(url, user, passwd);
                     Statement stmt = jdbc.createStatement();
                     String sql = "select * from doms where mbid='" + id + "';";
                     ResultSet s = stmt.executeQuery(sql);
@@ -205,21 +226,18 @@
     }
 
     private String graphHistogram(HVHistogram histo, String domId) throws IOException {
-        String outName = domId + histo.getVoltage() + ".jpeg";
+        String outName = domId + histo.getVoltage() + ".png";
         String outFile = outDir + (outDir.endsWith("/") ? "" : "/") + outName;
         String outHttp = htmlRoot + (htmlRoot.endsWith("/") ? "" : "/") + outName;
         BufferedImage bi = createImage(histo);
-        JPEGImageEncoder jout = JPEGCodec.createJPEGEncoder(new FileOutputStream(outFile));
-        JPEGEncodeParam ep = jout.getDefaultJPEGEncodeParam(bi);
-        ep.setQuality(2, false);
-        jout.setJPEGEncodeParam(ep);
-        jout.encode(bi);
+        File outf = new File(outFile);
+        ImageIO.write(bi, "png", outf);
         System.out.println(outFile);
         return outHttp;
     }
 
     private String graphHV(Hashtable histos, String domId) throws IOException {
-        String outName = domId + "_hv" + ".jpeg";
+        String outName = domId + "_hv" + ".png";
         String outFile = outDir + (outDir.endsWith("/") ? "" : "/") + outName;
         String outHttp = htmlRoot + (htmlRoot.endsWith("/") ? "" : "/") + outName;
         BufferedImage bi = createSummaryImage(histos);
@@ -250,7 +268,7 @@
         g.drawLine(50, 0, 50, 249);
 
         //draw X tick marks
-        int[] xTicks = {1200, 1400, 1600, 1800, 2000};
+        int[] xTicks = {1100, 1300, 1500, 1700, 1900};
         for (int i = 0; i < xTicks.length; i ++) {
             int x = getXPixel(xTicks[i]);
             g.drawLine(x, 247, x, 251);
@@ -338,7 +356,7 @@
     private int getXPixel(int val) {
         double logVal = Math.log(val);
         double staticHVal = Math.log(1900);
-        double staticLVal = Math.log(1100);
+        double staticLVal = Math.log(1000);
 
         return 50 + (int)(200 * ((logVal - staticLVal)/(staticHVal - staticLVal)));
     }
@@ -371,7 +389,7 @@
         g.setColor(Color.BLUE);
         //fill histogram
         for (int i = 0; i < 250; i++) {
-            float cnt = yData[i];
+            double cnt = yData[i] / SCALE_FACTOR;    //scale cnt to pixel resolution by 4.0 factor -- allow ~1000/bin
             if (cnt > 249) cnt = 249;
             else if (cnt < 0) cnt = 0;
             g.drawLine(50 + i, 249, 50 + i, 249 - (int)cnt);
@@ -387,7 +405,8 @@
         int fitPrevious = -1;
         for (int i = 0; i < 250; i++) {
             float x = xData[i];
-            int fitY = (int)((fp[0]*Math.exp(-1*fp[1]*x))+(fp[2]*Math.exp(-1*Math.pow((double)(x - fp[3]), 2)*fp[4])));
+            int fitY = (int)(((fp[0]*Math.exp(-1*fp[1]*x))+(fp[2]*
+                                      Math.exp(-1*Math.pow((double)(x - fp[3]), 2)*fp[4])))/SCALE_FACTOR);
             if (fitY < 1) fitY = 1;
             else if (fitY > 247) fitY = 247;
             g.drawLine(50 + i, 249-fitY-1, 50 + i, 249-fitY+1);
@@ -409,7 +428,8 @@
         //create Y labels
         int charHeight = g.getFontMetrics().getHeight();
         for (int i = 0; i < 5; i++) {
-            g.drawString("" + 50*i, 25 - (g.getFontMetrics().stringWidth("" + 50*i))/2, 249 - 50*i + charHeight/2);
+            g.drawString("" + (int)(50*i*SCALE_FACTOR), 25 -
+                    (g.getFontMetrics().stringWidth("" + (int)(50*i*SCALE_FACTOR)))/2, 249 - 50*i + charHeight/2);
         }
         //create X labels
         for (int i = 0; i < 5; i++) {
Index: dom-cal/src/icecube/daq/domcal/IDMap.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/IDMap.java:1.1
--- /dev/null	Thu Oct  6 09:02:10 2005
+++ dom-cal/src/icecube/daq/domcal/IDMap.java	Fri Oct 29 14:05:01 2004
@@ -0,0 +1,82 @@
+package icecube.daq.domcal;
+
+import icecube.daq.db.domprodtest.DOMProdTestUtil;
+
+import java.util.HashMap;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+/**
+ * Mapping of IDs to names.
+ */
+class IDMap
+{
+    /** mapping of name to id. */
+    private HashMap map;
+
+    /**
+     * Load a list of ID/name mappings from the database.
+     *
+     * @param stmt SQL statement
+     * @param tblName database table name
+     * @param idCol name of column holding IDs
+     * @param nameCol name of column holding names
+     *
+     * @throws SQLException if there is a problem reading the ID/name pairs
+     */
+    IDMap(Statement stmt, String tblName, String idCol, String nameCol)
+        throws SQLException
+    {
+        final String qStr = "select " + idCol + "," + nameCol + " from " +
+            tblName + " order by " + idCol;
+
+        ResultSet rs = stmt.executeQuery(qStr);
+
+        map = new HashMap();
+
+        SQLException resultEx = null;
+        while (resultEx == null) {
+            try {
+                if (!rs.next()) {
+                    break;
+                } else {
+                    final int id = rs.getInt(1);
+                    final String name = rs.getString(2);
+
+                    map.put(name, new Integer(id));
+                }
+            } catch (SQLException se) {
+                resultEx = se;
+            }
+        }
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+
+        if (resultEx != null) {
+            throw resultEx;
+        }
+    }
+
+    /**
+     * Get the ID for the specified name.
+     *
+     * @param name name being looked up
+     *
+     * @return associated ID
+     */
+    public int getId(String name)
+    {
+        Integer iObj = (Integer) map.get(name);
+        if (iObj == null) {
+            return DOMProdTestUtil.ILLEGAL_ID;
+        }
+
+        return iObj.intValue();
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/ModelType.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/ModelType.java:1.1
--- /dev/null	Thu Oct  6 09:02:10 2005
+++ dom-cal/src/icecube/daq/domcal/ModelType.java	Fri Oct 29 14:05:01 2004
@@ -0,0 +1,24 @@
+package icecube.daq.domcal;
+
+import java.sql.SQLException;
+import java.sql.Statement;
+
+/**
+ * Cached data from the DOMCal_Model table.
+ */
+class ModelType
+    extends IDMap
+{
+    /**
+     * Load the DOMCal_Model table.
+     *
+     * @param stmt SQL statement
+     *
+     * @throws SQLException if there is a problem reading the table
+     */
+    ModelType(Statement stmt)
+        throws SQLException
+    {
+        super(stmt, "DOMCal_Model", "dc_model_id", "name");
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/ParamType.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/ParamType.java:1.1
--- /dev/null	Thu Oct  6 09:02:10 2005
+++ dom-cal/src/icecube/daq/domcal/ParamType.java	Fri Oct 29 14:05:01 2004
@@ -0,0 +1,24 @@
+package icecube.daq.domcal;
+
+import java.sql.SQLException;
+import java.sql.Statement;
+
+/**
+ * Cached data from the DOMCal_Param table.
+ */
+class ParamType
+    extends IDMap
+{
+    /**
+     * Load the DOMCal_Param table.
+     *
+     * @param stmt SQL statement
+     *
+     * @throws SQLException if there is a problem reading the table
+     */
+    ParamType(Statement stmt)
+        throws SQLException
+    {
+        super(stmt, "DOMCal_Param", "dc_param_id", "name");
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/package.html
diff -u /dev/null dom-cal/src/icecube/daq/domcal/package.html:1.1
--- /dev/null	Thu Oct  6 09:02:10 2005
+++ dom-cal/src/icecube/daq/domcal/package.html	Fri Oct 29 14:05:01 2004
@@ -0,0 +1,35 @@
+<html>
+<body>
+<p>This package allows programmatic access from Java
+to the DOM calibration information.  The class reads
+<code>.xdc</code> files which contain DOM calibration
+data in an XML document and place the information
+into a Java class.  All the programmer needs to do is
+construct an instance of the <code>Calibrator</code>
+class with either a URL or an InputStream pointing to
+the XML object.</p>
+<p>The primary utility of this class is to transform
+the raw ATWD waveform data into volt units.  This
+can be accomplished one of two ways - either:
+<ul>
+    <li>Through explicit calls to the
+    <code>getATWDFitParam(int ch, int bin, String param)</code>
+    member function.  This provides the programmer with
+    the actual fit information.  Note that the fit
+    parameters may vary depending on what the fit model
+    is; currently only the 'linear' fit model is used.</li>
+    <li>Through the high-level member function
+    <code>calibrateATWD</code> which takes a raw ATWD
+    buffer array and returns a calibrated buffer array.
+    Please note that the DC bias is not subtracted off
+    in this function.  The inverse function
+    <code>decalibrateATWD</code> performs the inverse
+    calibration, taking volts back into counts.</li>
+</ul>
+</p>
+<p>The other calibrations tracked by this class are the
+front-end pulser calibration, the amplifier gains, and the
+ATWD sampling frequency.</p>
+</body>
+</html>
+
Index: dom-cal/src/icecube/daq/domcal/test/CalibratorDBTest.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/test/CalibratorDBTest.java:1.6
--- /dev/null	Thu Oct  6 09:02:10 2005
+++ dom-cal/src/icecube/daq/domcal/test/CalibratorDBTest.java	Tue May 24 07:54:00 2005
@@ -0,0 +1,621 @@
+package icecube.daq.domcal.test;
+
+import icecube.daq.db.domprodtest.DOMProdTestException;
+import icecube.daq.db.domprodtest.Laboratory;
+import icecube.daq.db.domprodtest.ProductType;
+
+import icecube.daq.db.domprodtest.test.FakeUtil;
+import icecube.daq.db.domprodtest.test.MockStatement;
+
+import icecube.daq.domcal.Calibrator;
+import icecube.daq.domcal.CalibratorComparator;
+import icecube.daq.domcal.CalibratorDB;
+import icecube.daq.domcal.DOMCalibrationException;
+import icecube.daq.domcal.HVHistogram;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.ByteArrayInputStream;
+
+import java.sql.Date;
+import java.sql.SQLException;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.apache.log4j.BasicConfigurator;
+import org.apache.log4j.Level;
+import org.apache.log4j.Logger;
+
+/**
+ *  Calibrator database tests.
+ */
+public class CalibratorDBTest
+    extends TestCase
+{
+    public CalibratorDBTest(String name)
+    {
+        super(name);
+    }
+
+    private static final void fillATWDData(double[][][] atwdData, int c, int b)
+    {
+        atwdData[c][b][MockSQLUtil.SLOPE_INDEX] =
+            (((double) c * (double) atwdData[c].length) +
+                (double) b) + 0.123;
+        atwdData[c][b][MockSQLUtil.INTERCEPT_INDEX] =
+            (((double) c * (double) atwdData[c].length) +
+                (double) b) + 0.456;
+        atwdData[c][b][MockSQLUtil.REGRESSION_INDEX] =
+            (((double) c * (double) atwdData[c].length) +
+                (double) b) + 0.789;
+    }
+
+    protected void setUp()
+        throws Exception
+    {
+        super.setUp();
+
+        // Set up the logging infrastructure
+        BasicConfigurator.configure(new MockAppender(Level.INFO));
+
+	ProductType.clearStatic();
+        MockCalDB.clearStatic();
+        MockCalDB.initStatic();
+    }
+
+    public static TestSuite suite()
+    {
+        return new TestSuite(CalibratorDBTest.class);
+    }
+
+    protected void tearDown()
+        throws Exception
+    {
+        MockCalDB.verifyStatic();
+
+        super.tearDown();
+    }
+
+    public void testSave()
+        throws DOMCalibrationException, DOMProdTestException, IOException,
+               SQLException
+    {
+        final Date date = Date.valueOf("2004-03-02");
+        final String mbHardSerial = "0123456789ab";
+        final double temp = -40.5;
+
+        FakeCalXML xml = new FakeCalXML(date, mbHardSerial, temp);
+
+        final short[] dacs = new short[] {
+             0,  1,  2,  3,  4,  5,  6,  7, 8,  9, 10, 11, 12, 13, 14, 15,
+        };
+        final short[] adcs = new short[] {
+             0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,
+            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
+        };
+
+        xml.setDACs(dacs);
+        xml.setADCs(adcs);
+
+        final double pulserSlope = 1.23;
+        final double pulserIntercept = 4.56;
+        final double pulserRegression = 7.89;
+        xml.setPulser(pulserSlope, pulserIntercept, pulserRegression);
+
+        final double[][][] atwdData = new double[8][128][3];
+        for (int c = 0; c < atwdData.length; c++) {
+            for (int b = 0; b < atwdData[c].length; b++) {
+                fillATWDData(atwdData, c, b);
+                xml.setATWD(c, b, atwdData[c][b][MockSQLUtil.SLOPE_INDEX],
+                            atwdData[c][b][MockSQLUtil.INTERCEPT_INDEX],
+                            atwdData[c][b][MockSQLUtil.REGRESSION_INDEX]);
+            }
+        }
+
+        final double[] ampGain = new double[3];
+        final double[] ampError = new double[3];
+        for (int i = 0; i < 3; i++) {
+            ampGain[i] = (double) i * 100.0;
+            ampError[i] = 100.0 - (double) i;
+
+            xml.setAmplifier(i, ampGain[i], ampError[i]);
+        }
+
+        final double[][] freqData = {
+            { 1.0, 2.0, 3.0 },
+            { 3.0, 5.0, 7.0 }
+        };
+        for (int i = 0; i < freqData.length; i++) {
+            xml.setATWDFrequency(i, freqData[i][0], freqData[i][1],
+                                 freqData[i][2]);
+        }
+
+        final double hvGainSlope = 12.34;
+        final double hvGainIntercept = 56.78;
+        final double hvGainRegression = 90.12;
+        xml.setHvGain(hvGainSlope, hvGainIntercept, hvGainRegression);
+
+        HVHistogram[] histo = new HVHistogram[2];
+        for (int i = 0; i < histo.length; i++) {
+            float[] paramVals = new float[] {
+                (float) i + 12.3456f,
+                (float) i + 6.78901f,
+                (float) i + 6.54321f,
+                (float) i + 1.23456f,
+                (float) i + 65.4321f,
+            };
+
+            float[] charge = new float[250];
+            float[] count = new float[250];
+            for (int j = 0; j < 250; j++) {
+                charge[i] = (float) j * 0.016f;
+                count[i] = (float) (j % 16) + (i == 0 ? 13.0f : 17.0f);
+            }
+
+            histo[i] = new HVHistogram((short) (1400 + (i * 100)), paramVals,
+                                       charge, count, (i == 0),
+                                       (float) i + 1.23456f,
+                                       1234.0f + ((float) i * 2.3456f),
+                                       (i == 1));
+        };
+        xml.setHvHistograms(histo);
+
+        final String xmlStr = xml.toString();
+
+        ByteArrayInputStream strIn =
+            new ByteArrayInputStream(xmlStr.getBytes());
+
+        Calibrator cal = new Calibrator(strIn);
+
+        MockStatement stmt = new MockStatement("SaveStmt");
+
+        Laboratory lab = FakeUtil.fakeLab(stmt, 10, 1, 100000);
+
+        if (!ProductType.isInitialized()) {
+            MockSQLUtil.addProductTypeSQL(stmt, MockSQLUtil.DOM_TYPE_ID,
+                                          MockSQLUtil.MAINBD_TYPE_ID);
+        }
+
+        final String mainbdTagSerial = "V01 23";
+        final String domTagSerial = "XX401P0123";
+
+        MockSQLUtil.addProductSQL(stmt, MockSQLUtil.MAINBD_TYPE_ID,
+                                  mbHardSerial, MockSQLUtil.MAINBD_ID,
+                                  mainbdTagSerial, MockSQLUtil.DOM_TYPE_ID,
+                                  MockSQLUtil.DOM_ID, domTagSerial);
+
+        final int domcalId = lab.getMinimumId() + 10;
+
+        MockSQLUtil.addMainInsertSQL(stmt, lab, MockSQLUtil.DOM_ID, domcalId,
+                                     date, temp);
+        MockSQLUtil.addChanValInsertSQL(stmt, "ADC", domcalId, adcs);
+        MockSQLUtil.addChanValInsertSQL(stmt, "DAC", domcalId, dacs);
+
+        MockSQLUtil.addModelTypeSQL(stmt);
+        MockSQLUtil.addParamTypeSQL(stmt);
+
+        MockSQLUtil.addPulserInsertSQL(stmt, domcalId, pulserSlope,
+                                       pulserIntercept, pulserRegression);
+
+        MockSQLUtil.addATWDInsertSQL(stmt, domcalId, atwdData);
+        MockSQLUtil.addAmpGainInsertSQL(stmt, domcalId, ampGain, ampError);
+        MockSQLUtil.addATWDFreqInsertSQL(stmt, domcalId, freqData);
+        MockSQLUtil.addHvGainInsertSQL(stmt, domcalId,
+                                       hvGainSlope, hvGainIntercept,
+                                       hvGainRegression);
+        MockSQLUtil.addHvHistoInsertSQL(stmt, domcalId, histo);
+
+        MockCalDB calDB = new MockCalDB();
+        calDB.addActualStatement(stmt);
+
+        calDB.setLaboratory(lab);
+        calDB.save(cal);
+    }
+
+    public void testSaveFile()
+        throws DOMCalibrationException, DOMProdTestException, IOException,
+               SQLException
+    {
+        final Date date = Date.valueOf("2004-03-02");
+        final String mbHardSerial = "0123456789ab";
+        final double temp = -40.5;
+
+        FakeCalXML xml = new FakeCalXML(date, mbHardSerial, temp);
+
+        final short[] dacs = new short[] {
+             0,  1,  2,  3,  4,  5,  6,  7, 8,  9, 10, 11, 12, 13, 14, 15,
+        };
+        final short[] adcs = new short[] {
+             0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,
+            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
+        };
+
+        xml.setDACs(dacs);
+        xml.setADCs(adcs);
+
+        final double pulserSlope = 1.23;
+        final double pulserIntercept = 4.56;
+        final double pulserRegression = 7.89;
+        xml.setPulser(pulserSlope, pulserIntercept, pulserRegression);
+
+        final double[][][] atwdData = new double[8][128][3];
+        for (int c = 0; c < atwdData.length; c++) {
+            for (int b = 0; b < atwdData[c].length; b++) {
+                fillATWDData(atwdData, c, b);
+                xml.setATWD(c, b, atwdData[c][b][MockSQLUtil.SLOPE_INDEX],
+                            atwdData[c][b][MockSQLUtil.INTERCEPT_INDEX],
+                            atwdData[c][b][MockSQLUtil.REGRESSION_INDEX]);
+            }
+        }
+
+        final double[] ampGain = new double[3];
+        final double[] ampError = new double[3];
+        for (int i = 0; i < 3; i++) {
+            ampGain[i] = (double) i * 100.0;
+            ampError[i] = 100.0 - (double) i;
+
+            xml.setAmplifier(i, ampGain[i], ampError[i]);
+        }
+
+        final double[][] freqData = {
+            { 1.0, 2.0, 3.0 },
+            { 3.0, 5.0, 7.0 }
+        };
+        for (int i = 0; i < freqData.length; i++) {
+            xml.setATWDFrequency(i, freqData[i][0], freqData[i][1],
+                                 freqData[i][2]);
+        }
+
+        final double hvGainSlope = 12.34;
+        final double hvGainIntercept = 56.78;
+        final double hvGainRegression = 90.12;
+        xml.setHvGain(hvGainSlope, hvGainIntercept, hvGainRegression);
+
+        HVHistogram[] histo = new HVHistogram[2];
+        for (int i = 0; i < histo.length; i++) {
+            float[] paramVals = new float[] {
+                (float) i + 12.3456f,
+                (float) i + 6.78901f,
+                (float) i + 6.54321f,
+                (float) i + 1.23456f,
+                (float) i + 65.4321f,
+            };
+
+            float[] charge = new float[250];
+            float[] count = new float[250];
+            for (int j = 0; j < 250; j++) {
+                charge[i] = (float) j * 0.016f;
+                count[i] = (float) (j % 16) + (i == 0 ? 13.0f : 17.0f);
+            }
+
+            histo[i] = new HVHistogram((short) (1400 + (i * 100)), paramVals,
+                                       charge, count, (i == 0),
+                                       (float) i + 1.23456f,
+                                       1234.0f + ((float) i * 2.3456f),
+                                       (i == 1));
+        };
+        xml.setHvHistograms(histo);
+
+        final String mainbdTagSerial = "V01 23";
+        final String domTagSerial = "XX401P0123";
+
+        MockCalDB calDB = new MockCalDB();
+
+        MockStatement stmt;
+
+        stmt = new MockStatement("LoadStmt");
+        calDB.addActualStatement(stmt);
+
+        Laboratory lab = FakeUtil.fakeLab(stmt, 10, 1, 100000);
+        calDB.setLaboratory(lab);
+
+        if (!ProductType.isInitialized()) {
+            MockSQLUtil.addProductTypeSQL(stmt, MockSQLUtil.DOM_TYPE_ID,
+                                          MockSQLUtil.MAINBD_TYPE_ID);
+        }
+
+        MockSQLUtil.addProductSQL(stmt, MockSQLUtil.MAINBD_TYPE_ID,
+                                  mbHardSerial, MockSQLUtil.MAINBD_ID,
+                                  mainbdTagSerial, MockSQLUtil.DOM_TYPE_ID,
+                                  MockSQLUtil.DOM_ID, domTagSerial);
+
+        MockSQLUtil.addMainSQL(stmt, MockSQLUtil.DOM_ID, date, temp,
+                               Integer.MIN_VALUE);
+
+        stmt = new MockStatement("SaveStmt");
+        calDB.addActualStatement(stmt);
+
+        MockSQLUtil.addProductSQL(stmt, MockSQLUtil.MAINBD_TYPE_ID,
+                                  mbHardSerial, MockSQLUtil.MAINBD_ID,
+                                  mainbdTagSerial, MockSQLUtil.DOM_TYPE_ID,
+                                  MockSQLUtil.DOM_ID, domTagSerial);
+
+        final int domcalId = lab.getMinimumId() + 10;
+
+        MockSQLUtil.addMainInsertSQL(stmt, lab, MockSQLUtil.DOM_ID, domcalId,
+                                     date, temp);
+        MockSQLUtil.addChanValInsertSQL(stmt, "ADC", domcalId, adcs);
+        MockSQLUtil.addChanValInsertSQL(stmt, "DAC", domcalId, dacs);
+
+        MockSQLUtil.addModelTypeSQL(stmt);
+        MockSQLUtil.addParamTypeSQL(stmt);
+
+        MockSQLUtil.addPulserInsertSQL(stmt, domcalId, pulserSlope,
+                                       pulserIntercept, pulserRegression);
+
+        MockSQLUtil.addATWDInsertSQL(stmt, domcalId, atwdData);
+        MockSQLUtil.addAmpGainInsertSQL(stmt, domcalId, ampGain, ampError);
+        MockSQLUtil.addATWDFreqInsertSQL(stmt, domcalId, freqData);
+        MockSQLUtil.addHvGainInsertSQL(stmt, domcalId,
+                                       hvGainSlope, hvGainIntercept,
+                                       hvGainRegression);
+        MockSQLUtil.addHvHistoInsertSQL(stmt, domcalId, histo);
+
+        final String xmlStr = xml.toString();
+
+        File tmpFile = File.createTempFile("tst", ".xml");
+        tmpFile.deleteOnExit();
+
+        FileOutputStream out = new FileOutputStream(tmpFile);
+        out.write(xml.toString().getBytes());
+        out.close();
+
+        Logger logger = Logger.getLogger(getClass());
+
+        CalibratorDB.save(tmpFile.getAbsolutePath(), logger, calDB, true); 
+    }
+
+    public void testLoad()
+        throws DOMCalibrationException, DOMProdTestException, IOException,
+               SQLException
+    {
+        final Date date = Date.valueOf("2004-03-02");
+        final String mbHardSerial = "13579bdf048c";
+        final double temp = 12.34;
+
+        MockStatement stmt = new MockStatement("LoadStmt");
+
+        Laboratory lab = FakeUtil.fakeLab(stmt, 10, 1, 100000);
+
+        if (!ProductType.isInitialized()) {
+            MockSQLUtil.addProductTypeSQL(stmt, MockSQLUtil.DOM_TYPE_ID,
+                                          MockSQLUtil.MAINBD_TYPE_ID);
+        }
+
+        final String mainbdTagSerial = "V01 23";
+        final String domTagSerial = "XX401P0123";
+
+        MockSQLUtil.addProductSQL(stmt, MockSQLUtil.MAINBD_TYPE_ID,
+                                  mbHardSerial, MockSQLUtil.MAINBD_ID,
+                                  mainbdTagSerial, MockSQLUtil.DOM_TYPE_ID,
+                                  MockSQLUtil.DOM_ID, domTagSerial);
+
+        final int domcalId = lab.getMinimumId() + 10;
+
+        MockSQLUtil.addMainSQL(stmt, MockSQLUtil.DOM_ID, date, temp, domcalId);
+
+        final short[] dacs = new short[] {
+             0,  1,  2,  3,  4,  5,  6,  7, 8,  9, 10, 11, 12, 13, 14, 15,
+        };
+        final short[] adcs = new short[] {
+             0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,
+            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
+        };
+
+        MockSQLUtil.addChanValSQL(stmt, "ADC", domcalId, adcs);
+        MockSQLUtil.addChanValSQL(stmt, "DAC", domcalId, dacs);
+
+        final double pulserSlope = 1.23;
+        final double pulserIntercept = 4.56;
+        final double pulserRegression = 7.89;
+
+        MockSQLUtil.addPulserSQL(stmt, domcalId, pulserSlope,
+                                 pulserIntercept, pulserRegression);
+
+        final double[][][] atwdData = new double[8][128][3];
+        for (int c = 0; c < atwdData.length; c++) {
+            for (int b = 0; b < atwdData[c].length; b++) {
+                fillATWDData(atwdData, c, b);
+            }
+        }
+
+        MockSQLUtil.addATWDSQL(stmt, domcalId, atwdData);
+
+        final double[] ampGain = new double[3];
+        final double[] ampError = new double[3];
+        for (int i = 0; i < 3; i++) {
+            ampGain[i] = (double) i * 100.0;
+            ampError[i] = 100.0 - (double) i;
+        }
+
+        MockSQLUtil.addAmpGainSQL(stmt, domcalId, ampGain, ampError);
+
+        final double[][] freqData = {
+            { 1.0, 2.0, 3.0 },
+            { 3.0, 5.0, 7.0 }
+        };
+
+        MockSQLUtil.addATWDFreqSQL(stmt, domcalId, freqData);
+
+        final double hvGainSlope = 12.34;
+        final double hvGainIntercept = 56.78;
+        final double hvGainRegression = 90.12;
+
+        MockSQLUtil.addHvGainSQL(stmt, domcalId, hvGainSlope, hvGainIntercept,
+                                 hvGainRegression);
+
+        HVHistogram[] histo = new HVHistogram[2];
+        for (int i = 0; i < histo.length; i++) {
+            float[] paramVals = new float[] {
+                (float) i + 12.3456f,
+                (float) i + 6.78901f,
+                (float) i + 6.54321f,
+                (float) i + 1.23456f,
+                (float) i + 65.4321f,
+            };
+
+            float[] charge = new float[250];
+            float[] count = new float[250];
+            for (int j = 0; j < 250; j++) {
+                charge[i] = (float) j * 0.016f;
+                count[i] = (float) (j % 16) + (i == 0 ? 13.0f : 17.0f);
+            }
+
+            histo[i] = new HVHistogram((short) (1400 + (i * 100)), paramVals,
+                                       charge, count, (i == 0),
+                                       (float) i + 1.23456f,
+                                       1234.0f + ((float) i * 2.3456f),
+                                       (i == 1));
+        };
+
+        MockSQLUtil.addHvHistoSQL(stmt, domcalId, histo);
+
+        MockCalDB calDB = new MockCalDB();
+        calDB.addActualStatement(stmt);
+
+        calDB.setLaboratory(lab);
+
+        Calibrator cal = calDB.load(mbHardSerial, date, temp);
+    }
+
+    public void testCompare()
+        throws DOMCalibrationException, DOMProdTestException, IOException,
+               SQLException
+    {
+        final Date date = Date.valueOf("2004-03-02");
+        final String mbHardSerial = "0123456789ab";
+        final double temp = -40.5;
+
+        FakeCalXML xml = new FakeCalXML(date, mbHardSerial, temp);
+
+        final short[] dacs = new short[] {
+             0,  1,  2,  3,  4,  5,  6,  7, 8,  9, 10, 11, 12, 13, 14, 15,
+        };
+        final short[] adcs = new short[] {
+             0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,
+            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
+        };
+
+        xml.setDACs(dacs);
+        xml.setADCs(adcs);
+
+        final double pulserSlope = 1.23;
+        final double pulserIntercept = 4.56;
+        final double pulserRegression = 7.89;
+        xml.setPulser(pulserSlope, pulserIntercept, pulserRegression);
+
+        final double[][][] atwdData = new double[8][128][3];
+        for (int c = 0; c < atwdData.length; c++) {
+            for (int b = 0; b < atwdData[c].length; b++) {
+                fillATWDData(atwdData, c, b);
+                xml.setATWD(c, b, atwdData[c][b][MockSQLUtil.SLOPE_INDEX],
+                            atwdData[c][b][MockSQLUtil.INTERCEPT_INDEX],
+                            atwdData[c][b][MockSQLUtil.REGRESSION_INDEX]);
+            }
+        }
+
+        final double[] ampGain = new double[3];
+        final double[] ampError = new double[3];
+        for (int i = 0; i < 3; i++) {
+            ampGain[i] = (double) i * 100.0;
+            ampError[i] = 100.0 - (double) i;
+
+            xml.setAmplifier(i, ampGain[i], ampError[i]);
+        }
+
+        final double[][] freqData = {
+            { 1.0, 2.0, 3.0 },
+            { 3.0, 5.0, 7.0 }
+        };
+        for (int i = 0; i < freqData.length; i++) {
+            xml.setATWDFrequency(i, freqData[i][0], freqData[i][1],
+                                 freqData[i][2]);
+        }
+
+        final double hvGainSlope = 12.34;
+        final double hvGainIntercept = 56.78;
+        final double hvGainRegression = 90.12;
+        xml.setHvGain(hvGainSlope, hvGainIntercept, hvGainRegression);
+
+        HVHistogram[] histo = new HVHistogram[2];
+        for (int i = 0; i < histo.length; i++) {
+            float[] paramVals = new float[] {
+                (float) i + 12.3456f,
+                (float) i + 6.78901f,
+                (float) i + 6.54321f,
+                (float) i + 1.23456f,
+                (float) i + 65.4321f,
+            };
+
+            float[] charge = new float[250];
+            float[] count = new float[250];
+            for (int j = 0; j < 250; j++) {
+                charge[i] = (float) j * 0.016f;
+                count[i] = (float) (j % 16) + (i == 0 ? 13.0f : 17.0f);
+            }
+
+            histo[i] = new HVHistogram((short) (1400 + (i * 100)), paramVals,
+                                       charge, count, (i == 0),
+                                       (float) i + 1.23456f,
+                                       1234.0f + ((float) i * 2.3456f),
+                                       (i == 1));
+        };
+        xml.setHvHistograms(histo);
+
+        final String xmlStr = xml.toString();
+
+        ByteArrayInputStream strIn =
+            new ByteArrayInputStream(xmlStr.getBytes());
+
+        Calibrator fiCal = new Calibrator(strIn);
+
+        final String mainbdTagSerial = "V01 23";
+        final String domTagSerial = "XX401P0123";
+
+        MockStatement stmt = new MockStatement("LoadStmt");
+
+        Laboratory lab = FakeUtil.fakeLab(stmt, 10, 1, 100000);
+
+        final int domcalId = lab.getMinimumId() + 10;
+
+        if (!ProductType.isInitialized()) {
+            MockSQLUtil.addProductTypeSQL(stmt, MockSQLUtil.DOM_TYPE_ID,
+                                          MockSQLUtil.MAINBD_TYPE_ID);
+        }
+
+        MockSQLUtil.addProductSQL(stmt, MockSQLUtil.MAINBD_TYPE_ID,
+                                  mbHardSerial, MockSQLUtil.MAINBD_ID,
+                                  mainbdTagSerial, MockSQLUtil.DOM_TYPE_ID,
+                                  MockSQLUtil.DOM_ID, domTagSerial);
+
+        MockSQLUtil.addMainSQL(stmt, MockSQLUtil.DOM_ID, date, temp, domcalId);
+
+        MockSQLUtil.addChanValSQL(stmt, "ADC", domcalId, adcs);
+        MockSQLUtil.addChanValSQL(stmt, "DAC", domcalId, dacs);
+        MockSQLUtil.addPulserSQL(stmt, domcalId, pulserSlope,
+                                 pulserIntercept, pulserRegression);
+        MockSQLUtil.addATWDSQL(stmt, domcalId, atwdData);
+        MockSQLUtil.addAmpGainSQL(stmt, domcalId, ampGain, ampError);
+        MockSQLUtil.addATWDFreqSQL(stmt, domcalId, freqData);
+        MockSQLUtil.addHvGainSQL(stmt, domcalId, hvGainSlope, hvGainIntercept,
+                                 hvGainRegression);
+        MockSQLUtil.addHvHistoSQL(stmt, domcalId, histo);
+
+        MockCalDB calDB = new MockCalDB();
+        calDB.addActualStatement(stmt);
+
+        calDB.setLaboratory(lab);
+
+        Calibrator dbCal = calDB.load(mbHardSerial, date, temp);
+
+        assertTrue("Loaded calibrator doesn't match DB calibrator",
+                   CalibratorComparator.compare(fiCal, dbCal, true) == 0);
+    }
+
+    public static void main(String args[])
+    {
+        junit.textui.TestRunner.run(suite());
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/test/CalibratorTest.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/test/CalibratorTest.java:1.1
--- /dev/null	Thu Oct  6 09:02:10 2005
+++ dom-cal/src/icecube/daq/domcal/test/CalibratorTest.java	Fri Oct 29 14:05:01 2004
@@ -0,0 +1,104 @@
+package icecube.daq.domcal.test;
+
+import java.io.FileInputStream;
+import java.io.InputStream;
+
+import java.util.Calendar;
+import java.util.GregorianCalendar;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.apache.log4j.BasicConfigurator;
+
+import icecube.daq.domcal.Calibrator;
+
+/**
+ *  Calibrator test case.
+ *
+ *  @author kael
+ *
+ */
+public class CalibratorTest extends TestCase {
+
+    private Calibrator cal;
+    private int dacs[] = {
+        850, 2097, 3000, 2048, 850, 2097, 3000, 1925,
+          0,   0,     0,    0,   0,    0,    0,    0
+    };
+    // 1st 8 ADC values
+    private int adcs[] = {
+         21, 988, 863, 509,  90,  36,  88, 130
+    };
+
+    /**
+     * The test entry point
+     * @return TestSuite object defining all tests to be run
+     */
+    public static TestSuite suite() {
+        /* Setup the logging infrastructure */
+        BasicConfigurator.configure();
+
+        return new TestSuite(CalibratorTest.class);
+    }
+
+    protected void setUp() throws Exception {
+
+        super.setUp();
+
+        try {
+            InputStream is =
+                new FileInputStream("resources/test/f771bb4dce28.xml");
+            cal = new Calibrator(is);
+            is.close();
+        } catch (Exception ex) {
+            throw new Exception(ex);
+        }
+
+    }
+
+    /**
+     * Test that DOM id has been properly extracted
+     */
+    public void testDOMId() {
+        assertEquals("f771bb4dce28", cal.getDOMId());
+    }
+
+    public void testDate() {
+        Calendar ref = new GregorianCalendar(2004, Calendar.JUNE, 30);
+        // DateFormat df = DateFormat.getDateTimeInstance();
+        assertEquals(ref, cal.getCalendar());
+    }
+
+    /**
+     * Test that temperature tag has been properly extracted
+     */
+    public void testTemperature() {
+        assertEquals(27, cal.getTemperature(),1.0);
+    }
+
+    public void testADCs() {
+        for (int i = 0; i < 8; i++) {
+            assertEquals(adcs[i], cal.getADC(i));
+        }
+    }
+
+    public void testDACs() {
+        for (int i = 0; i < dacs.length; i++) {
+            assertEquals(dacs[i], cal.getDAC(i));
+        }
+    }
+
+    public void testATWDFit() {
+        // spot check some of the ATWD fits
+        assertEquals(cal.getATWDFitParam(1, 24, "slope"), -0.002002, 1.0E-06);
+        assertEquals(cal.getATWDFitParam(1, 24, "intercept"), 2.656618, 1.0E-06);
+        assertEquals(cal.getATWDFitParam(6, 115, "r"), 0.9999903, 1.0E-06);
+    }
+
+    public void testFrequencyFit() {
+        assertEquals(cal.calcAtwdFreq(1000, 0), 15.993, 0.001);
+        assertEquals(cal.calcAtwdFreq(1000, 1), 15.825, 0.001);
+    }
+
+}
Index: dom-cal/src/icecube/daq/domcal/test/FakeCalXML.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/test/FakeCalXML.java:1.2
--- /dev/null	Thu Oct  6 09:02:10 2005
+++ dom-cal/src/icecube/daq/domcal/test/FakeCalXML.java	Sun Dec 26 07:16:10 2004
@@ -0,0 +1,376 @@
+package icecube.daq.domcal.test;
+
+import icecube.daq.domcal.HVHistogram;
+
+import java.text.FieldPosition;
+import java.text.SimpleDateFormat;
+
+import java.util.Date;
+
+class FakeCalXML
+{
+    private static final String DEFAULT_MODEL = "linear";
+    private static final int NUM_AMP_CHANNELS = 3;
+    private static final SimpleDateFormat dateFmt =
+        new SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy");
+
+    private Date date;
+    private String domId;
+    private double temp;
+    private short[] dac;
+    private short[] adc;
+    private FitData pulser;
+    private FitData[][] atwd;
+    private double[] ampGain;
+    private double[] ampError;
+    private FitData[] atwdFreq;
+    private FitData hvGain;
+    private HVHistogram[] histo;
+
+    FakeCalXML(Date date, String domId, double temp)
+    {
+        this.date = date;
+        this.domId = domId;
+        this.temp = temp;
+
+        dac = new short[16];
+        for (int i = 0; i < dac.length; i++) {
+            dac[i] = -1;
+        }
+
+        adc = new short[24];
+        for (int i = 0; i < adc.length; i++) {
+            adc[i] = -1;
+        }
+
+        pulser = null;
+
+        atwd = new FitData[8][128];
+
+        ampGain = new double[NUM_AMP_CHANNELS];
+        ampError = new double[NUM_AMP_CHANNELS];
+        for (int i = 0; i < NUM_AMP_CHANNELS; i++) {
+            ampGain[i] = Double.NaN;
+            ampError[i] = Double.NaN;
+        }
+
+        atwdFreq = new FitData[2];
+
+        hvGain = null;
+        histo = null;
+    }
+
+    private static final void appendArray(StringBuffer buf, short[] array,
+                                          String tag)
+    {
+        for (int i = 0; i < array.length; i++) {
+            if (array[i] >= 0) {
+                buf.append("<");
+                buf.append(tag);
+                buf.append(" channel=\"");
+                buf.append(i);
+                buf.append("\">");
+                buf.append(array[i]);
+                buf.append("</");
+                buf.append(tag);
+                buf.append(">");
+            }
+        }
+    }
+
+    private static final void appendFitData(StringBuffer buf, String tag,
+                                            String chanName, int channel,
+                                            String binName, int bin,
+                                            FitData data)
+    {
+        if (data != null) {
+            buf.append("<");
+            buf.append(tag);
+            if (chanName != null) {
+                buf.append(' ');
+                buf.append(chanName);
+                buf.append("=\"");
+                buf.append(channel);
+                buf.append("\"");
+            }
+            if (binName != null) {
+                buf.append(' ');
+                buf.append(binName);
+                buf.append("=\"");
+                buf.append(bin);
+                buf.append("\"");
+            }
+            buf.append("><fit model=\"");
+            buf.append(data.getModel());
+            buf.append("\"><param name=\"slope\">");
+            buf.append(data.getSlope());
+            buf.append("</param><param name=\"intercept\">");
+            buf.append(data.getIntercept());
+            buf.append("</param><regression-coeff>");
+            buf.append(data.getRegression());
+            buf.append("</regression-coeff></fit></");
+            buf.append(tag);
+            buf.append(">");
+        }
+    }
+
+    private static final void appendHistogram(StringBuffer buf, String tag,
+                                              HVHistogram hg)
+    {
+            buf.append("<");
+            buf.append(tag);
+            buf.append(" voltage=\"");
+            buf.append(hg.getVoltage());
+            buf.append("\" convergent=\"");
+            buf.append(hg.isConvergent() ? "true" : "false");
+            buf.append("\" pv=\"");
+            buf.append(hg.getPV());
+            buf.append("\" noiseRate=\"");
+            buf.append(hg.getNoiseRate());
+            buf.append("\" isFilled=\"");
+            buf.append(hg.isFilled() ? "true" : "false");
+            buf.append("\">");
+
+            float[] paramVals = hg.getFitParams();
+
+            for (int i = 0; i < paramVals.length; i++) {
+                buf.append("<param name=\"");
+                buf.append(HVHistogram.getParameterName(i));
+                buf.append("\">");
+                buf.append(paramVals[i]);
+                buf.append("</param>");
+            }
+
+            float[] charge = hg.getXVals();
+            float[] count = hg.getYVals();
+
+            buf.append("<histogram bins=\"");
+            buf.append(charge.length);
+            buf.append("\">");
+            for (int i = 0; i < charge.length; i++) {
+                buf.append("<bin num=\"");
+                buf.append(i);
+                buf.append("\" charge=\"");
+                buf.append(charge[i]);
+                buf.append("\" count=\"");
+                buf.append(count[i]);
+                buf.append("\"></bin>");
+            }
+
+            buf.append("</histogram></");
+            buf.append(tag);
+            buf.append(">");
+    }
+
+    void setADC(int channel, short val)
+    {
+        if (channel < 0 || channel >= adc.length) {
+            throw new Error("Bad ADC channel " + channel);
+        } else if (val < 0 || val > 1023) {
+            throw new Error("Bad ADC value " + val + " for channel " + channel);
+        }
+
+        adc[channel] = val;
+    }
+
+    void setADCs(short[] vals)
+    {
+        if (vals == null) {
+            throw new Error("ADC array cannot be null");
+        } else if (vals.length != adc.length) {
+            throw new Error("ADC array must have " + adc.length + " entries");
+        }
+
+        adc = vals;
+    }
+
+    void setATWD(int channel, int bin, double slope, double intercept,
+                 double regression)
+    {
+        setATWD(channel, bin, DEFAULT_MODEL, slope, intercept, regression);
+    }
+
+    void setATWD(int channel, int bin, String model, double slope,
+                 double intercept, double regression)
+    {
+        if (channel < 0 || channel >= atwd.length) {
+            throw new Error("Bad ATWD channel " + channel);
+        } else if (bin < 0 || bin >= atwd[channel].length) {
+            throw new Error("Bad ATWD bin " + bin + " for channel " + channel);
+        }
+
+        atwd[channel][bin] = new FitData(model, slope, intercept, regression);
+    }
+
+    void setATWDFrequency(int chip, double slope, double intercept,
+                          double regression)
+    {
+        setATWDFrequency(chip, DEFAULT_MODEL, slope, intercept, regression);
+    }
+
+    void setATWDFrequency(int chip, String model, double slope,
+                          double intercept, double regression)
+    {
+        if (chip < 0 || chip >= atwdFreq.length) {
+            throw new Error("Bad ATWD frequency chip " + chip);
+        }
+
+        atwdFreq[chip] = new FitData(model, slope, intercept, regression);
+    }
+
+    void setAmplifier(int channel, double gain, double error)
+    {
+        if (channel < 0 || channel >= NUM_AMP_CHANNELS) {
+            throw new Error("Bad amplifier channel " + channel);
+        }
+
+        ampGain[channel] = gain;
+        ampError[channel] = error;
+    }
+
+    void setDAC(int channel, short val)
+    {
+        if (channel < 0 || channel >= dac.length) {
+            throw new Error("Bad DAC channel " + channel);
+        } else if (val < 0 || val > 1023) {
+            throw new Error("Bad DAC value " + val + " for channel " + channel);
+        }
+
+        dac[channel] = val;
+    }
+
+    void setDACs(short[] vals)
+    {
+        if (vals == null) {
+            throw new Error("DAC array cannot be null");
+        } else if (vals.length != dac.length) {
+            throw new Error("DAC array must have " + dac.length + " entries");
+        }
+
+        dac = vals;
+    }
+
+    void setHvGain(double slope, double intercept, double regression)
+    {
+        hvGain = new FitData(DEFAULT_MODEL, slope, intercept, regression);
+    }
+
+    void setHvHistograms(HVHistogram[] list)
+    {
+        histo = list;
+    }
+
+    void setPulser(double slope, double intercept, double regression)
+    {
+        setPulser(DEFAULT_MODEL, slope, intercept, regression);
+    }
+
+    void setPulser(String model, double slope, double intercept,
+                   double regression)
+    {
+        pulser = new FitData(model, slope, intercept, regression);
+    }
+
+    public String toString()
+    {
+        final String xmlHeader =
+            "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>";
+
+        StringBuffer buf = new StringBuffer(xmlHeader);
+        buf.append("<domcal>");
+
+        buf.append("<date>");
+        synchronized (dateFmt) {
+            dateFmt.format(date, buf, new FieldPosition(0));
+        }
+        buf.append("</date>");
+
+        buf.append("<domid>");
+        buf.append(domId);
+        buf.append("</domid>");
+        
+        buf.append("<temperature format=\"raw\">");
+        int rawTemp = (int) (temp * 256.0);
+        if (rawTemp < 0) {
+            rawTemp += 65536;
+        }
+        buf.append(rawTemp);
+        buf.append("</temperature>");
+
+        appendArray(buf, dac, "dac");
+        appendArray(buf, adc, "adc");
+
+        appendFitData(buf, "pulser", null, -1, null, -1, pulser);
+
+        for (int c = 0; c < atwd.length; c++) {
+            for (int b = 0; b < atwd[c].length; b++) {
+                appendFitData(buf, "atwd", "channel", c, "bin", b, atwd[c][b]);
+            }
+        }
+
+        for (int c = 0; c < NUM_AMP_CHANNELS; c++) {
+            if (!Double.isNaN(ampGain[c]) && !Double.isNaN(ampError[c])) {
+                buf.append("<amplifier channel=\"");
+                buf.append(c);
+                buf.append("\"><gain error=\"");
+                buf.append(ampError[c]);
+                buf.append("\">");
+                buf.append(ampGain[c]);
+                buf.append("</gain></amplifier>");
+            }
+        }
+
+        for (int i = 0; i < atwdFreq.length; i++) {
+            appendFitData(buf, "atwdfreq", "chip", i, null, -1, atwdFreq[i]);
+        }
+
+        appendFitData(buf, "hvGainCal", null, -1, null, -1, hvGain);
+
+        if (histo != null) {
+            for (int i = 0; i < histo.length; i++) {
+                appendHistogram(buf, "histo", histo[i]);
+            }
+        }
+
+        buf.append("</domcal>");
+
+        return buf.toString();
+    }
+
+    class FitData
+    {
+        private String model;
+        private double slope = Double.NaN;
+        private double intercept = Double.NaN;
+        private double regression = Double.NaN;
+
+        FitData(String model, double slope, double intercept,
+                double regression)
+        {
+            this.model = model;
+            this.slope = slope;
+            this.intercept = intercept;
+            this.regression = regression;
+        }
+
+        double getIntercept()
+        {
+            return intercept;
+        }
+
+        String getModel()
+        {
+            return model;
+        }
+
+        double getRegression()
+        {
+            return regression;
+        }
+
+        double getSlope()
+        {
+            return slope;
+        }
+    }
+}
\ No newline at end of file
Index: dom-cal/src/icecube/daq/domcal/test/MockAppender.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/test/MockAppender.java:1.1
--- /dev/null	Thu Oct  6 09:02:10 2005
+++ dom-cal/src/icecube/daq/domcal/test/MockAppender.java	Mon Apr 25 12:40:08 2005
@@ -0,0 +1,165 @@
+package icecube.daq.domcal.test;
+
+import org.apache.log4j.Appender;
+import org.apache.log4j.Layout;
+import org.apache.log4j.Level;
+
+import org.apache.log4j.spi.ErrorHandler;
+import org.apache.log4j.spi.Filter;
+import org.apache.log4j.spi.LocationInfo;
+import org.apache.log4j.spi.LoggingEvent;
+
+/**
+ * Mock log4j appender.
+ */
+public class MockAppender
+    implements Appender
+{
+    /** minimum level of log messages which will be print. */
+    private Level minLevel;
+
+    /**
+     * Create a MockAppender which ignores everything below the WARN level.
+     */
+    public MockAppender()
+    {
+        this(Level.WARN);
+    }
+
+    /**
+     * Create a MockAppender which ignores everything
+     * below the specified level.
+     *
+     * @param minLevel minimum level
+     */
+    public MockAppender(Level minLevel)
+    {
+        this.minLevel = minLevel;
+    }
+
+    /**
+     * Unimplemented.
+     *
+     * @param x0 ???
+     */
+    public void addFilter(Filter x0)
+    {
+        throw new Error("Unimplemented");
+    }
+
+    /**
+     * Unimplemented.
+     */
+    public void clearFilters()
+    {
+        throw new Error("Unimplemented");
+    }
+
+    /**
+     * Nothing needs to be done here.
+     */
+    public void close()
+    {
+        // don't need to do anything
+    }
+
+    /**
+     * Handle a logging event.
+     *
+     * @param evt logging event
+     */
+    public void doAppend(LoggingEvent evt)
+    {
+        if (evt.getLevel().toInt() >= minLevel.toInt()) {
+            LocationInfo loc = evt.getLocationInformation();
+
+            System.out.println(evt.getLoggerName() + " " + evt.getLevel() +
+                               " [" + loc.fullInfo + "] " + evt.getMessage());
+
+            String[] stack = evt.getThrowableStrRep();
+            for (int i = 0; stack != null && i < stack.length; i++) {
+                System.out.println("> " + stack[i]);
+            }
+        }
+    }
+
+    /**
+     * Unimplemented.
+     *
+     * @return ???
+     */
+    public ErrorHandler getErrorHandler()
+    {
+        throw new Error("Unimplemented");
+    }
+
+    /**
+     * Unimplemented.
+     *
+     * @return ???
+     */
+    public Filter getFilter()
+    {
+        throw new Error("Unimplemented");
+    }
+
+    /**
+     * Unimplemented.
+     *
+     * @return ???
+     */
+    public Layout getLayout()
+    {
+        throw new Error("Unimplemented");
+    }
+
+    /**
+     * Unimplemented.
+     *
+     * @return ???
+     */
+    public String getName()
+    {
+        throw new Error("Unimplemented");
+    }
+
+    /**
+     * Unimplemented.
+     *
+     * @return ???
+     */
+    public boolean requiresLayout()
+    {
+        throw new Error("Unimplemented");
+    }
+
+    /**
+     * Unimplemented.
+     *
+     * @param x0 ???
+     */
+    public void setErrorHandler(ErrorHandler x0)
+    {
+        throw new Error("Unimplemented");
+    }
+
+    /**
+     * Unimplemented.
+     *
+     * @param x0 ???
+     */
+    public void setLayout(Layout x0)
+    {
+        throw new Error("Unimplemented");
+    }
+
+    /**
+     * Unimplemented.
+     *
+     * @param s0 ???
+     */
+    public void setName(String s0)
+    {
+        throw new Error("Unimplemented");
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/test/MockCalDB.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/test/MockCalDB.java:1.1
--- /dev/null	Thu Oct  6 09:02:10 2005
+++ dom-cal/src/icecube/daq/domcal/test/MockCalDB.java	Fri Oct 29 14:05:01 2004
@@ -0,0 +1,100 @@
+package icecube.daq.domcal.test;
+
+import icecube.daq.db.domprodtest.DOMProdTestException;
+
+import icecube.daq.db.domprodtest.test.MockConnection;
+import icecube.daq.db.domprodtest.test.MockDOMProdTestDB;
+import icecube.daq.db.domprodtest.test.MockStatement;
+
+import icecube.daq.domcal.CalibratorDB;
+
+import java.io.IOException;
+
+import java.sql.Connection;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+
+class MockCalDB
+    extends CalibratorDB
+{
+    private static ArrayList stmtList = new ArrayList();
+    private static ArrayList usedStmt = new ArrayList();
+
+    MockCalDB()
+        throws DOMProdTestException, IOException, SQLException
+    {
+        super(MockDOMProdTestDB.fakeProperties());
+    }
+
+    public static void addActualStatement(MockStatement stmt)
+    {
+        stmtList.add(stmt);
+    }
+
+    public Connection getConnection()
+    {
+        return new MockConnection();
+    }
+
+    /**
+     * @throws SQLException
+     */
+    public Statement getStatement(Connection conn)
+        throws SQLException
+    {
+        if (stmtList.size() == 0) {
+            throw new SQLException("No available SQL statement");
+        }
+
+        MockStatement stmt = (MockStatement) stmtList.remove(0);
+
+        usedStmt.add(stmt);
+
+        return stmt;
+    }
+
+    /**
+     * @throws SQLException
+     */
+    public Statement getStatement()
+        throws SQLException
+    {
+        if (stmtList.size() == 0) {
+            throw new SQLException("No available SQL statement");
+        }
+
+        MockStatement stmt = (MockStatement) stmtList.remove(0);
+
+        usedStmt.add(stmt);
+
+        return stmt;
+    }
+
+    static void initStatic()
+    {
+        stmtList.clear();
+        usedStmt.clear();
+    }
+
+    static void verifyStatic()
+    {
+        if (stmtList.size() != 0) {
+            System.err.println("" + stmtList.size() +
+                               " statements were not used");
+        }
+
+        Iterator iter = usedStmt.iterator();
+        while (iter.hasNext()) {
+            MockStatement stmt = (MockStatement) iter.next();
+
+            if (!stmt.isClosed()) {
+                try { stmt.close(); } catch (SQLException se) { }
+            }
+
+            stmt.verify();
+        }
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/test/MockSQLUtil.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/test/MockSQLUtil.java:1.6
--- /dev/null	Thu Oct  6 09:02:10 2005
+++ dom-cal/src/icecube/daq/domcal/test/MockSQLUtil.java	Tue May 24 07:54:21 2005
@@ -0,0 +1,571 @@
+package icecube.daq.domcal.test;
+
+import icecube.daq.db.domprodtest.DOMProdTestUtil;
+import icecube.daq.db.domprodtest.Laboratory;
+
+import icecube.daq.db.domprodtest.test.MockResultSet;
+import icecube.daq.db.domprodtest.test.MockStatement;
+
+import icecube.daq.domcal.HVHistogram;
+
+import java.sql.Date;
+
+abstract class MockSQLUtil
+{
+    public static final int MAINBD_TYPE_ID = 111;
+    public static final int DOM_TYPE_ID = 222;
+    public static final int MAINBD_ID = 111222;
+    public static final int DOM_ID = 222111;
+
+    public static final int MODEL_LINEAR_ID = 751;
+    public static final String MODEL_LINEAR_NAME = "linear";
+
+    public static final int PARAM_SLOPE_ID = 878;
+    public static final String PARAM_SLOPE_NAME = "slope";
+    public static final int PARAM_INTERCEPT_ID = 888;
+    public static final String PARAM_INTERCEPT_NAME = "intercept";
+
+    public static final int PARAM_HISTO_0_ID = 890;
+    public static final String PARAM_HISTO_0_NAME =
+        HVHistogram.getParameterName(0);
+    public static final int PARAM_HISTO_1_ID = 891;
+    public static final String PARAM_HISTO_1_NAME =
+        HVHistogram.getParameterName(1);
+    public static final int PARAM_HISTO_2_ID = 892;
+    public static final String PARAM_HISTO_2_NAME =
+        HVHistogram.getParameterName(2);
+    public static final int PARAM_HISTO_3_ID = 893;
+    public static final String PARAM_HISTO_3_NAME =
+        HVHistogram.getParameterName(3);
+    public static final int PARAM_HISTO_4_ID = 894;
+    public static final String PARAM_HISTO_4_NAME =
+        HVHistogram.getParameterName(4);
+    public static final int[] PARAM_HISTO_ID = new int[] {
+        PARAM_HISTO_0_ID, PARAM_HISTO_1_ID, PARAM_HISTO_2_ID, 
+        PARAM_HISTO_3_ID, PARAM_HISTO_4_ID, 
+    };
+
+    public static final int SLOPE_INDEX = 0;
+    public static final int INTERCEPT_INDEX = 1;
+    public static final int REGRESSION_INDEX = 2;
+
+    public static final void addATWDInsertSQL(MockStatement stmt,
+                                              int domcalId,
+                                              double[][][] data)
+    {
+        for (int c = 0; c < data.length; c++) {
+            if (c == 3 || c == 7) {
+                // channels 3 and 7 do not exist
+                continue;
+            }
+            for (int b = 0; b < data[c].length; b++) {
+                final String iStr = "insert into DOMCal_ATWD(domcal_id," +
+                    "channel,bin,dc_model_id,fit_regression)" +
+                    "values(" + domcalId + "," + c + "," + b +
+                    "," + MODEL_LINEAR_ID + "," +
+                    data[c][b][REGRESSION_INDEX] + ")";
+                stmt.addExpectedUpdate(iStr, 1);
+
+                final String sStr = "insert into DOMCal_ATWDParam(domcal_id" +
+                    ",channel,bin,dc_param_id,value)values(" + domcalId + "," +
+                    c + "," + b + "," + PARAM_SLOPE_ID + "," +
+                    data[c][b][SLOPE_INDEX] + ")";
+                stmt.addExpectedUpdate(sStr, 1);
+
+                final String nStr = "insert into DOMCal_ATWDParam(domcal_id" +
+                    ",channel,bin,dc_param_id,value)values(" + domcalId + "," +
+                    c + "," + b + "," + PARAM_INTERCEPT_ID + "," +
+                    data[c][b][INTERCEPT_INDEX] + ")";
+                stmt.addExpectedUpdate(nStr, 1);
+            }
+        }
+    }
+
+    public static final void addATWDSQL(MockStatement stmt, int domcalId,
+                                        double[][][] data)
+    {
+        MockResultSet rsMain = new MockResultSet("ATWDMain");
+        MockResultSet rsParam = new MockResultSet("ATWDParam");
+
+        boolean found = false;
+        for (int c = data.length - 1; c >= 0; c--) {
+            for (int b = data[c].length - 1; b >= 0; b--) {
+                final double regression = data[c][b][REGRESSION_INDEX];
+                rsMain.addActualRow(new Object[] {
+                                        new Integer(c),
+                                        new Integer(b),
+                                        MODEL_LINEAR_NAME,
+                                        new Double(regression),
+                                    });
+
+                final double slope = data[c][b][SLOPE_INDEX];
+                rsParam.addActualRow(new Object[] {
+                                         new Integer(c),
+                                         new Integer(b),
+                                         PARAM_SLOPE_NAME,
+                                         new Double(slope),
+                                     });
+
+                final double intercept = data[c][b][INTERCEPT_INDEX];
+                rsParam.addActualRow(new Object[] {
+                                         new Integer(c),
+                                         new Integer(b),
+                                         PARAM_INTERCEPT_NAME,
+                                         new Double(intercept),
+                                     });
+
+                found = true;
+            }
+        }
+
+        final String mStr =
+            "select da.channel,da.bin,dm.name,da.fit_regression" +
+            " from DOMCal_ATWD da,DOMCal_Model dm where da.domcal_id=" +
+            domcalId + " and da.dc_model_id=dm.dc_model_id" +
+            " order by channel desc,bin desc";
+        stmt.addExpectedQuery(mStr, rsMain);
+
+        if (found) {
+            final String pStr = "select dap.channel,dap.bin,dp.name" +
+                ",dap.value from DOMCal_ATWDParam dap,DOMCal_Param dp" +
+                " where dap.domcal_id=" + domcalId +
+                " and dap.dc_param_id=dp.dc_param_id" +
+                " order by channel desc,bin desc";
+            stmt.addExpectedQuery(pStr, rsParam);
+        }
+    }
+
+    public static final void addATWDFreqInsertSQL(MockStatement stmt,
+                                                  int domcalId,
+                                                  double[][] data)
+    {
+        for (int i = 0; i < data.length; i++) {
+            final String iStr = "insert into DOMCal_ATWDFreq(domcal_id," +
+                "chip,dc_model_id,fit_regression)values(" + domcalId + "," +
+                i + "," + MODEL_LINEAR_ID + "," +
+                data[i][REGRESSION_INDEX] + ")";
+            stmt.addExpectedUpdate(iStr, 1);
+
+            final String sStr =
+                "insert into DOMCal_ATWDFreqParam(domcal_id,chip" +
+                ",dc_param_id,value)values(" + domcalId + "," + i + "," +
+                PARAM_SLOPE_ID + "," +
+                data[i][SLOPE_INDEX] + ")";
+            stmt.addExpectedUpdate(sStr, 1);
+
+            final String nStr =
+                "insert into DOMCal_ATWDFreqParam(domcal_id,chip" +
+                ",dc_param_id,value)values(" + domcalId + "," + i + "," +
+                PARAM_INTERCEPT_ID + "," +
+                data[i][INTERCEPT_INDEX] + ")";
+            stmt.addExpectedUpdate(nStr, 1);
+        }
+    }
+
+    public static final void addATWDFreqSQL(MockStatement stmt, int domcalId,
+                                            double[][] data)
+    {
+        MockResultSet rsMain = new MockResultSet("FreqMain");
+
+        if (data != null && data.length > 0) {
+            MockResultSet rsParam = new MockResultSet("FreqParam");
+            for (int i = data.length - 1; i >= 0; i--) {
+                final double regression = data[i][REGRESSION_INDEX];
+                rsMain.addActualRow(new Object[] {
+                                        new Integer(i),
+                                        MODEL_LINEAR_NAME,
+                                        new Double(regression),
+                                    });
+
+                final double slope = data[i][SLOPE_INDEX];
+                rsParam.addActualRow(new Object[] {
+                                         new Integer(i),
+                                         PARAM_SLOPE_NAME,
+                                         new Double(slope),
+                                     });
+
+                final double intercept = data[i][INTERCEPT_INDEX];
+                rsParam.addActualRow(new Object[] {
+                                         new Integer(i),
+                                         PARAM_INTERCEPT_NAME,
+                                         new Double(intercept),
+                                     });
+            }
+
+            final String pStr = "select dap.chip,dp.name,dap.value" +
+                " from DOMCal_ATWDFreqParam dap,DOMCal_Param dp" +
+                " where dap.domcal_id=" + domcalId +
+                " and dap.dc_param_id=dp.dc_param_id order by chip desc";
+            stmt.addExpectedQuery(pStr, rsParam);
+        }
+
+        final String mStr = "select da.chip,dm.name,da.fit_regression" +
+            " from DOMCal_ATWDFreq da,DOMCal_Model dm" +
+            " where da.domcal_id=" + domcalId +
+            " and da.dc_model_id=dm.dc_model_id" +
+            " order by chip desc";
+        stmt.addExpectedQuery(mStr, rsMain);
+    }
+
+    public static final void addAmpGainInsertSQL(MockStatement stmt,
+                                                 int domcalId,
+                                                 double[] gain,
+                                                 double[] error)
+    {
+        for (int i = 0; i < gain.length; i++) {
+            final String iStr =
+                "insert into DOMCal_AmpGain(domcal_id,channel,gain,error)" +
+                "values(" + domcalId + "," + i + "," + gain[i] + "," +
+                error[i] + ")";
+            stmt.addExpectedUpdate(iStr, 1);
+        }
+    }
+
+    public static final void addAmpGainSQL(MockStatement stmt, int domcalId,
+                                           double[] gain, double[] error)
+    {
+        final String qStr = "select channel,gain,error from DOMCal_AmpGain" +
+            " where domcal_id=" + domcalId + " order by channel desc";
+
+        MockResultSet rs = new MockResultSet("AmpGain");
+        for (int i = gain.length - 1; i >= 0; i--) {
+            rs.addActualRow(new Object[] {
+                                new Integer(i),
+                                new Double(gain[i]),
+                                new Double(error[i]),
+                            });
+        }
+        stmt.addExpectedQuery(qStr, rs);
+    }
+
+    public static final void addChanValInsertSQL(MockStatement stmt,
+                                                 String tblPart,
+                                                 int id, short[] list)
+    {
+        for (int i = 0; i < list.length; i++) {
+            final String iStr = "insert into DOMCal_" + tblPart +
+                "(domcal_id,channel,value)values(" + id + "," + i + "," +
+                list[i] + ")";
+            stmt.addExpectedUpdate(iStr, 1);
+        }
+    }
+
+    public static final void addChanValSQL(MockStatement stmt, String tblPart,
+                                           int domcalId, short[] list)
+    {
+        final String qStr = "select channel,value from DOMCal_" + tblPart +
+            " where domcal_id=" + domcalId + " order by channel desc";
+
+        MockResultSet rs = new MockResultSet(tblPart + "ChanVal");
+        for (int i = list.length - 1; i >= 0; i--) {
+            rs.addActualRow(new Object[] {
+                                new Integer(i),
+                                new Integer(list[i]),
+                            });
+        }
+        stmt.addExpectedQuery(qStr, rs);
+    }
+
+    public static final void addHvGainInsertSQL(MockStatement stmt,
+                                                int domcalId,
+                                                double slope,
+                                                double intercept,
+                                                double regression)
+    {
+        final String iStr =
+            "insert into DOMCal_HvGain(domcal_id,slope,intercept,regression)" +
+            "values(" + domcalId + "," + slope + "," + intercept + "," +
+            regression + ")";
+        stmt.addExpectedUpdate(iStr, 1);
+    }
+
+    public static final void addHvGainSQL(MockStatement stmt, int domcalId,
+                                          double slope, double intercept,
+                                          double regression)
+    {
+        final String qStr = "select slope,intercept,regression" +
+            " from DOMCal_HvGain where domcal_id=" + domcalId;
+
+        stmt.addExpectedQuery(qStr, "HvGainQry", new Object[] {
+                                  new Double(slope),
+                                  new Double(intercept),
+                                  new Double(regression),
+                              });
+    }
+
+    public static final void addHvHistoInsertSQL(MockStatement stmt,
+                                                 int domcalId,
+                                                 HVHistogram[] histo)
+    {
+        if (histo != null) {
+            for (int i = 0; i < histo.length; i++) {
+                addHvHistoInsertSQL(stmt, domcalId, histo[i], i);
+            }
+        }
+    }
+
+    public static final void addHvHistoInsertSQL(MockStatement stmt,
+                                                 int domcalId,
+                                                 HVHistogram histo, int num)
+    {
+        final String iStr =
+            "insert into DOMCal_ChargeMain(domcal_id,dc_histo_num,voltage," +
+            "convergent,pv,noise_rate,is_filled)values(" + domcalId + "," +
+            num + "," + histo.getVoltage() + "," +
+            (histo.isConvergent() ? 1 : 0) + "," + histo.getPV() + "," +
+            histo.getNoiseRate() + "," + (histo.isFilled() ? 1 : 0) + ")";
+
+        stmt.addExpectedUpdate(iStr, 1);
+
+        float[] paramVals = histo.getFitParams();
+
+        for (int i = 0; i < paramVals.length; i++) {
+            int paramId = PARAM_HISTO_ID[i];
+
+            final String pStr =
+                "insert into DOMCal_ChargeParam(domcal_id,dc_histo_num" +
+                ",dc_param_id,value)values(" + domcalId + "," + num + "," +
+                paramId + "," + paramVals[i] + ")";
+
+            stmt.addExpectedUpdate(pStr, 1);
+        }
+
+        float[] charge = histo.getXVals();
+        float[] count = histo.getYVals();
+
+        for (int i = 0; i < charge.length; i++) {
+            final String dStr =
+                "insert into DOMCal_ChargeData(domcal_id,dc_histo_num" +
+                ",bin,charge,count)values(" + domcalId + "," + num + "," +
+                i + "," + charge[i] + "," + count[i] + ")";
+
+            stmt.addExpectedUpdate(dStr, 1);
+        }
+    }
+
+    public static final void addHvHistoSQL(MockStatement stmt, int domcalId,
+                                           HVHistogram[] histo)
+    {
+        int num = 0;
+        if (histo != null) {
+            for ( ; num < histo.length; num++) {
+                addHvHistoSQL(stmt, domcalId, histo[num], num);
+            }
+        }
+
+        addHvHistoSQL(stmt, domcalId, null, num);
+    }
+
+    public static final void addHvHistoSQL(MockStatement stmt, int domcalId,
+                                           HVHistogram histo, int num)
+    {
+        final String qStr = "select voltage,convergent,pv,noise_rate" +
+            ",is_filled from DOMCal_ChargeMain where domcal_id=" +
+            domcalId + " and dc_histo_num=" + num;
+
+        if (histo == null) {
+            stmt.addExpectedQuery(qStr, "ChargeFinal", null);
+            return;
+        }
+
+        final Object[] qryObjs = new Object[] {
+            new Short(histo.getVoltage()),
+            (histo.isConvergent() ? Boolean.TRUE : Boolean.FALSE),
+            new Float(histo.getPV()),
+            new Float(histo.getNoiseRate()),
+            (histo.isFilled() ? Boolean.TRUE : Boolean.FALSE),
+        };
+        stmt.addExpectedQuery(qStr, "ChargeMain#" + num, qryObjs);
+
+        float[] params = histo.getFitParams();
+
+        MockResultSet rsParam = new MockResultSet("HistoParams#" + num);
+        for (int i = 0; i < params.length; i++) {
+            rsParam.addActualRow(new Object[] {
+                                     HVHistogram.getParameterName(i),
+                                     new Float(params[i]),
+                                 });
+        }
+
+        final String pStr = "select dp.name,cp.value" +
+            " from DOMCal_ChargeParam cp,DOMCal_Param dp" +
+            " where cp.domcal_id=" + domcalId +
+            " and cp.dc_histo_num=" + num +
+            " and cp.dc_param_id=dp.dc_param_id";
+        stmt.addExpectedQuery(pStr, rsParam);
+
+        float[] charge = histo.getXVals();
+        float[] count = histo.getYVals();
+
+        MockResultSet rsData = new MockResultSet("HistoData#" + num);
+        for (int i = charge.length - 1; i >= 0; i--) {
+            rsData.addActualRow(new Object[] {
+                                    new Integer(i),
+                                    new Float(charge[i]),
+                                    new Float(count[i]),
+                                });
+        }
+
+        final String dStr =
+            "select bin,charge,count from DOMCal_ChargeData" +
+            " where domcal_id=" + domcalId +
+            " and dc_histo_num=" + num +
+            " order by bin desc";
+
+        stmt.addExpectedQuery(dStr, rsData);
+    }
+
+    public static final void addMainInsertSQL(MockStatement stmt,
+                                              Laboratory lab, int prodId,
+                                              int id, Date date, double temp)
+    {
+        stmt.addExpectedUpdate("lock tables DOMCalibration write", 1);
+
+        final String qStr = "select max(domcal_id) from DOMCalibration" +
+            " where domcal_id>=" + lab.getMinimumId() +
+            " and domcal_id<=" + lab.getMaximumId();
+        final Object[] qryObjs = new Object[] { new Integer(id - 1) };
+        stmt.addExpectedQuery(qStr, "MaxDOMCalId", qryObjs);
+
+        final String iStr =
+            "insert into DOMCalibration(domcal_id,prod_id,date,temperature)" +
+            "values(" + id + "," + prodId +
+            "," + DOMProdTestUtil.quoteString(date.toString()) + "," + temp +
+            ")";
+        stmt.addExpectedUpdate(iStr, 1);
+
+        stmt.addExpectedUpdate("unlock tables", 1);
+    }
+
+    public static final void addMainSQL(MockStatement stmt, int prodId,
+                                        Date date, double temp, int domcalId)
+    {
+        final String qStr = "select domcal_id,date,temperature" +
+            " from DOMCalibration where prod_id=" + prodId +
+            (date == null ? "" : " and date<=" +
+             DOMProdTestUtil.quoteString(date.toString())) +
+            (Double.isNaN(temp) ? "" : " and temperature>=" + (temp - 5.0) +
+             " and temperature<=" + (temp + 5.0)) +
+            " order by date desc";
+
+        if (domcalId < 0) {
+            stmt.addExpectedQuery(qStr, "mainQry", null);
+        } else {
+            final Object[] qryObjs = new Object[] {
+                new Integer(domcalId),
+                date,
+                new Double(temp)
+            };
+            stmt.addExpectedQuery(qStr, "mainQry", qryObjs);
+        }
+    }
+
+    public static final void addModelTypeSQL(MockStatement stmt)
+    {
+        final String qStr =
+            "select dc_model_id,name from DOMCal_Model order by dc_model_id";
+        final Object[] qryObjs = new Object[] {
+            new Integer(MODEL_LINEAR_ID), MODEL_LINEAR_NAME };
+        stmt.addExpectedQuery(qStr, "ModelId", qryObjs);
+    }
+
+    public static final void addParamTypeSQL(MockStatement stmt)
+    {
+        final String qStr =
+            "select dc_param_id,name from DOMCal_Param order by dc_param_id";
+        MockResultSet rs = new MockResultSet("Params");
+        rs.addActualRow(new Object[] {
+                            new Integer(PARAM_SLOPE_ID),
+                            PARAM_SLOPE_NAME
+                        });
+        rs.addActualRow(new Object[] {
+                            new Integer(PARAM_INTERCEPT_ID),
+                            PARAM_INTERCEPT_NAME
+                        });
+        for (int i = 0; i < PARAM_HISTO_ID.length; i++) {
+            rs.addActualRow(new Object[] {
+                                new Integer(PARAM_HISTO_ID[i]),
+                                HVHistogram.getParameterName(i),
+                            });
+        }
+        stmt.addExpectedQuery(qStr, rs);
+    }
+
+    public static final void addProductTypeSQL(MockStatement stmt,
+                                               int domTypeId, int mainbdTypeId)
+    {
+        icecube.daq.db.domprodtest.test.MockSQLUtil.addProductTypeQueries(stmt, domTypeId, mainbdTypeId);
+    }
+
+    public static final void addProductSQL(MockStatement stmt,
+                                           int mainbdTypeId,
+                                           String mbHardSerial, int mainbdId,
+                                           String mbTagSerial, int domTypeId,
+                                           int domId, String domTagSerial)
+    {
+        icecube.daq.db.domprodtest.test.MockSQLUtil.addDOMQueries(stmt,
+                                                                  mainbdTypeId,
+                                                                  mbHardSerial,
+                                                                  mainbdId,
+                                                                  Integer.MAX_VALUE,
+                                                                  mbTagSerial,
+                                                                  domTypeId,
+                                                                  domId,
+                                                                  domTagSerial);
+    }
+
+    public static final void addPulserInsertSQL(MockStatement stmt,
+                                                int domcalId,
+                                                double slope,
+                                                double intercept,
+                                                double regression)
+    {
+        final String rStr =
+            "insert into DOMCal_Pulser(domcal_id,dc_model_id,fit_regression)" +
+            "values(" + domcalId + "," + MODEL_LINEAR_ID + "," + regression +
+            ")";
+        stmt.addExpectedUpdate(rStr, 1);
+
+        final String sStr =
+            "insert into DOMCal_PulserParam(domcal_id,dc_param_id,value)" +
+            "values(" + domcalId + "," + PARAM_SLOPE_ID + "," + slope + ")";
+        stmt.addExpectedUpdate(sStr, 1);
+
+        final String iStr =
+            "insert into DOMCal_PulserParam(domcal_id,dc_param_id,value)" +
+            "values(" + domcalId + "," + PARAM_INTERCEPT_ID + "," +
+            intercept + ")";
+        stmt.addExpectedUpdate(iStr, 1);
+    }
+
+    public static final void addPulserSQL(MockStatement stmt, int domcalId,
+                                          double slope, double intercept,
+                                          double regression)
+    {
+        final String qStr = "select dm.name,dp.fit_regression" +
+            " from DOMCal_Pulser dp,DOMCal_Model dm where dp.domcal_id=" +
+            domcalId + " and dp.dc_model_id=dm.dc_model_id";
+
+        stmt.addExpectedQuery(qStr, "PulserMain",
+                              new Object[] {
+                                  MODEL_LINEAR_NAME,
+                                  new Double(regression),
+                              });
+
+        final String pStr = "select dp.name,dpp.value" +
+            " from DOMCal_PulserParam dpp,DOMCal_Param dp" +
+            " where dpp.domcal_id=" + domcalId +
+            " and dpp.dc_param_id=dp.dc_param_id";
+
+        MockResultSet rs = new MockResultSet("PulserData");
+        rs.addActualRow(new Object[] {
+                            PARAM_SLOPE_NAME,
+                            new Double(slope),
+                        });
+        rs.addActualRow(new Object[] {
+                            PARAM_INTERCEPT_NAME,
+                            new Double(intercept),
+                        });
+        stmt.addExpectedQuery(pStr, rs);
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/test/RandomXMLTest.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/test/RandomXMLTest.java:1.3
--- /dev/null	Thu Oct  6 09:02:10 2005
+++ dom-cal/src/icecube/daq/domcal/test/RandomXMLTest.java	Wed May  4 07:37:59 2005
@@ -0,0 +1,264 @@
+package icecube.daq.domcal.test;
+
+import icecube.daq.db.domprodtest.DOMProdTestException;
+import icecube.daq.db.domprodtest.Laboratory;
+import icecube.daq.db.domprodtest.ProductType;
+
+import icecube.daq.db.domprodtest.test.FakeUtil;
+import icecube.daq.db.domprodtest.test.MockStatement;
+
+import icecube.daq.domcal.Calibrator;
+import icecube.daq.domcal.CalibratorComparator;
+import icecube.daq.domcal.CalibratorDB;
+import icecube.daq.domcal.DOMCalibrationException;
+import icecube.daq.domcal.HVHistogram;
+
+import java.io.IOException;
+import java.io.ByteArrayInputStream;
+
+import java.sql.Date;
+import java.sql.SQLException;
+
+import java.util.Random;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.apache.log4j.BasicConfigurator;
+
+/**
+ *  Random calibrator XML tests.
+ */
+public class RandomXMLTest
+    extends TestCase
+{
+    private static long seed = 0;
+
+    /** random number generator. */
+    private Random random = (seed == 0 ? new Random() : new Random(seed));
+
+    public RandomXMLTest(String name)
+    {
+        super(name);
+    }
+
+    private static final void fillATWDData(double[][][] atwdData, int c, int b)
+    {
+        atwdData[c][b][MockSQLUtil.SLOPE_INDEX] =
+            (((double) c * (double) atwdData[c].length) +
+                (double) b) + 0.123;
+        atwdData[c][b][MockSQLUtil.INTERCEPT_INDEX] =
+            (((double) c * (double) atwdData[c].length) +
+                (double) b) + 0.456;
+        atwdData[c][b][MockSQLUtil.REGRESSION_INDEX] =
+            (((double) c * (double) atwdData[c].length) +
+                (double) b) + 0.789;
+    }
+
+    protected void setUp()
+        throws Exception
+    {
+        super.setUp();
+
+        /* Setup the logging infrastructure */
+        BasicConfigurator.configure();
+
+        MockCalDB.initStatic();
+    }
+
+    public static TestSuite suite()
+    {
+        return new TestSuite(RandomXMLTest.class);
+    }
+
+    protected void tearDown()
+        throws Exception
+    {
+        super.tearDown();
+
+        MockCalDB.verifyStatic();
+    }
+
+    public void testCompare()
+        throws DOMCalibrationException, DOMProdTestException, IOException,
+               SQLException
+    {
+        final Date date = Date.valueOf("2004-03-02");
+        final String mbHardSerial = "0123456789ab";
+        final double temp = random.nextDouble();
+
+        final short[] adcs = new short[24];
+        for (int i = 0; i < adcs.length; i++) {
+            int val = random.nextInt();
+            if (val < 0) {
+                val = -val;
+            }
+            adcs[i] = (short) (val % Short.MAX_VALUE);
+        };
+        final short[] dacs = new short[16];
+        for (int i = 0; i < dacs.length; i++) {
+            int val = random.nextInt();
+            if (val < 0) {
+                val = -val;
+            }
+            dacs[i] = (short) (val % Short.MAX_VALUE);
+        };
+
+        final double pulserSlope = random.nextDouble();
+        final double pulserIntercept = random.nextDouble();
+        final double pulserRegression = random.nextDouble();
+
+        final double[][][] atwdData =
+            new double[random.nextInt(8)][random.nextInt(128)][3];
+        for (int c = 0; c < atwdData.length; c++) {
+            for (int b = 0; b < atwdData[c].length; b++) {
+                for (int a = 0; a < atwdData[c][b].length; a++) {
+                    atwdData[c][b][a] = random.nextDouble();
+                }
+            }
+        }
+
+        final double[] ampGain = new double[3];
+        final double[] ampError = new double[3];
+        for (int i = 0; i < 3; i++) {
+            ampGain[i] = random.nextDouble();
+            ampError[i] = random.nextDouble();
+        }
+
+        final double[][] freqData = new double[random.nextInt(2)][3];
+        for (int i = 0; i < freqData.length; i++) {
+            for (int j = 0; j < freqData[i].length; j++) {
+                freqData[i][j] = random.nextDouble();
+            }
+        }
+
+        final double hvGainSlope = random.nextDouble();
+        final double hvGainIntercept = random.nextDouble();
+        final double hvGainRegression = random.nextDouble();
+
+        HVHistogram[] histo = new HVHistogram[2];
+        for (int i = 0; i < histo.length; i++) {
+            float[] paramVals = new float[] {
+                (float) i + 12.3456f,
+                (float) i + 6.78901f,
+                (float) i + 6.54321f,
+                (float) i + 1.23456f,
+                (float) i + 65.4321f,
+            };
+
+            float[] charge = new float[250];
+            float[] count = new float[250];
+            for (int j = 0; j < 250; j++) {
+                charge[i] = (float) j * 0.016f;
+                count[i] = (float) (j % 16) + (i == 0 ? 13.0f : 17.0f);
+            }
+
+            histo[i] = new HVHistogram((short) (1400 + (i * 100)), paramVals,
+                                       charge, count, (i == 0),
+                                       (float) i + 1.23456f,
+                                       1234.0f + ((float) i * 2.3456f),
+                                       (i == 1));
+        };
+
+        FakeCalXML xml = new FakeCalXML(date, mbHardSerial, temp);
+
+        xml.setDACs(dacs);
+        xml.setADCs(adcs);
+
+        xml.setPulser(pulserSlope, pulserIntercept, pulserRegression);
+
+        for (int c = 0; c < atwdData.length; c++) {
+            for (int b = 0; b < atwdData[c].length; b++) {
+                xml.setATWD(c, b, atwdData[c][b][MockSQLUtil.SLOPE_INDEX],
+                            atwdData[c][b][MockSQLUtil.INTERCEPT_INDEX],
+                            atwdData[c][b][MockSQLUtil.REGRESSION_INDEX]);
+            }
+        }
+
+        for (int i = 0; i < 3; i++) {
+            xml.setAmplifier(i, ampGain[i], ampError[i]);
+        }
+
+        for (int i = 0; i < freqData.length; i++) {
+            xml.setATWDFrequency(i, freqData[i][0], freqData[i][1],
+                                 freqData[i][2]);
+        }
+
+        xml.setHvGain(hvGainSlope, hvGainIntercept, hvGainRegression);
+        xml.setHvHistograms(histo);
+
+        final String xmlStr = xml.toString();
+
+        ByteArrayInputStream strIn =
+            new ByteArrayInputStream(xmlStr.getBytes());
+
+        Calibrator fiCal = new Calibrator(strIn);
+
+        try {
+            strIn.close();
+        } catch (IOException ioe) {
+            // ignore errors on close
+        }
+
+        final String mainbdTagSerial = "V01 23";
+        final String domTagSerial = "XX401P0123";
+
+        MockStatement stmt = new MockStatement("LoadStmt");
+
+        Laboratory lab = FakeUtil.fakeLab(stmt, 10, 1, 100000);
+
+        final int domcalId = lab.getMinimumId() + 10;
+
+        if (!ProductType.isInitialized()) {
+            MockSQLUtil.addProductTypeSQL(stmt, MockSQLUtil.DOM_TYPE_ID,
+                                          MockSQLUtil.MAINBD_TYPE_ID);
+        }
+
+        MockSQLUtil.addProductSQL(stmt, MockSQLUtil.MAINBD_TYPE_ID,
+                                  mbHardSerial, MockSQLUtil.MAINBD_ID,
+                                  mainbdTagSerial, MockSQLUtil.DOM_TYPE_ID,
+                                  MockSQLUtil.DOM_ID, domTagSerial);
+
+        MockSQLUtil.addMainSQL(stmt, MockSQLUtil.DOM_ID, date, temp, domcalId);
+
+        MockSQLUtil.addChanValSQL(stmt, "ADC", domcalId, adcs);
+        MockSQLUtil.addChanValSQL(stmt, "DAC", domcalId, dacs);
+        MockSQLUtil.addPulserSQL(stmt, domcalId, pulserSlope,
+                                 pulserIntercept, pulserRegression);
+        MockSQLUtil.addATWDSQL(stmt, domcalId, atwdData);
+        MockSQLUtil.addAmpGainSQL(stmt, domcalId, ampGain, ampError);
+        MockSQLUtil.addATWDFreqSQL(stmt, domcalId, freqData);
+        MockSQLUtil.addHvGainSQL(stmt, domcalId, hvGainSlope, hvGainIntercept,
+                                 hvGainRegression);
+        MockSQLUtil.addHvHistoSQL(stmt, domcalId, histo);
+
+        MockCalDB calDB = new MockCalDB();
+        calDB.addActualStatement(stmt);
+
+        calDB.setLaboratory(lab);
+
+        Calibrator dbCal = calDB.load(mbHardSerial, date, temp);
+
+        assertTrue("Loaded calibrator doesn't match DB calibrator",
+                   CalibratorComparator.compare(fiCal, dbCal, true) == 0);
+    }
+
+    public static void main(String args[])
+    {
+        for (int i = 0; i < args.length; i++) {
+            if (seed != 0) {
+                System.err.println("Do not specify multiple andom seeds");
+                System.exit(1);
+            }
+
+            seed = Long.parseLong(args[i]);
+
+            if (seed == 0) {
+                System.err.println("Random seed cannot be zero");
+                System.exit(1);
+            }
+        }
+
+        junit.textui.TestRunner.run(suite());
+    }
+}
