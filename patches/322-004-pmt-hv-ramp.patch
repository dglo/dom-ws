Index: pmt_hv_ramp.xml
===================================================================
RCS file: /home/icecube/cvsroot/stf/private/stf-apps/pmt_hv_ramp.xml,v
retrieving revision 1.5
diff -u -r1.5 pmt_hv_ramp.xml
--- pmt_hv_ramp.xml	27 Aug 2004 14:14:37 -0000	1.5
+++ pmt_hv_ramp.xml	12 Jul 2005 19:13:55 -0000
@@ -4,7 +4,7 @@
   <name>pmt_hv_ramp</name>
   <description>PMT HV Ramp Up/Down Test</description>
 
-  <version major="1" minor="1"/>
+  <version major="1" minor="2"/>
 
   <inputParameter>
     <description>HV min voltage to start ramp (V)</description>
@@ -31,14 +31,20 @@
   </outputParameter>
   
   <outputParameter>
+    <description>Maximum error between HV set and read values (mV)</description>
+    <name>hv_max_diff_mv</name>
+    <unsignedInt/>
+  </outputParameter>  
+
+  <outputParameter>
     <description>Requested HV level with the greatest error (mV)</description>
     <name>hv_worst_set_mvolt</name>
     <unsignedInt/>
   </outputParameter>  
 
   <outputParameter>
-    <description>Read HV level with the greatest error (mV)</description>
-    <name>hv_worst_read_mvolt</name>
+    <description>Average error between HV set and read values (mV)</description>
+    <name>hv_avg_diff_mv</name>
     <unsignedInt/>
   </outputParameter>  
 
Index: pmt_hv_ramp.c
===================================================================
RCS file: /home/icecube/cvsroot/stf/private/stf-apps/pmt_hv_ramp.c,v
retrieving revision 1.8
diff -u -r1.8 pmt_hv_ramp.c
--- pmt_hv_ramp.c	8 Oct 2004 10:22:17 -0000	1.8
+++ pmt_hv_ramp.c	12 Jul 2005 19:14:00 -0000
@@ -8,11 +8,13 @@
  *  and then the base ADC to read it back out.  The voltage 
  *  is stepped up from a minimum to a maximum value and then 
  *  back down again.  Each HV level is allowed to settle for
- *  10s before the ADC is read.
+ *  5s before the ADC is read.
  *
- *  The output parameters indicate the HV level that had
- *  the greatest deviation when read, and the value that
- *  was read out.  The pass/fail criterion is the largest allowed
+ *  The output parameters indicate the greated deviation read out,
+ *  the HV DAC level that had the greatest deviation, and the
+ *  average deviation.
+ *  
+ *  The pass/fail criterion is the largest allowed
  *  deviation between the DAC and ADC voltages.
  *
  */
@@ -25,7 +27,7 @@
 #include "hal/DOM_MB_hal.h"
 
 /* Pass/fail defines */
-#define MAX_ERR_VOLT  15
+#define MAX_ERR_VOLT  30
 
 BOOLEAN pmt_hv_rampInit(STF_DESCRIPTOR *desc) { return TRUE; }
 
@@ -34,8 +36,9 @@
                          unsigned int hv_max_volt,
                          unsigned int hv_step_volt,
                          char **hv_id,
+                         unsigned int * hv_max_diff_mvolt,
                          unsigned int * hv_worst_set_mvolt,
-                         unsigned int * hv_worst_read_mvolt) {
+                         unsigned int * hv_avg_diff_mvolt) {
 
     unsigned int hv_set_level = 0;
     unsigned int hv_read_level = 0;
@@ -76,11 +79,15 @@
     #endif
 
     /* Read the HV base ID */
-    *hv_id = halHVSerial();
+    *hv_id = (char *) halHVSerial();
     #ifdef VERBOSE
     printf("DEBUG: HV ID is %s\r\n", *hv_id);
     #endif
 
+    /* Keep track of average */
+    float hv_err_sum = 0.0;
+    int hv_err_cnt = 0;
+
     /* Ramp the HV up and check the value each time */
     while (!done) {
         
@@ -92,16 +99,20 @@
         hv_read_level = halReadBaseADC();
         
         #ifdef VERBOSE
-        printf("%.1f %.1f\r\n", (float)hv_set_level/2, (float)hv_read_level/2);
+        printf("set %.1f read %.1f\r\n", (float)hv_set_level/2, (float)hv_read_level/2);
         #endif
 
         /* Check the read vs. set level */
         hv_this_err = abs(hv_read_level - hv_set_level);
-        if (hv_this_err > hv_err_level) {
+        hv_err_sum += hv_this_err;
+        hv_err_cnt++;
 
+        if (hv_this_err > hv_err_level) {
             hv_err_level = hv_this_err;
-            *hv_worst_set_mvolt  = hv_set_level  * 1000 / 2;
-            *hv_worst_read_mvolt = hv_read_level * 1000 / 2;
+            *hv_worst_set_mvolt  = hv_set_level * 500;
+            #ifdef VERBOSE
+            printf("New worst error: %.1f V\r\n", (float)hv_this_err/2);
+            #endif
         }
 
         /* Check to see if we've reached the max or min value */
@@ -125,6 +136,12 @@
                 hv_min_level : (hv_set_level - hv_step_level);           
         }
     }
+
+    /* Record the average */
+    *hv_avg_diff_mvolt = hv_err_sum * 500 / hv_err_cnt;
+
+    /* Record the worst error */
+    *hv_max_diff_mvolt = hv_err_level * 500;
 
     /* Turn the HV off */
     halPowerDownBase();
