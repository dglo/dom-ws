Index: dom-cal/project.xml
diff -u dom-cal/project.xml:1.2 dom-cal/project.xml:1.3
--- dom-cal/project.xml:1.2	Mon Aug  9 14:15:51 2004
+++ dom-cal/project.xml	Fri Oct 29 14:05:01 2004
@@ -1,11 +1,13 @@
 <project>
 	<name>dom-cal</name>
-	<packages default="">
-		
+	<packages default="icecube.daq.domcal">
+		icecube.daq.domcal
+		icecube.daq.domcal.app
 	</packages>
 	<uses>
 		<libs>
                         domhub-common.jar
+                        daq-db-common.jar
                 </libs>
 		<tools>
 			log4j.jar
@@ -14,7 +16,9 @@
 	</uses>
 	<test>
 		<uses>
-			<libs></libs>
+			<libs>
+				daq-db-common-test.jar
+			</libs>
 			<tools>
 				junit.jar
 			</tools>
Index: dom-cal/bin/rel-5.0/domcal5.bin.gz
Index: dom-cal/bin/rel-5.2/domcal5.bin.gz
Index: dom-cal/bin/rel-5.3/domcal5.bin.gz
Index: dom-cal/bin/rel-5.4/domcal5.bin.gz
Index: dom-cal/bin/rel-5.5/domcal5.bin.gz
Index: dom-cal/bin/rel-5.6/domcal5.bin.gz
Index: dom-cal/bin/rel-5.7/domcal5.bin.gz
Index: dom-cal/bin/rel-5.8/domcal5.bin.gz
Index: dom-cal/bin/rel-5.9/domcal5.bin.gz
Index: dom-cal/private/dom-cal/Makefile
diff -u dom-cal/private/dom-cal/Makefile:1.8 dom-cal/private/dom-cal/Makefile:1.11
--- dom-cal/private/dom-cal/Makefile:1.8	Wed Jul 14 14:21:43 2004
+++ dom-cal/private/dom-cal/Makefile	Fri Apr 15 13:59:24 2005
@@ -13,7 +13,7 @@
 #
 # Add new calibration routines here
 #
-CALOBJS  = atwd_cal.o amp_cal.o atwd_freq_cal.o pulser_cal.o hv_gain_cal.o
+CALOBJS  = atwd_cal.o amp_cal.o atwd_freq_cal.o pulser_cal.o hv_gain_cal.o baseline_cal.o hv_amp_cal.o transit_cal.o
 
 EXOBJS = calUtils.o spefit.o lmfit.o
 KOBJS = ../lib/crt0.o ../lib/libkernel.a
Index: dom-cal/private/dom-cal/amp_cal.c
diff -u dom-cal/private/dom-cal/amp_cal.c:1.18 dom-cal/private/dom-cal/amp_cal.c:1.21
--- dom-cal/private/dom-cal/amp_cal.c:1.18	Fri Aug 27 07:47:08 2004
+++ dom-cal/private/dom-cal/amp_cal.c	Fri Apr  1 13:26:25 2005
@@ -104,18 +104,20 @@
                 /* Using ATWD calibration data, convert to actual V */
                 if (atwd == 0) {
                     peak_v = (float)(channels[ch][bin]) * dom_calib->atwd0_gain_calib[ch][bin].slope
-                        + dom_calib->atwd0_gain_calib[ch][bin].y_intercept;
+                        + dom_calib->atwd0_gain_calib[ch][bin].y_intercept
+                        - dom_calib->atwd0_baseline[ch];
                 }
                 else {
                     peak_v = (float)(channels[ch][bin]) * dom_calib->atwd1_gain_calib[ch][bin].slope
-                        + dom_calib->atwd1_gain_calib[ch][bin].y_intercept;
+                        + dom_calib->atwd1_gain_calib[ch][bin].y_intercept
+                        - dom_calib->atwd1_baseline[ch];
                 }
 
                 /* Also subtract out bias voltage */
                 peak_v -= bias_v;
 
                 /* Note "peak" is actually a minimum */
-                if (bin == 0) {
+                if (bin == AMP_CAL_START_BIN) {
                     peaks[ch][trig] = peak_v;
                 }
                 else {
Index: dom-cal/private/dom-cal/atwd_cal.c
diff -u dom-cal/private/dom-cal/atwd_cal.c:1.10 dom-cal/private/dom-cal/atwd_cal.c:1.11
--- dom-cal/private/dom-cal/atwd_cal.c:1.10	Wed Jul 14 14:21:43 2004
+++ dom-cal/private/dom-cal/atwd_cal.c	Mon Mar 28 21:20:21 2005
@@ -48,13 +48,13 @@
     bias_idx = 0;
     for (bias = BIAS_LOW; bias <= BIAS_HIGH; bias += BIAS_STEP) {
 
-        /* Record the bias level, in volts, for the fit */
-        biases[bias_idx] = biasDAC2V(bias);
-
         /* Set the FE bias level */
         halWriteDAC(DOM_HAL_DAC_PMT_FE_PEDESTAL, bias);
         halUSleep(DAC_SET_WAIT);
-        
+
+        /* Record the bias level, in volts, for the fit */
+        biases[bias_idx] = biasDAC2V(bias);
+                
         /* Initialize the pedestal array */
         for(atwd=0; atwd<2; atwd++)
             for(ch=0; ch<3; ch++)
@@ -69,7 +69,7 @@
             trigger_mask = (atwd == 0) ? HAL_FPGA_TEST_TRIGGER_ATWD0 : 
                 HAL_FPGA_TEST_TRIGGER_ATWD1;
         
-            /* Warm up the ATWD */
+
             prescanATWD(trigger_mask);
         
             for (trig=0; trig<(int)ATWD_CAL_TRIG_CNT; trig++) {
Index: dom-cal/private/dom-cal/atwd_cal.h
diff -u dom-cal/private/dom-cal/atwd_cal.h:1.4 dom-cal/private/dom-cal/atwd_cal.h:1.5
--- dom-cal/private/dom-cal/atwd_cal.h:1.4	Wed Jul 28 08:27:57 2004
+++ dom-cal/private/dom-cal/atwd_cal.h	Mon Mar 28 21:20:21 2005
@@ -4,16 +4,16 @@
 
 /* FE bias level values for calibration */
 #ifdef DOMCAL_REV5
-#define BIAS_LOW  1200
+#define BIAS_LOW  1800
 #define BIAS_HIGH 2200
-#define BIAS_STEP  100
+#define BIAS_STEP   20
 #else
-#define BIAS_LOW  1000
+#define BIAS_LOW  1600
 #define BIAS_HIGH 2000
-#define BIAS_STEP  100
+#define BIAS_STEP   20
 #endif
 /* Redundant, but useful -- number of data points, including BIAS_HIGH */
-#define BIAS_CNT    11
+#define BIAS_CNT    21
 
 /* How many CPU triggers to average for each pedestal */
 #define ATWD_CAL_TRIG_CNT 100
Index: dom-cal/private/dom-cal/atwd_freq_cal.c
diff -u dom-cal/private/dom-cal/atwd_freq_cal.c:1.16 dom-cal/private/dom-cal/atwd_freq_cal.c:1.18
--- dom-cal/private/dom-cal/atwd_freq_cal.c:1.16	Wed Jul 14 14:21:43 2004
+++ dom-cal/private/dom-cal/atwd_freq_cal.c	Tue Apr 19 11:41:03 2005
@@ -35,7 +35,7 @@
 
     /* ATWD sampling speeds to be tested */
     short speed_settings[NUMBER_OF_SPEED_SETTINGS] = 
-               { 750, 1000, 1250, 1500, 1750, 2000, 2250, 2500 };
+               { 750, 800, 850, 900, 950, 1000, 1050, 1100 };
     
     /* Select oscillator analog mux input */
     halSelectAnalogMuxInput( DOM_HAL_MUX_OSC_OUTPUT );
@@ -68,7 +68,7 @@
     /* Restore DOM state */
     halWriteDAC( DOM_HAL_DAC_ATWD0_TRIGGER_BIAS, old_ATWD0_bias );
     halWriteDAC( DOM_HAL_DAC_ATWD1_TRIGGER_BIAS, old_ATWD1_bias );
-    halSelectAnalogMuxInput( DOM_HAL_MUX_FLASHER_LED_CURRENT );
+    halDisableAnalogMux();
 
     if ( ret0 != 0 ) {
         return ret0;
Index: dom-cal/private/dom-cal/baseline_cal.c
diff -u /dev/null dom-cal/private/dom-cal/baseline_cal.c:1.7
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/private/dom-cal/baseline_cal.c	Wed May 18 15:06:01 2005
@@ -0,0 +1,247 @@
+/*
+ * baseline_cal
+ *
+ * Calibrate out any remaining baseline after ATWD calibration.
+ * Can iterate over a number of HV settings.
+ *
+ */
+
+#include <stdio.h>
+#include <math.h>
+
+#include "hal/DOM_MB_hal.h"
+#include "hal/DOM_MB_fpga.h"
+
+#include "domcal.h"
+#include "baseline_cal.h"
+#include "hv_gain_cal.h"
+#include "calUtils.h"
+#include "spefit.h"
+
+/*---------------------------------------------------------------------------*/
+
+void getBaseline(calib_data *dom_calib, float max_var, float base[2][3]) {
+
+    short atwd, ch;
+    int cnt = 128;
+
+    int bin, trigger_mask, trig, wf_bad, wf_bad_cnt;
+    float true_wf[3][128], mean, var;
+    float var_avg;
+
+    /* Channel readout buffers for each channel and bin */
+    short channels[3][128];
+
+    /* Baseline waveform arrays for each atwd, channel, and voltage setting */
+    float baseline[2][3][128];
+
+    /* Get bias DAC setting */
+    short bias_dac = halReadDAC(DOM_HAL_DAC_PMT_FE_PEDESTAL);
+    float bias_v = biasDAC2V(bias_dac);
+
+    /* Iterate over each atwd */
+    for (atwd = 0; atwd < 2; atwd++) {
+
+        /* Initialize the baseline arrays */
+        for (ch = 0; ch < 3; ch++) {
+            for (bin = 0; bin < cnt; bin++)
+                baseline[atwd][ch][bin] = 0.0;
+        }
+        var_avg = 0.0;
+        
+        /* Trigger one ATWD only */
+        trigger_mask = (atwd == 0) ? HAL_FPGA_TEST_TRIGGER_ATWD0 : HAL_FPGA_TEST_TRIGGER_ATWD1;
+        
+        trig = 0;
+        wf_bad_cnt = 0;
+        while (trig < BASELINE_CAL_TRIG_CNT) {
+            
+            wf_bad = 0;
+
+            /* Warm up the ATWD */
+            prescanATWD(trigger_mask);
+   
+            /* CPU-trigger the ATWD */
+            hal_FPGA_TEST_trigger_forced(trigger_mask);
+        
+            /* Wait for done */
+            while (!hal_FPGA_TEST_readout_done(trigger_mask));
+            
+            /* Read out one waveform for all channels except 3 */        
+            if (atwd == 0) {
+                hal_FPGA_TEST_readout(channels[0], channels[1], channels[2], NULL, 
+                                      NULL, NULL, NULL, NULL,
+                                      cnt, NULL, 0, trigger_mask);
+            }
+            else {
+                hal_FPGA_TEST_readout(NULL, NULL, NULL, NULL,
+                                      channels[0], channels[1], channels[2], NULL,
+                                      cnt, NULL, 0, trigger_mask);
+            }
+            
+            /* For each bin, get the voltage */
+            for (ch = 0; ch < 3; ch++) {
+                for (bin = 0; bin < cnt; bin++) {
+                    float v;
+                    float val = (float)channels[ch][bin];
+                    /* Using ATWD calibration data, convert to V */
+                    if (atwd == 0) {
+                        v = val * dom_calib->atwd0_gain_calib[ch][bin].slope
+                            + dom_calib->atwd0_gain_calib[ch][bin].y_intercept;
+                    }
+                    else {
+                        v = val * dom_calib->atwd1_gain_calib[ch][bin].slope
+                            + dom_calib->atwd1_gain_calib[ch][bin].y_intercept;        
+                    }
+                    
+                    /* Also subtract out bias voltage */
+                    v -= bias_v;
+                    true_wf[ch][bin] = v;
+                }
+                
+                /* Check the variance */
+                /* Note that we assume that if variance is OK for channel 0 */
+                /* there is no contamination in any channel */
+                if (ch == 0) {
+                    meanVarFloat(true_wf[0], 128, &mean, &var);
+                    
+                    if (var > max_var) {
+                        wf_bad = 1;
+                        wf_bad_cnt++;
+                        if (wf_bad_cnt > BASELINE_CAL_TRIG_CNT) {
+                            max_var *= 1.5;
+                            wf_bad_cnt = 0;
+                        }
+                        break;
+                    }
+                    else
+                        var_avg += var;
+                }
+            }
+            
+            if (!wf_bad) {
+                trig++;
+                /* Variance is OK; record for average */
+                for (ch = 0; ch < 3; ch++)
+                    for (bin = 0; bin < cnt; bin++) 
+                        baseline[atwd][ch][bin] += true_wf[ch][bin];                     
+            }
+            
+        } /* End trigger loop */
+
+        /* Get average variance of channel 0 */
+        var_avg /= (float)BASELINE_CAL_TRIG_CNT;
+        /* Get the average baseline waveform */
+        for (ch = 0; ch < 3; ch++) {
+            
+            for(bin = 0; bin < cnt; bin++) {
+                baseline[atwd][ch][bin] /= (float)BASELINE_CAL_TRIG_CNT;
+            }
+             
+            /* Just get the mean */
+            /* Don't use first 3 samples -- "nook" in baseline is not understood */
+            meanVarFloat(baseline[atwd][ch]+3, cnt-3, &(base[atwd][ch]), &var);
+        }    
+    }               
+}
+
+/*---------------------------------------------------------------------------*/
+
+int baseline_cal(calib_data *dom_calib) {
+
+    /* Baseline results for each atwd and channel */
+    float baselines[2][3];
+
+#ifdef DEBUG
+    printf("Performing baseline calibration...\r\n");
+#endif
+
+    /* Disable the analog mux */
+    /* THIS AFFECTS THE BASELINE */
+    halDisableAnalogMux();
+
+    /* Don't need to worry about variance */
+    float max_var = 1.0;
+
+    /* Find the baselines */
+    getBaseline(dom_calib, max_var, baselines);
+
+    /* Record non-HV baselines into result structure */
+    int ch;
+    for (ch = 0; ch < 3; ch++) {
+        dom_calib->atwd0_baseline[ch] = baselines[0][ch];
+        dom_calib->atwd1_baseline[ch] = baselines[1][ch];
+    }
+
+    return 0;
+}
+
+/*---------------------------------------------------------------------------*/
+
+int hv_baseline_cal(calib_data *dom_calib) {
+
+    /* Baseline results for each HV, atwd, and channel */
+    float baselines[GAIN_CAL_HV_CNT][2][3];
+
+    /* Static results for structure */
+    static hv_baselines hv_base_data[GAIN_CAL_HV_CNT];
+
+#ifdef DEBUG
+    printf("Performing HV baseline calibration...\r\n");
+#endif
+
+    /* Disable the analog mux */
+    /* THIS AFFECTS THE BASELINE */
+    halDisableAnalogMux();
+
+    /* Turn on high voltage base */
+#if defined DOMCAL_REV2 || defined DOMCAL_REV3
+    halEnablePMT_HV();
+#else
+    halPowerUpBase();
+    halEnableBaseHV();
+#endif
+
+    /* Ensure HV base exists before performing calibration */
+    if (!checkHVBase()) {
+        dom_calib->hv_baselines_valid = 0;
+        return 0;
+    }
+
+    short hv_idx = 0;
+    short hv;
+
+    /* Loop over HV settings */
+    for (hv_idx = 0; hv_idx < GAIN_CAL_HV_CNT; hv_idx++) {
+        
+        /* Set high voltage and give it time to stabilize */
+        hv = (hv_idx * GAIN_CAL_HV_INC) + GAIN_CAL_HV_LOW;
+        
+#ifdef DEBUG
+        printf(" Setting HV to %d V\r\n", hv);
+#endif
+        
+        halWriteActiveBaseDAC(hv * 2);
+        halUSleep(5000000);
+
+        /* Starting maximum variance allowed for SPE exclusion */
+        float max_var = BASELINE_CAL_MAX_VAR;
+
+        getBaseline(dom_calib, max_var, baselines[hv_idx]);
+       
+        /* Store results */
+        hv_base_data[hv_idx].voltage = hv; 
+        int ch;
+        for (ch = 0; ch < 3; ch++) {
+            hv_base_data[hv_idx].atwd0_hv_baseline[ch] = baselines[hv_idx][0][ch];
+            hv_base_data[hv_idx].atwd1_hv_baseline[ch] = baselines[hv_idx][1][ch];
+        }
+
+    }
+
+    dom_calib->baseline_data = hv_base_data;
+    dom_calib->hv_baselines_valid = 1;
+
+    return 0;
+
+}
Index: dom-cal/private/dom-cal/baseline_cal.h
diff -u /dev/null dom-cal/private/dom-cal/baseline_cal.h:1.2
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/private/dom-cal/baseline_cal.h	Tue Apr 12 14:19:24 2005
@@ -0,0 +1,10 @@
+
+/* Number of pedestal patterns to average */
+#define BASELINE_CAL_TRIG_CNT       100
+
+/* Maximum variance of the baseline (for no waveform contamination) */
+#define BASELINE_CAL_MAX_VAR     3.0E-6
+
+void getBaseline(calib_data *dom_calib, float max_var, float base[2][3]);
+int hv_baseline_cal(calib_data *dom_calib);
+int baseline_cal(calib_data *dom_calib);
Index: dom-cal/private/dom-cal/calUtils.c
diff -u dom-cal/private/dom-cal/calUtils.c:1.8 dom-cal/private/dom-cal/calUtils.c:1.10
--- dom-cal/private/dom-cal/calUtils.c:1.8	Fri Aug 27 07:47:08 2004
+++ dom-cal/private/dom-cal/calUtils.c	Wed May 25 12:52:44 2005
@@ -4,6 +4,7 @@
  */
 
 #include <math.h>
+#include <string.h>
 
 #include "hal/DOM_MB_hal.h"
 #include "hal/DOM_MB_fpga.h"
@@ -113,6 +114,21 @@
       while (!hal_FPGA_TEST_readout_done(trigger_mask)) ;
       halUSleep(1000);
    }
+}
+
+
+/*---------------------------------------------------------------------------*/
+/*
+ * checkHVBase
+ *
+ * Check to make sure there *is* a HV base by looking at ID
+ * Avoids running on, say, the sync board
+ *
+ * Assume base has already been enabled 
+ */
+int checkHVBase() {
+    const char *hv_id = halHVSerial();
+    return strcmp(hv_id, "000000000000") == 0 ? 0 : 1;
 }
 
 /*---------------------------------------------------------------------------*/
Index: dom-cal/private/dom-cal/calUtils.h
diff -u dom-cal/private/dom-cal/calUtils.h:1.7 dom-cal/private/dom-cal/calUtils.h:1.8
--- dom-cal/private/dom-cal/calUtils.h:1.7	Wed Jul 28 08:27:57 2004
+++ dom-cal/private/dom-cal/calUtils.h	Wed May 18 15:06:01 2005
@@ -9,3 +9,4 @@
 void prescanATWD(unsigned int trigger_mask);
 void meanVarFloat(float *x, int pts, float *mean, float *var);
 void linearFitFloat(float *x, float *y, int pts, linear_fit *fit);
+int checkHVBase();
Index: dom-cal/private/dom-cal/domcal.c
diff -u dom-cal/private/dom-cal/domcal.c:1.40 dom-cal/private/dom-cal/domcal.c:1.50
--- dom-cal/private/dom-cal/domcal.c:1.40	Sat Sep 25 08:47:11 2004
+++ dom-cal/private/dom-cal/domcal.c	Wed May 18 15:06:01 2005
@@ -4,7 +4,7 @@
  * IceCube DOM front-end calibration application.
  * 
  * John Kelley and Jim Braun
- * UW-Madison, 2004
+ * UW-Madison, 2004-2005
  *
  */
 
@@ -28,6 +28,9 @@
 #include "pulser_cal.h"
 #include "atwd_freq_cal.h"
 #include "hv_gain_cal.h"
+#include "baseline_cal.h"
+#include "hv_amp_cal.h"
+#include "transit_cal.h"
 
 /*---------------------------------------------------------------------------*/
 /* 
@@ -66,8 +69,8 @@
 
     /* Get year */
     year = month = 0;
-    while ((year < 2004) || (year > 2050)) {
-        printf("Enter year (2004-...): ");
+    while ((year < 2005) || (year > 2050)) {
+        printf("Enter year (2005-...): ");
         fflush(stdout);    
         getstr(buf);
         year = atoi(buf);
@@ -143,6 +146,9 @@
     /* Make sure pulser is off */
     hal_FPGA_TEST_disable_pulser();
 
+    /* Set disc value for gain cal */
+    halWriteDAC(DOM_HAL_DAC_SINGLE_SPE_THRESH, GAIN_CAL_DISC_DAC);
+
 }
 
 
@@ -226,6 +232,20 @@
     return bytes_written;
 }
 
+int write_baseline(float *baseline, char *bin_data, int offset) {
+    int bytes_written = get_bytes_from_float(baseline[0], bin_data, offset);
+    bytes_written += get_bytes_from_float(baseline[1], bin_data, offset + bytes_written);
+    bytes_written += get_bytes_from_float(baseline[2], bin_data, offset + bytes_written);
+    return bytes_written;
+}
+
+int write_hv_baseline(hv_baselines *hv_baseline, char *bin_data, int offset ) {
+    int bytes_written = get_bytes_from_short(hv_baseline->voltage, bin_data, offset);
+    bytes_written += write_baseline(hv_baseline->atwd0_hv_baseline, bin_data, offset + bytes_written);
+    bytes_written += write_baseline(hv_baseline->atwd1_hv_baseline, bin_data, offset + bytes_written);
+    return bytes_written;
+}
+
 /* Writes a histogram to binary format */
 int write_histogram(hv_histogram *hist, char *bin_data, int offset) {
     int bytes_written = get_bytes_from_short(hist->voltage, bin_data, offset);
@@ -330,13 +350,35 @@
     offset += write_fit( &cal->atwd0_freq_calib, bin_data, offset );
     offset += write_fit( &cal->atwd1_freq_calib, bin_data, offset );
 
-    /* Write HV gain cal isValid */
-    offset += get_bytes_from_short( cal->hv_gain_valid, bin_data, offset );
+    /* Write baseline data */
+    offset += write_baseline(cal->atwd0_baseline, bin_data, offset);
+    offset += write_baseline(cal->atwd1_baseline, bin_data, offset);
+
+    /* Write transit cal isValid */
+    offset += get_bytes_from_short( cal->transit_calib_valid, bin_data, offset );
+
+    /* Write transit time data if necessary */
+    if (cal->transit_calib_valid) {
+        offset += write_fit(&cal->transit_calib, bin_data, offset);
+    }
 
     /* Write number of histos */
     offset += get_bytes_from_short(cal->num_histos, bin_data, offset );
 
-    /* Write each histo */
+    /* Write hv baselines valid */
+    offset += get_bytes_from_short( cal->hv_baselines_valid, bin_data, offset );
+
+    /* Write baselines if necessary */
+    if (cal->hv_baselines_valid) {
+        for (i = 0; i < cal->num_histos; i++) {
+            offset += write_hv_baseline(&cal->baseline_data[i], bin_data, offset);
+        }
+    }
+
+    /* Write HV gain cal isValid */
+    offset += get_bytes_from_short( cal->hv_gain_valid, bin_data, offset );
+
+    /* Write each histo and baseline */
     for (i = 0; i < cal->num_histos; i++) {
         offset += write_histogram(&cal->histogram_data[i], bin_data, offset);
     }
@@ -435,6 +477,21 @@
     r_size += dom_calib.num_histos * 4; //Noise rate
     r_size += dom_calib.num_histos * 2; //is_filled flag
 
+    
+    r_size += 2; //hv_baselines_valid
+    if (dom_calib.hv_baselines_valid) {
+        r_size += dom_calib.num_histos * 2 * 3 * 4; //hv_baselines
+        r_size += dom_calib.num_histos * 2; //baseline voltages
+    }
+
+    r_size += 2; //transit_calib_valid
+    if (dom_calib.transit_calib_valid) {
+        /* Transit cal */
+        r_size += 12;
+    }
+
+    r_size += 2 * 3 * 4; //baselines
+
     char binary_data[r_size];
 
     /* Convert DOM calibration data to binary format */
@@ -473,7 +530,7 @@
     get_date(&dom_calib);
     
     /* Ask user if they want an HV calibration */
-    printf("Do you want to perform an HV gain calibration (y/n)? ");
+    printf("Do you want to perform the HV portion of the calibration (y/n)? ");
     fflush(stdout);
     getstr(buf);
     printf("\r\n");
@@ -488,6 +545,8 @@
 #endif
     }
     dom_calib.hv_gain_valid = 0;
+    dom_calib.hv_baselines_valid = 0;
+    dom_calib.transit_calib_valid = 0;
 
     /* Init # histos returned */
     dom_calib.num_histos = doHVCal ? GAIN_CAL_HV_CNT : 0;
@@ -501,17 +560,24 @@
     /* Calibration modules:
      *  - pulser calibration
      *  - atwd calibration
+     *  - baseline calibration
      *  - amplifier calibration
      *  - sampling speed calibration
+     *  - HV baseline calibration
      *  - HV gain calibration
      */
     /* FIX ME: return real error codes */
     pulser_cal(&dom_calib);
     atwd_cal(&dom_calib);
+    baseline_cal(&dom_calib);
     amp_cal(&dom_calib);
     atwd_freq_cal(&dom_calib);
-    if (doHVCal)
+    if (doHVCal) {
+        transit_cal(&dom_calib);
+        hv_baseline_cal(&dom_calib);
+        hv_amp_cal(&dom_calib);
         hv_gain_cal(&dom_calib);
+    }
 
     /* FIX ME: FADC calibration is a placeholder */
     dom_calib.fadc_values[0] = 0;
Index: dom-cal/private/dom-cal/domcal.h
diff -u dom-cal/private/dom-cal/domcal.h:1.35 dom-cal/private/dom-cal/domcal.h:1.52
--- dom-cal/private/dom-cal/domcal.h:1.35	Fri Oct 22 09:10:13 2004
+++ dom-cal/private/dom-cal/domcal.h	Sun Jun 19 22:16:54 2005
@@ -8,8 +8,8 @@
 /* Version of calibration program -- Major version must
  * be incremented when changing structure of binary output
  */
-#define MAJOR_VERSION 4
-#define MINOR_VERSION 3
+#define MAJOR_VERSION 5
+#define MINOR_VERSION 9
 
 /* Default number of bytes in binary output */
 #define DEFAULT_RECORD_LENGTH 9388
@@ -62,6 +62,13 @@
     short is_filled;
 } hv_histogram;
 
+/* HV baselines */
+typedef struct {
+    short voltage;
+    float atwd0_hv_baseline[3];
+    float atwd1_hv_baseline[3];
+} hv_baselines;
+
 /* Calibration data structure */
 typedef struct {
     
@@ -88,6 +95,10 @@
     linear_fit atwd0_gain_calib[3][128];
     linear_fit atwd1_gain_calib[3][128];
     
+    /* ATWD baseline calibration (no HV) */
+    float atwd0_baseline[3];
+    float atwd1_baseline[3];
+
     /* FE amplifier calibration */
     value_error amplifier_calib[3];
     
@@ -98,14 +109,25 @@
     /* Valid bit for HV calibration */
     short hv_gain_valid;
 
+    /* HV baselines */
+    hv_baselines* baseline_data;
+
     /* Log(HV) vs. Log(gain) HV calibration fit */
     linear_fit hv_gain_calib;
 
+    /* transit time vs hv array */
+    linear_fit transit_calib;
+
     /* Number of histograms returned */
     short num_histos;
 
+    /* Valid bit for HV baseline calibration */
+    short hv_baselines_valid;
+
+    /* Valid bit for PMT transit calibration */
+    short transit_calib_valid;
+
     /* Histograms */
     hv_histogram* histogram_data;
-
 
 } calib_data;
Index: dom-cal/private/dom-cal/hv_amp_cal.c
diff -u /dev/null dom-cal/private/dom-cal/hv_amp_cal.c:1.13
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/private/dom-cal/hv_amp_cal.c	Sun Jun 19 22:10:21 2005
@@ -0,0 +1,407 @@
+/*
+ * hv_amp_cal
+ *
+ * Amplifier recalibration routine -- record waveform peaks in 
+ * ATWD channels for muons and use ATWD calibration to find 
+ * gain of each amplifier.  Uses only one ATWD.
+ *
+ */
+
+#include <stdio.h>
+#include <math.h>
+
+#include "hal/DOM_MB_hal.h"
+#include "hal/DOM_MB_fpga.h"
+
+#include "domcal.h"
+#include "amp_cal.h"
+#include "hv_amp_cal.h"
+#include "calUtils.h"
+#include "baseline_cal.h"
+
+/*---------------------------------------------------------------------------*/
+int hv_amp_cal(calib_data *dom_calib) {
+
+    const int cnt = 128;
+    int trigger_mask;
+    int ch, bin, trig, i;
+    float bias_v;
+    float peak_vdat[2][128];
+
+    int hv;
+    
+    /* Which atwd to use */
+    short atwd = AMP_CAL_ATWD;
+
+    /* Channel readout buffers for each channel and bin */
+    /* This test only uses one ATWD */
+    short channels[3][128];
+
+    /* Charge arrays for each channel, in Volts */
+    float charges[3][AMP_CAL_TRIG_CNT];
+
+    /* Charge arrays for higher gain channels, for later comparison, in Volts */
+    float hcharges[3][AMP_CAL_TRIG_CNT];
+
+#ifdef DEBUG
+    printf("Performing HV amplifier calibration (using ATWD%d)...\r\n", atwd);
+#endif
+
+    /* Save DACs that we modify */
+    short origBiasDAC = halReadDAC(DOM_HAL_DAC_PMT_FE_PEDESTAL);
+    short origDiscDAC = halReadDAC(DOM_HAL_DAC_SINGLE_SPE_THRESH);
+    /* Increase sampling speed to make sure we see peak */
+    short origSampDAC = halReadDAC((atwd == 0) ? DOM_HAL_DAC_ATWD0_TRIGGER_BIAS : 
+                                   DOM_HAL_DAC_ATWD1_TRIGGER_BIAS);
+    short old_led_value = halReadDAC(DOM_HAL_DAC_LED_BRIGHTNESS);
+
+    /* Set discriminator and bias level */
+    halWriteDAC(DOM_HAL_DAC_PMT_FE_PEDESTAL, AMP_CAL_PEDESTAL_DAC);   
+    halWriteDAC(DOM_HAL_DAC_SINGLE_SPE_THRESH, HV_AMP_CAL_DISC_DAC);
+    halWriteDAC((atwd == 0) ? DOM_HAL_DAC_ATWD0_TRIGGER_BIAS : 
+                DOM_HAL_DAC_ATWD1_TRIGGER_BIAS, AMP_CAL_SAMPLING_DAC);
+
+    bias_v = biasDAC2V(AMP_CAL_PEDESTAL_DAC);
+
+    /* Turn on high voltage base */
+#if defined DOMCAL_REV2 || defined DOMCAL_REV3
+    halEnablePMT_HV();
+#else
+    halPowerUpBase();
+    halEnableBaseHV();
+#endif
+
+    /* Ensure HV base exists before performing calibration */
+    if (!checkHVBase()) return 0;
+
+    hv = HV_AMP_CAL_VOLTS;
+                                                                                                                                               
+#ifdef DEBUG
+    printf(" Setting HV to %d V\r\n", hv);
+#endif
+                                                                                                                                               
+    halWriteActiveBaseDAC(hv * 2);
+    halUSleep(5000000);
+
+    /* Trigger one ATWD only */
+    trigger_mask = (atwd == 0) ? HAL_FPGA_TEST_TRIGGER_ATWD0 : HAL_FPGA_TEST_TRIGGER_ATWD1;
+
+    /* Loop over channels and pulser settings for each channel */
+    for (ch = 1; ch < 3; ch++) {
+
+        /* Check rate -- do we need to turn on LED? */
+        float rate = 0;
+
+        /* LED amplitude */
+        short led_amplitude = LED_OFF;
+
+        rate = measure_rate(atwd, ch-1);
+
+        while (rate < MIN_PULSE_RATE) {
+
+            /* OK -- not enough signal */
+            /* Turn on MB LED if off -- otherwise inc amplitude until */
+            /* we can see it */
+            if (led_amplitude == LED_OFF) {
+                 
+                hal_FPGA_TEST_enable_LED();
+                halEnableLEDPS();
+                led_amplitude = LED_MAX_AMPLITUDE;
+            } else {
+                led_amplitude -= LED_AMPLITUDE_DEC;
+            }
+
+            /* Can't do calibration if rate is too low */
+            if (led_amplitude < 0) {
+                /* FIX ME -- flag failure using ch2 gain error */
+                dom_calib->amplifier_calib[2].error = -1.0;
+
+                /* Put the DACs back to original state */
+                halWriteDAC(DOM_HAL_DAC_PMT_FE_PEDESTAL, origBiasDAC);
+                halWriteDAC(DOM_HAL_DAC_SINGLE_SPE_THRESH, origDiscDAC);
+                halWriteDAC((atwd == 0) ? DOM_HAL_DAC_ATWD0_TRIGGER_BIAS :
+                                DOM_HAL_DAC_ATWD1_TRIGGER_BIAS, origSampDAC);
+                if (led_amplitude != LED_OFF) {
+                    halWriteDAC(DOM_HAL_DAC_LED_BRIGHTNESS, old_led_value);
+                    halDisableLEDPS();
+                    hal_FPGA_TEST_disable_LED();
+                }
+                
+                return ERR_LOW_RATE;
+            }
+
+            /* Apply new setting and wait */
+            halWriteDAC(DOM_HAL_DAC_LED_BRIGHTNESS, led_amplitude);
+            halUSleep(DAC_SET_WAIT);
+
+            /* Measure rate */ 
+            rate = measure_rate(atwd, ch-1);
+
+            /* FIX ME DEBUG */
+            printf("Rate: %f LED amplitude: %d\n", rate, led_amplitude); 
+
+        }
+
+        /* OK -- we have illumination.  Let's re-check the baseline because */
+        /* just about everything affects it -- possibly even including the  */
+        /* position of Jupiter and recent solar activity..... */
+
+        float baseline[2][3];
+        getBaseline(dom_calib, BASELINE_CAL_MAX_VAR, baseline);
+
+        /* FIX ME DEBUG */
+        int iter = 0;
+
+ 
+        long long clk = hal_FPGA_TEST_get_local_clock();
+        short cidx = 1;
+
+        for (trig=0; trig<(int)AMP_CAL_TRIG_CNT; trig++) {
+
+            iter++;
+
+            /* Warm up the ATWD */
+            prescanATWD(trigger_mask);
+            
+            /* Discriminator trigger the ATWD */
+            hal_FPGA_TEST_trigger_disc(trigger_mask);
+            
+            /* Wait for done */
+            while (!hal_FPGA_TEST_readout_done(trigger_mask)) {
+
+                /* Check for timeout every 2^16 wait cycles */
+                if (cidx++ == 0) {
+                    
+                    long long dt = hal_FPGA_TEST_get_local_clock()-clk;
+                    int ms = (int)(dt / 40000);
+                    if (ms > MAX_AMP_CAL_ITER_MS) {
+
+                        /* We've timed out */
+                        /* FIX ME -- flag failure using ch2 gain error */
+                        dom_calib->amplifier_calib[2].error = -1.0;
+
+                        /* Put the DACs back to original state */
+                        halWriteDAC(DOM_HAL_DAC_PMT_FE_PEDESTAL, origBiasDAC);
+                        halWriteDAC(DOM_HAL_DAC_SINGLE_SPE_THRESH, origDiscDAC);
+                        halWriteDAC((atwd == 0) ? 
+                                DOM_HAL_DAC_ATWD0_TRIGGER_BIAS :
+                                DOM_HAL_DAC_ATWD1_TRIGGER_BIAS, origSampDAC);
+                        halWriteDAC(DOM_HAL_DAC_LED_BRIGHTNESS, old_led_value);
+                        halDisableLEDPS();
+                        hal_FPGA_TEST_disable_LED();
+
+                        return ERR_TIMEOUT;
+                    }
+                }
+            }
+                
+
+            /* Read out one waveform for all channels except 3 */        
+            if (atwd == 0) {
+                hal_FPGA_TEST_readout(channels[0], channels[1], channels[2], NULL, 
+                                      NULL, NULL, NULL, NULL,
+                                      cnt, NULL, 0, trigger_mask);
+            }
+            else {
+                hal_FPGA_TEST_readout(NULL, NULL, NULL, NULL,
+                                      channels[0], channels[1], channels[2], NULL,
+                                      cnt, NULL, 0, trigger_mask);
+            }
+
+            /* Look at raw ATWD data of higher gain channel, whose amplifier should be
+             * calibrated already, to check range
+             */
+
+            short max = 0;
+            for (bin = HV_AMP_CAL_START_BIN; bin < cnt; bin++) max = channels[ch-1][bin] > max ? 
+                                                             channels[ch-1][bin] : max;
+            if (max < HV_AMP_CAL_MIN_PULSE || max > HV_AMP_CAL_MAX_PULSE) {
+                trig--;
+                continue;
+            }
+
+            /* OK -- we have a reasonable muon pulse */
+
+            /* FIX ME DEBUG */
+            if (trig%10 == 0) {
+                long long dt = hal_FPGA_TEST_get_local_clock() - clk;
+                int time = dt / 40000;
+                printf("Got trigger %d loop iteration %d time %dms\n", trig, iter, time);
+            }
+
+            float current_v[2];
+            float peak_v[2];
+            int peak_bin[2];
+
+            /* Find and record charge.  Make sure it is in range */ 
+            for (bin=HV_AMP_CAL_START_BIN; bin<cnt; bin++) {
+
+
+                /* Using ATWD calibration data, convert to actual V */
+                if (atwd == 0) {
+                    current_v[0] = (float)(channels[ch][bin]) * dom_calib->atwd0_gain_calib[ch][bin].slope
+                        + dom_calib->atwd0_gain_calib[ch][bin].y_intercept
+                        - baseline[atwd][ch];
+                    current_v[1] = (float)(channels[ch-1][bin]) * dom_calib->atwd0_gain_calib[ch-1][bin].slope
+                        + dom_calib->atwd0_gain_calib[ch-1][bin].y_intercept
+                        - baseline[atwd][ch-1];
+                }
+                else {
+                    current_v[0] = (float)(channels[ch][bin]) * dom_calib->atwd1_gain_calib[ch][bin].slope
+                        + dom_calib->atwd1_gain_calib[ch][bin].y_intercept
+                        - baseline[atwd][ch];
+                    current_v[1] = (float)(channels[ch-1][bin]) * dom_calib->atwd1_gain_calib[ch-1][bin].slope
+                        + dom_calib->atwd1_gain_calib[ch-1][bin].y_intercept
+                        - baseline[atwd][ch-1];
+                }
+
+                /* Also subtract out bias voltage */
+                for (i = 0; i < 2; i++) current_v[i] -= bias_v;
+
+                /* Note "peak" is actually a minimum */
+                if (bin == AMP_CAL_START_BIN) {
+                    for (i = 0; i < 2; i++) {
+                        peak_v[i] = current_v[i];
+                        peak_bin[i] = bin;
+                    } 
+                } else {
+                    for (i = 0; i < 2; i++) {
+                        if (current_v[i] < peak_v[i]) {
+                            peak_bin[i] = bin;
+                            peak_v[i] = current_v[i];
+                        }
+                    }
+                }
+                        
+                /* Save voltage data for integration */
+                for (i = 0; i < 2; i++) peak_vdat[i][bin] = current_v[i];
+            }
+
+            /* Integrate around peak bin */
+            /* Set limits */
+            int mins[2];
+            int maxes[2];
+            for (i = 0; i < 2; i++) {
+                mins[i] = peak_bin[i] - CHARGE_FOW_BINS < AMP_CAL_START_BIN ? AMP_CAL_START_BIN : peak_bin[i] - CHARGE_FOW_BINS;
+                maxes[i] = peak_bin[i] + CHARGE_REV_BINS > cnt-1 ? cnt-1 : peak_bin[i] + CHARGE_REV_BINS;
+            }   
+
+            float charge_data[2];
+            for (i = 0; i < 2; i++) charge_data[i] = 0;
+
+            /* Integrate charge */
+            for (i = 0; i < 2; i++) {
+                for (bin = mins[i]; bin <= maxes[i]; bin++) charge_data[i] += peak_vdat[i][bin];
+            }
+
+            charges[ch][trig] = charge_data[0];
+            hcharges[ch-1][trig] = charge_data[1];
+
+        }
+
+        /* Turn off LED and LED PS between channel calibration */
+        halDisableLEDPS();
+        hal_FPGA_TEST_disable_LED();
+        halUSleep(DAC_SET_WAIT);
+    }
+
+    float mean, var;
+    for (ch = 1; ch < 3; ch++) {
+        /* Divide by charges in higher gain ch to get amp ratio */
+        /* Multiply by known amplification factor to find gain */
+        for (bin = 0; bin < AMP_CAL_TRIG_CNT; bin++) {
+
+            charges[ch][bin] /= hcharges[ch-1][bin];
+            charges[ch][bin] *= dom_calib->amplifier_calib[ch-1].value;
+        }
+
+        /* Find mean and var */
+        meanVarFloat(charges[ch], AMP_CAL_TRIG_CNT, &mean, &var);
+
+        /* FIX ME */
+#ifdef DEBUG
+        printf("Old gain for ch %d: %g\r\n", ch, dom_calib->amplifier_calib[ch].value);
+        printf("Old error for ch %d: %g\r\n", ch, dom_calib->amplifier_calib[ch].error);
+#endif
+
+        dom_calib->amplifier_calib[ch].value = mean;
+        dom_calib->amplifier_calib[ch].error = var;
+
+        /* FIX ME */
+#ifdef DEBUG
+        printf("Gain for ch %d: %g\r\n", ch, (mean));
+        printf("Error for ch %d: %g\r\n", ch, (var));
+#endif
+    }
+
+    /* Put the DACs back to original state */
+    halWriteDAC(DOM_HAL_DAC_PMT_FE_PEDESTAL, origBiasDAC);   
+    halWriteDAC(DOM_HAL_DAC_SINGLE_SPE_THRESH, origDiscDAC);
+    halWriteDAC((atwd == 0) ? DOM_HAL_DAC_ATWD0_TRIGGER_BIAS : 
+                DOM_HAL_DAC_ATWD1_TRIGGER_BIAS, origSampDAC);
+    halWriteDAC(DOM_HAL_DAC_LED_BRIGHTNESS, old_led_value);
+
+    /* Won't turn off the HV for now...*/
+
+    /* FIX ME: return real error code */
+    return 0;
+
+}
+
+float measure_rate(int atwd, int ch) {
+
+    /* LED rate is >1KHz, so no prescan needed in this loop */
+
+    /* ATWD readout */
+    short channels[2][128];
+
+    /* Trigger one ATWD only */
+    int trigger_mask = (atwd == 0) ? HAL_FPGA_TEST_TRIGGER_ATWD0 : HAL_FPGA_TEST_TRIGGER_ATWD1;
+
+    /* Readout length */
+    int cnt = 128;
+
+    /* Number of pulses above threshold */
+    int p_cnt = 0;
+
+    /* store start clk for rate measurement */
+    long long clk_st = hal_FPGA_TEST_get_local_clock();
+
+    long long clk;
+    for (clk = hal_FPGA_TEST_get_local_clock();
+            clk - clk_st < TEST_TRIG_TIME * FPGA_HAL_TICKS_PER_SEC;
+            clk = hal_FPGA_TEST_get_local_clock()) {
+
+        /* LED trigger the ATWD */
+        hal_FPGA_TEST_trigger_disc(trigger_mask);
+
+
+        /* Wait for done */
+        while (!hal_FPGA_TEST_readout_done(trigger_mask));
+
+
+        /* Read out one waveform for all channels except 2, 3 */
+        if (atwd == 0) {
+            hal_FPGA_TEST_readout(channels[0], channels[1], NULL , NULL,
+                                      NULL, NULL, NULL, NULL,
+                                      cnt, NULL, 0, trigger_mask);
+        }
+        else {
+            hal_FPGA_TEST_readout(NULL, NULL, NULL, NULL,
+                                  channels[0], channels[1], NULL, NULL,
+                                  cnt, NULL, 0, trigger_mask);
+        }
+
+        /* Find max from raw ATWD data */
+        short max = 0;
+        int bin;
+        for (bin = HV_AMP_CAL_START_BIN; bin < cnt; bin++) {
+            if (channels[ch][bin] > max) max = channels[ch][bin];
+        }
+
+        /* Is pulse of acceptable amplitude */
+        if (max > HV_AMP_CAL_MIN_PULSE && max < HV_AMP_CAL_MAX_PULSE) p_cnt++;
+    }
+
+    return (float)p_cnt / TEST_TRIG_TIME;
+}
Index: dom-cal/private/dom-cal/hv_amp_cal.h
diff -u /dev/null dom-cal/private/dom-cal/hv_amp_cal.h:1.10
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/private/dom-cal/hv_amp_cal.h	Sun Jun 19 22:10:21 2005
@@ -0,0 +1,49 @@
+/*
+ * hv_amp_cal header file
+ */
+
+/* HV setting for calibration MUST be an exact voltage used in hv_baseline calibration*/
+#define HV_AMP_CAL_VOLTS 1400
+
+/* Disc setting to eliminate most SPE */
+#define HV_AMP_CAL_DISC_DAC  900
+
+/* Max and min atwd bin cnt of ch i to calibrate ch i+1 */
+#define HV_AMP_CAL_MIN_PULSE 600
+#define HV_AMP_CAL_MAX_PULSE 800
+
+/* Time constant for rate measurement */
+#define TEST_TRIG_TIME 5 //seconds
+
+/* LED amplitude decrement */
+#define LED_AMPLITUDE_DEC 5
+
+/* LED amplitude setting to denote LED is off */
+#define LED_OFF 0x6fff 
+
+/* Minimum acceptable rate of pulses capable of amp calibration */
+#define MIN_PULSE_RATE 8.0
+
+/* Maximum amplitude of LED */
+#define LED_MAX_AMPLITUDE 1023
+
+/* Using LED -- pulse could be anywhere! */
+#define HV_AMP_CAL_START_BIN 0
+
+/* Error code returned due to low rate */
+#define ERR_LOW_RATE 2
+
+/* Error code returned due to timeout */
+#define ERR_TIMEOUT 3
+
+/* Timeout interval for an iteration */
+#define MAX_AMP_CAL_ITER_MS 360000 //6 minutes should be enough...
+
+/* Charge integration limits */
+#define CHARGE_REV_BINS 6
+#define CHARGE_FOW_BINS 12
+
+/* Prototypes */
+int hv_amp_cal(calib_data *dom_calib);
+float measure_rate(int atwd, int ch);
+short get_led_amp(short center, short var);
Index: dom-cal/private/dom-cal/hv_gain_cal.c
diff -u dom-cal/private/dom-cal/hv_gain_cal.c:1.25 dom-cal/private/dom-cal/hv_gain_cal.c:1.34
--- dom-cal/private/dom-cal/hv_gain_cal.c:1.25	Tue Oct 26 09:40:48 2004
+++ dom-cal/private/dom-cal/hv_gain_cal.c	Tue Jun 14 09:16:40 2005
@@ -80,8 +80,8 @@
     /* Make sure pulser is off */
     hal_FPGA_TEST_disable_pulser();
 
-    /* Select something static into channel 3 */
-    halSelectAnalogMuxInput(DOM_HAL_MUX_FLASHER_LED_CURRENT);
+    /* Disable the analog mux -- it affects the baseline! */
+    halDisableAnalogMux();
 
     /* Trigger one ATWD only */
     trigger_mask = (atwd == 0) ? HAL_FPGA_TEST_TRIGGER_ATWD0 : HAL_FPGA_TEST_TRIGGER_ATWD1;
@@ -96,12 +96,6 @@
 
     freq = getCalibFreq(atwd, *dom_calib, samp_dac);
 
-    /* Give user a final warning */
-#ifdef DEBUG
-    printf(" *** WARNING: enabling HV in 5 seconds! ***\r\n");
-#endif
-    halUSleep(5000000);
-
     /* Turn on high voltage base */
 #if defined DOMCAL_REV2 || defined DOMCAL_REV3
     halEnablePMT_HV();
@@ -112,11 +106,7 @@
 
     /* Check to make sure there *is* a HV base by looking at ID */
     /* Avoids running on, say, the sync board */
-    const char *hv_id = halHVSerial();
-#ifdef DEBUG
-    printf("HV ID is %s\r\n", hv_id);
-#endif
-    if (strcmp(hv_id, "000000000000") == 0) {
+    if (!checkHVBase()) {
 #ifdef DEBUG
         printf("All-zero HV ID!  No HV base attached; aborting gain calibration.\r\n");
 #endif
@@ -182,72 +172,13 @@
             continue;
         }
 
-        /* baseline should be independent of ATWD bin -- can store in one variable */
-        float baseline = 0;
-
-        /* number of 'baseline' readouts flagged as containing wf */
-        int wf_bad = 0;
-
-        /* max allowed variance */
-        float max_var = MAXIMUM_BASELINE_VARIANCE;
-
-        /* Calculate baseline */
-        for (trig=0; trig<BASELINE_TRIG_CNT; trig++) {
-
-            /* Warm up the ATWD */
-            prescanATWD(trigger_mask);
-
-            /* read it! */
-            hal_FPGA_TEST_trigger_forced(trigger_mask);
-            while (!hal_FPGA_TEST_readout_done(trigger_mask));
-            if (atwd == 0) {
-                hal_FPGA_TEST_readout(channels[0], NULL, NULL, NULL,
-                                      NULL, NULL, NULL, NULL,
-                                      cnt, NULL, 0, trigger_mask);
-            }
-            else {
-                hal_FPGA_TEST_readout(NULL, NULL, NULL, NULL,
-                                      channels[0], NULL, NULL, NULL,
-                                      cnt, NULL, 0, trigger_mask);
-            }
-
-            int i;
-
-            /* calibrated waveform */
-            float wf[128];
-
-            /* calibrate waveform */
-            for (i = 0; i < 128; i++) wf[i] = getCalibV(channels[0][i], *dom_calib, atwd, 0, i, bias_v);
-
-            /* look at the variance for evidence of signal */
-            float mean, var;
-            meanVarFloat(wf, 128, &mean, &var);
-
-            /* if variance is too large, redo this iteration */
-            if (var > max_var) {
-                trig--;
-                wf_bad++;
-                
-                /* if we have too many bad 'baseline' readouts, maybe we're too stringent */
-                if (wf_bad == BASELINE_TRIG_CNT) {
-                    wf_bad = 0;
-                    max_var *= 1.2;
-                }
-
-                continue;
-            }
-
-            /* sum up the ATWD readout */
-            for (i = 0; i < 128; i++) baseline += wf[i];
- 
-        }
-
-        /* get final baseline value */
-        baseline /= (128 * BASELINE_TRIG_CNT);
-
-#ifdef DEBUG
-        printf("PMT baseline is %f\r\n", baseline);
-#endif
+        /* retrieve baseline vals vor atwd/hv_idx, correct for amp gain */
+        
+        float baseline[3];
+        int i;
+        for (i = 0; i < 3; i++) baseline[i] = (atwd == 0) ? 
+                   dom_calib->baseline_data[hv_idx].atwd0_hv_baseline[i] / dom_calib->amplifier_calib[i].value :
+                   dom_calib->baseline_data[hv_idx].atwd1_hv_baseline[i] / dom_calib->amplifier_calib[i].value;
 
         /* Number of points with negative charge */
         int bad_trig = 0;
@@ -325,12 +256,12 @@
             vsum = 0;
 
             for (bin = int_min; bin <= int_max; bin++)
-                vsum += (getCalibV(channels[ch][bin], *dom_calib, atwd, ch, bin, bias_v) - baseline);
+                vsum += (getCalibV(channels[ch][bin], *dom_calib, atwd, ch, bin, bias_v) - baseline[ch]);
 
             /* True charge, in pC = 1/R_ohm * sum(V) * 1e12 / (freq_mhz * 1e6) */
             /* FE sees a 50 Ohm load */
             charges[trig] = 0.02 * 1e6 * vsum / freq;
- 
+
             if (charges[trig] < 0) {
                 trig--;
                 if (++bad_trig > GAIN_CAL_TRIG_CNT) break;
@@ -399,18 +330,24 @@
     /* If no error in fit, record gain and P/V */
     if (!fiterr) {
 
-        float valley_x, valley_y, pv_ratio;
+        float valley_x, valley_y, peak_y, pv_ratio;
         /* Find valley */
         int val = spe_find_valley(fit_params[hv_idx], &valley_x, &valley_y);
         if (val == 0) {
 
-            pv_ratio = fit_params[hv_idx][2] / valley_y;
+            /* Peak value is Gaussian + exponential at x-value defined */
+            /* by Gaussian peak */
+            peak_y = fit_params[hv_idx][2] + 
+                (fit_params[hv_idx][0] * exp(-1.0 * fit_params[hv_idx][1] * fit_params[hv_idx][3]));
+
+            pv_ratio = peak_y / valley_y;
 #ifdef DEBUG
+            printf("Full peak (exp + gaussian) = %.6g\r\n", peak_y);
             printf("Valley located at %.6g, %.6g: PV = %.2g\r\n", valley_x, valley_y, pv_ratio);
 #endif
             
-            /* If PV is too high, we don't have true peak and valley */
-            if ((pv_ratio > 0.0) && (pv_ratio < GAIN_CAL_MAX_SANE_PV)) {
+            /* If PV < 1.5, fit is likely messed up */
+            if (pv_ratio > 1.5) {
 
                 log_hv[spe_cnt] = log10(hv);
                 log_gain[spe_cnt] = log10(fit_params[hv_idx][3] / Q_E) - 12.0;
Index: dom-cal/private/dom-cal/hv_gain_cal.h
diff -u dom-cal/private/dom-cal/hv_gain_cal.h:1.16 dom-cal/private/dom-cal/hv_gain_cal.h:1.19
--- dom-cal/private/dom-cal/hv_gain_cal.h:1.16	Fri Oct 22 12:24:34 2004
+++ dom-cal/private/dom-cal/hv_gain_cal.h	Wed May 18 22:33:29 2005
@@ -33,10 +33,6 @@
 #define INT_WIN_MIN               8
 #define INT_WIN_MAX               4
 
-/* Largest P/V we might consider a real measurement */
-/* Larger ones are not used in fit */
-#define GAIN_CAL_MAX_SANE_PV    8.0
-
 /* Charge of e, Coulombs */
 #define Q_E               1.602E-19
 
@@ -48,9 +44,6 @@
 
 /* Number of PMT baseline ATWD readouts to take */
 #define BASELINE_TRIG_CNT      10
-
-/* Maximum allowed variance of PMT baseline ATWD readout */
-#define MAXIMUM_BASELINE_VARIANCE   0.01E-6
 
 /* Prototypes */
 int hv_gain_cal(calib_data *dom_calib);
Index: dom-cal/private/dom-cal/spefit.c
diff -u dom-cal/private/dom-cal/spefit.c:1.18 dom-cal/private/dom-cal/spefit.c:1.23
--- dom-cal/private/dom-cal/spefit.c:1.18	Tue Oct 26 13:44:37 2004
+++ dom-cal/private/dom-cal/spefit.c	Tue Jun 21 12:13:36 2005
@@ -61,7 +61,7 @@
     /* Gaussian amplitude */
     params[2] = histmax;
 
-    float *xvals = (float *) malloc((int)sum * sizeof(float));
+    float xvals[(int)sum];
 
     int j;
     int indx = 0;
@@ -81,11 +81,11 @@
     /* Exponential amplitude */
     params[0] = y[0];
     /* Zero amplitude will crash fit! */
-    if (params[0] == 0.0) params[0] = 0.01;   
+    if (params[0] == 0.0) params[0] = 0.01;
 
     /* Gaussian center */
     params[3] = mean;
-                                                           
+
     /* Gaussian width */
     params[4] = 1.0 / ( 2 * variance );
 
@@ -108,14 +108,19 @@
      
     /* Find valley (first minimum) with Newton-Raphson search for zero
        of first derivative */
-    x = a[3] / 2;
+
+    /* First guess -- set exponential and gaussian equal */
+    float root = sqrt(a[1]*a[1] + 4*a[3]*a[4]*a[1] - 4*a[4]*log(a[0]/a[2]));
+    x = (a[1] + 2*a[3]*a[4] - root) / (2 * a[4]);
+
+
     int iter = 0;
     int done = 0;
     int converged = 0;
     int err = 0;
 
     while (!done) {
-    
+
         xoff = x - a[3];
         e1 = exp(-a[1] * x);
         e2 = exp(-xoff * xoff * a[4]);
@@ -255,6 +260,14 @@
         /* Loop is done when the max number of iterations is reached */
         /* or when chi-squared has decreased, but only by a small amount */
         /* Decrease can be small absolutely or as a percentage */
+
+        /* FIX ME DEBUG */
+        /* print current parameters */
+        printf("Parameter values, iteration %d:\r\n", iter);
+        printf("Chisq: %.6g\r\n", chisq);
+        for (i = 0; i < SPE_FIT_PARAMS; i++)
+            printf(" a[%d] = %g\n", i, fit_params[i]);
+
         iter++;
         del_chisq = old_chisq - chisq;
         converged = (del_chisq > 0) && ((del_chisq < SPE_FIT_CHISQ_ABS_DONE) ||
@@ -306,7 +319,8 @@
                 err = SPE_FIT_ERR_BAD_FIT;
         }
 
-        if (fit_params[3] > xdata[pts-1]) err = SPE_FIT_ERR_BAD_FIT;
+        /* Make sure gaussian max isn't out of the fitted range */
+        if (fit_params[3] > xdata[start_bin + ndata-1]) err = SPE_FIT_ERR_BAD_FIT;
     }
     else {
 #ifdef DEBUG
Index: dom-cal/private/dom-cal/transit_cal.c
diff -u /dev/null dom-cal/private/dom-cal/transit_cal.c:1.5
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/private/dom-cal/transit_cal.c	Wed May 18 15:06:01 2005
@@ -0,0 +1,384 @@
+/*
+ * transit_cal
+ *
+ * Transit time calibration -- measure mainboard LED light pulse and
+ * current pulse with LED-triggered waveforms, and compute offset.  
+ * Includes PMT transit time and delay board.
+ *
+ */
+
+#include <stdio.h>
+#include <math.h>
+
+#include "hal/DOM_MB_hal.h"
+#include "hal/DOM_MB_fpga.h"
+
+#include "domcal.h"
+#include "calUtils.h"
+#include "baseline_cal.h"
+#include "transit_cal.h"
+
+/*---------------------------------------------------------------------------*/
+int transit_cal(calib_data *dom_calib) {
+
+    const int cnt = 128;
+    int trigger_mask;
+    int ch, bin, trig;
+    float bias_v, peak_v, bin_v;
+    int hv;
+        
+    /* Which atwd to use */
+    short atwd = TRANSIT_CAL_ATWD;
+    
+    /* Trigger one ATWD only */
+    trigger_mask = (atwd == 0) ? HAL_FPGA_TEST_TRIGGER_ATWD0 : HAL_FPGA_TEST_TRIGGER_ATWD1;
+
+    /* Channel readout buffers for each channel and bin */
+    /* This test only uses one ATWD */
+    short channels[4][128];
+
+    /* Pedestal pattern in channel 3 */
+    float pedestal[128];
+
+    /* Leading-edge differences btw current and light */
+    float transits[TRANSIT_CAL_TRIG_CNT];
+
+    /* Results -- mean and error at each point */
+    float transit_data[TRANSIT_CAL_HV_CNT];
+
+#ifdef DEBUG
+    printf("Performing PMT transit time calibration (using ATWD%d)...\r\n", atwd);
+#endif
+
+    /* Save DACs that we modify */
+    short origBiasDAC = halReadDAC(DOM_HAL_DAC_PMT_FE_PEDESTAL);
+    short origSampDAC = halReadDAC((atwd == 0) ? DOM_HAL_DAC_ATWD0_TRIGGER_BIAS : 
+                                   DOM_HAL_DAC_ATWD1_TRIGGER_BIAS);
+    short origLedDAC  = halReadDAC(DOM_HAL_DAC_LED_BRIGHTNESS);
+
+    /* Set discriminator and bias level */
+    halWriteDAC(DOM_HAL_DAC_PMT_FE_PEDESTAL, TRANSIT_CAL_PEDESTAL_DAC);   
+    halWriteDAC((atwd == 0) ? DOM_HAL_DAC_ATWD0_TRIGGER_BIAS : 
+                DOM_HAL_DAC_ATWD1_TRIGGER_BIAS, TRANSIT_CAL_SAMPLING_DAC);
+    
+    /* Set the launch delay */
+    hal_FPGA_TEST_set_atwd_LED_delay(TRANSIT_CAL_LAUNCH_DELAY);
+
+    /* Enable the analog mux and select the mainboard LED current */
+    halSelectAnalogMuxInput(DOM_HAL_MUX_PMT_LED_CURRENT);
+
+    /* Get bias voltage */
+    bias_v = biasDAC2V(TRANSIT_CAL_PEDESTAL_DAC);
+   
+    /* Get sampling speed frequency in MHz */    
+    float freq = getCalibFreq(atwd, *dom_calib, TRANSIT_CAL_SAMPLING_DAC);
+
+    /* Give user a final warning */
+#ifdef DEBUG
+    printf(" *** WARNING: enabling HV in 5 seconds! ***\r\n");
+#endif
+    halUSleep(5000000);
+
+    /* Turn on high voltage base */
+#if defined DOMCAL_REV2 || defined DOMCAL_REV3
+    halEnablePMT_HV();
+#else
+    halPowerUpBase();
+    halEnableBaseHV();
+#endif
+
+    /* Ensure HV base exists before performing calibration */
+    if (!checkHVBase()) {
+        dom_calib->transit_calib_valid = 0;
+        return 0;
+    }
+
+    /*---------------------------------------------------------------------------*/    
+    /* Turn on the LED power supply before measuring pedestal */                
+
+    /* Need to use LED triggers, because the 20MHz clock couples into the signal */
+    /* Using LED triggers without LED power, we can largely subtract this out! */
+
+    halDisableLEDPS();
+
+    /* Start "flashing" */
+    hal_FPGA_TEST_enable_LED();
+
+    /* Get pedestal for channel 3 (uncalibrated!) */
+    for (bin=0; bin<cnt; bin++)
+        pedestal[bin] = 0.0;
+
+    for (trig=0; trig<(int)TRANSIT_CAL_TRIG_CNT; trig++) {
+            
+        /* Warm up the ATWD */
+        prescanATWD(trigger_mask);
+            
+        /* LED-trigger the ATWD */
+        hal_FPGA_TEST_trigger_LED(trigger_mask);
+            
+            /* Wait for done */
+        while (!hal_FPGA_TEST_readout_done(trigger_mask));
+        
+        /* Read out one waveform for channel 3 */        
+        if (atwd == 0) {
+            hal_FPGA_TEST_readout(NULL, NULL, NULL, channels[3],
+                                  NULL, NULL, NULL, NULL,
+                                  cnt, NULL, 0, trigger_mask);
+        }
+        else {
+            hal_FPGA_TEST_readout(NULL, NULL, NULL, NULL,
+                                  NULL, NULL, NULL, channels[3],
+                                  cnt, NULL, 0, trigger_mask);
+        }
+
+        for(bin = 0; bin<cnt; bin++)
+            pedestal[bin] += (float)channels[3][bin];
+        
+    }
+
+    /* Get the average */
+    for (bin = 0; bin<cnt; bin++)
+        pedestal[bin] /= TRANSIT_CAL_TRIG_CNT;
+
+    /* Turn on the LED power */
+    halEnableLEDPS();
+
+    /* Set the LED brightness */
+    int brightness = TRANSIT_CAL_LED_AMPLITUDE; 
+    halWriteDAC(DOM_HAL_DAC_LED_BRIGHTNESS, brightness);
+
+    /* Loop over HV settings */
+    int variance_fails = 0;
+    int hv_idx, peak_idx;
+    float le_atwd_idx, le_current_idx;
+
+    for (hv_idx = 0; hv_idx < TRANSIT_CAL_HV_CNT; hv_idx++) {
+
+        float peak_avg = 0.0;
+        float current_peak_avg = 0.0;
+
+        /* Set high voltage and give it time to stabilize */
+        hv = (hv_idx * TRANSIT_CAL_HV_INC) + TRANSIT_CAL_HV_LOW;      
+
+#ifdef DEBUG
+        printf(" Setting HV to %d V\r\n", hv);
+#endif
+        halWriteActiveBaseDAC(hv * 2);
+        halUSleep(5000000);
+
+        /* Get baseline */
+        float baseline[2][3];
+        getBaseline(dom_calib, BASELINE_CAL_MAX_VAR, baseline);
+
+        /* Take a number of waveforms */
+        for (trig=0; trig<(int)TRANSIT_CAL_TRIG_CNT; trig++) {
+            
+            /* Warm up the ATWD */
+            prescanATWD(trigger_mask);
+            
+            /* LED-trigger the ATWD */
+            hal_FPGA_TEST_trigger_LED(trigger_mask);
+            
+            /* Wait for done */
+            while (!hal_FPGA_TEST_readout_done(trigger_mask));
+            
+            /* Read out one waveform for all channels */        
+            if (atwd == 0) {
+                hal_FPGA_TEST_readout(channels[0], channels[1], channels[2], channels[3],
+                                      NULL, NULL, NULL, NULL,
+                                      cnt, NULL, 0, trigger_mask);
+            }
+            else {
+                hal_FPGA_TEST_readout(NULL, NULL, NULL, NULL,
+                                      channels[0], channels[1], channels[2], channels[3],
+                                      cnt, NULL, 0, trigger_mask);
+            }
+
+            /* FIX ME -- CHECK AMPLITUDE? */
+            ch = TRANSIT_CAL_CH;
+
+            /* Find the peak in the ATWD waveform */            
+            peak_idx = 0;
+            if (atwd == 0) {
+                peak_v = (float)channels[ch][0] * dom_calib->atwd0_gain_calib[ch][0].slope
+                    + dom_calib->atwd0_gain_calib[ch][0].y_intercept;
+            }
+            else {
+                peak_v = (float)channels[ch][0] * dom_calib->atwd1_gain_calib[ch][0].slope
+                    + dom_calib->atwd1_gain_calib[ch][0].y_intercept;
+            }
+            peak_v -= baseline[atwd][ch];
+            peak_v -= bias_v;
+
+            for (bin=0; bin<cnt; bin++) {
+                
+                /* Use calibration to convert to V */
+                /* Don't need to subtract out bias or correct for amplification to find */
+                /* peak location -- but without correction, it is really a minimum */
+                if (atwd == 0) {
+                    bin_v = (float)channels[ch][bin] * dom_calib->atwd0_gain_calib[ch][bin].slope
+                        + dom_calib->atwd0_gain_calib[ch][bin].y_intercept;
+                    bin_v -= baseline[0][ch];
+                    bin_v -= bias_v;
+                }
+                else {
+                    bin_v = (float)channels[ch][bin] * dom_calib->atwd1_gain_calib[ch][bin].slope
+                        + dom_calib->atwd1_gain_calib[ch][bin].y_intercept;
+                    bin_v -= baseline[0][ch];
+                    bin_v -= bias_v;
+                }
+                
+                if (bin_v < peak_v) {
+                    peak_idx = bin;
+                    peak_v = bin_v;
+                }
+                
+            }
+
+            /* Calculate peak average, for kicks */
+            peak_avg += peak_v;
+
+            /* Now find leading edge in ATWD waveform */
+            float last_bin_v = peak_v;
+            le_atwd_idx = 0.0;    
+            for (bin=peak_idx; bin<cnt; bin++) {
+                if (atwd == 0) {
+                    bin_v = (float)channels[ch][bin] * dom_calib->atwd0_gain_calib[ch][bin].slope
+                        + dom_calib->atwd0_gain_calib[ch][bin].y_intercept;
+                    bin_v -= baseline[0][ch];
+                    bin_v -= bias_v;
+                }
+                else {
+                    bin_v = (float)channels[ch][bin] * dom_calib->atwd1_gain_calib[ch][bin].slope
+                        + dom_calib->atwd1_gain_calib[ch][bin].y_intercept;
+                    bin_v -= baseline[0][ch];
+                    bin_v -= bias_v;
+                }
+                
+                if (bin_v > 0.5*peak_v) {                    
+                    /* Interpolate */
+                    le_atwd_idx = (bin-1) + (0.5*peak_v - last_bin_v)/(bin_v - last_bin_v);
+                    break;
+                }
+                last_bin_v = bin_v;
+            }
+           
+            /* Find the peak and leading edge in the current waveform */
+            /* Note polarity of pedestal subtraction to keep peak a minimum like in ATWD */
+            peak_v = pedestal[0] - channels[3][0];
+            peak_idx = 0;
+            for (bin=0; bin<cnt; bin++) {
+                
+                bin_v = pedestal[bin] - channels[3][bin];
+                if (bin_v < peak_v) {
+                    peak_idx = bin;
+                    peak_v = bin_v;
+                }
+            }           
+
+            /* Calculate peak average, for kicks */
+            current_peak_avg += peak_v;
+
+            /* Now find leading edge in current waveform */
+            last_bin_v = peak_v;
+            le_current_idx = 0.0;
+            for (bin=peak_idx; bin<cnt; bin++) {
+                bin_v = pedestal[bin] - channels[3][bin];
+
+                if (bin_v > 0.5*peak_v) {
+                    /* Interpolate */
+                    le_current_idx = (bin-1) + (0.5*peak_v - last_bin_v)/(bin_v - last_bin_v);
+                    break;
+                }
+                last_bin_v = bin_v;
+            }
+            
+            /* Save transit time in ns = samples * 1000 / freq in MHz */
+            transits[trig] = (le_current_idx - le_atwd_idx) * 1.0E3 / freq;
+
+        } /* End trigger loop */
+
+        /* Print average peak amplitude */
+        peak_avg /= TRANSIT_CAL_TRIG_CNT;
+        current_peak_avg /= TRANSIT_CAL_TRIG_CNT;
+
+#ifdef DEBUG
+        printf("V %d Avg signal peak %.2f  Avg current peak %.2f\r\n", hv, peak_avg, current_peak_avg);
+#endif
+
+        /* Find mean and error */
+        float var;
+        meanVarFloat(transits, TRANSIT_CAL_TRIG_CNT, 
+                              &(transit_data[hv_idx]), &var);
+
+#ifdef DEBUG
+        printf("Sqrt(var): %.3f\r\n", sqrt(var));
+#endif
+
+        /* Check sigma for poor calibration */
+        /* Drive LED brighter to try and clean things up */
+        if (sqrt(var) > TRANSIT_CAL_MAX_SIGMA) {
+            if (variance_fails < TRANSIT_CAL_MAX_BAD_VAR_CNT) {
+                brightness -= 25;
+                halWriteDAC(DOM_HAL_DAC_LED_BRIGHTNESS, brightness);           
+#ifdef DEBUG
+                printf("Bad sigma -- increasing LED brightness to %d\r\n", brightness);
+                printf("Trying same voltage again...\r\n");
+#endif
+                variance_fails++;
+                hv_idx--;
+            }
+            else {
+#ifdef DEBUG
+                printf("Too many bad variance points -- aborting transit time calibration!\r\n");
+#endif
+                dom_calib->transit_calib.slope = 0.0; 
+                dom_calib->transit_calib.y_intercept = 0.0;
+                dom_calib->transit_calib.r_squared = 0.0;
+                return TRANSIT_TIME_VARIANCE_ERR;
+            }            
+        }
+
+    } /* End HV loop */
+
+    /*---------------------------------------------------------------------------*/
+
+    /* Attempt some sort of fit */
+    float x[TRANSIT_CAL_HV_CNT], y[TRANSIT_CAL_HV_CNT];    
+    for (hv_idx = 0; hv_idx < TRANSIT_CAL_HV_CNT; hv_idx++) {
+        x[hv_idx] = 1 / sqrt((hv_idx * TRANSIT_CAL_HV_INC) + TRANSIT_CAL_HV_LOW);
+        y[hv_idx] = transit_data[hv_idx]; 
+    }
+    linearFitFloat(x, y, TRANSIT_CAL_HV_CNT, &dom_calib->transit_calib);
+    dom_calib->transit_calib_valid = 1;
+
+#ifdef DEBUG
+    printf("Fit: m %g b %g r2 %g\r\n", dom_calib->transit_calib.slope,
+            dom_calib->transit_calib.y_intercept, dom_calib->transit_calib.r_squared);
+    printf("HV_idx hv 1/sqrt(v) value error\r\n");
+    for (hv_idx = 0; hv_idx < TRANSIT_CAL_HV_CNT; hv_idx++) {        
+        printf("%d %d %g %g\r\n", hv_idx,  ((hv_idx * TRANSIT_CAL_HV_INC) + TRANSIT_CAL_HV_LOW), 
+            x[hv_idx], transit_data[hv_idx]);
+    }    
+#endif
+
+    /*---------------------------------------------------------------------------*/
+    /* Turn off LED and LED power supply*/
+
+    halDisableLEDPS();
+    hal_FPGA_TEST_disable_LED();
+    
+    /* Put the DACs back to original state */
+    halWriteDAC(DOM_HAL_DAC_PMT_FE_PEDESTAL, origBiasDAC);   
+    halWriteDAC((atwd == 0) ? DOM_HAL_DAC_ATWD0_TRIGGER_BIAS : 
+                DOM_HAL_DAC_ATWD1_TRIGGER_BIAS, origSampDAC);
+    halWriteDAC(DOM_HAL_DAC_LED_BRIGHTNESS, origLedDAC);
+    
+    /* Disable the analog mux */
+    halDisableAnalogMux();
+    
+    /* Won't turn off the HV for now...*/
+    
+    return 0;
+    
+}
Index: dom-cal/private/dom-cal/transit_cal.h
diff -u /dev/null dom-cal/private/dom-cal/transit_cal.h:1.3
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/private/dom-cal/transit_cal.h	Wed May  4 13:24:24 2005
@@ -0,0 +1,48 @@
+/*
+ * transit_cal header file
+ */
+
+/* HV settings for gain calibration (in V) */
+/* Starting value, amount to increment, and number of settings */
+#define TRANSIT_CAL_HV_LOW        1200
+#define TRANSIT_CAL_HV_INC         100
+#define TRANSIT_CAL_HV_CNT           8
+
+
+/* Specific DAC values for this test */
+#ifdef DOMCAL_REV5
+#define TRANSIT_CAL_PEDESTAL_DAC   2130
+#define TRANSIT_CAL_SAMPLING_DAC    850
+#else
+#define TRANSIT_CAL_PEDESTAL_DAC   1925
+#define TRANSIT_CAL_SAMPLING_DAC    850
+#endif
+
+/* Which ATWD to use */
+#define TRANSIT_CAL_ATWD              0
+
+/* Which channel to use */
+#define TRANSIT_CAL_CH                1
+
+/* Flasher brightness */
+/* 600 is about the maximim reliable value */
+/* (minimum brightness) */
+#define TRANSIT_CAL_LED_AMPLITUDE   600
+
+/* How many waveforms to measure */
+#define TRANSIT_CAL_TRIG_CNT        250
+
+/* Trigger delay for ATWDs */
+#define TRANSIT_CAL_LAUNCH_DELAY      2
+
+/* Worst sigma, in ns, of a transit time distribution we will consider stable */
+#define TRANSIT_CAL_MAX_SIGMA       5.0
+
+/* How many times we will crank up the brightness */
+#define TRANSIT_CAL_MAX_BAD_VAR_CNT   5
+
+/* Error code for variance failure */
+#define TRANSIT_TIME_VARIANCE_ERR     3
+
+/* Prototypes */
+int transit_cal(calib_data *dom_calib);
Index: dom-cal/resources/test/f771bb4dce28.xml
diff -u /dev/null dom-cal/resources/test/f771bb4dce28.xml:1.1
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/resources/test/f771bb4dce28.xml	Fri Oct 29 14:05:01 2004
@@ -0,0 +1,5453 @@
+<domcal version="1.1">
+  <date>6-30-2004</date>
+  <domid>f771bb4dce28</domid>
+  <temperature format="Kelvin">300.035</temperature>
+  <dac channel="0">850</dac>
+  <dac channel="1">2097</dac>
+  <dac channel="2">3000</dac>
+  <dac channel="3">2048</dac>
+  <dac channel="4">850</dac>
+  <dac channel="5">2097</dac>
+  <dac channel="6">3000</dac>
+  <dac channel="7">1925</dac>
+  <dac channel="8">0</dac>
+  <dac channel="9">0</dac>
+  <dac channel="10">0</dac>
+  <dac channel="11">0</dac>
+  <dac channel="12">0</dac>
+  <dac channel="13">0</dac>
+  <dac channel="14">0</dac>
+  <dac channel="15">0</dac>
+  <adc channel="0">21</adc>
+  <adc channel="1">988</adc>
+  <adc channel="2">863</adc>
+  <adc channel="3">509</adc>
+  <adc channel="4">90</adc>
+  <adc channel="5">36</adc>
+  <adc channel="6">88</adc>
+  <adc channel="7">130</adc>
+  <adc channel="8">609</adc>
+  <adc channel="9">878</adc>
+  <adc channel="10">628</adc>
+  <adc channel="11">821</adc>
+  <adc channel="12">15</adc>
+  <adc channel="13">860</adc>
+  <adc channel="14">18</adc>
+  <adc channel="15">260</adc>
+  <adc channel="16">512</adc>
+  <adc channel="17">908</adc>
+  <adc channel="18">499</adc>
+  <adc channel="19">260</adc>
+  <adc channel="20">513</adc>
+  <adc channel="21">911</adc>
+  <adc channel="22">468</adc>
+  <adc channel="23">1</adc>
+  <pulser>
+    <fit model="linear">
+      <param name="slope">9.477927E-5</param>
+      <param name="intercept">2.6709796E-4</param>
+      <regression-coeff>0.999942</regression-coeff>
+    </fit>
+  </pulser>
+  <atwd id="0" channel="0" bin="0">
+    <fit model="linear">
+      <param name="slope">-0.0020907072</param>
+      <param name="intercept">2.6907156</param>
+      <regression-coeff>0.99991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="1">
+    <fit model="linear">
+      <param name="slope">-0.0020982912</param>
+      <param name="intercept">2.6780012</param>
+      <regression-coeff>0.9999431</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="2">
+    <fit model="linear">
+      <param name="slope">-0.0021094908</param>
+      <param name="intercept">2.651454</param>
+      <regression-coeff>0.9999396</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="3">
+    <fit model="linear">
+      <param name="slope">-0.0021251899</param>
+      <param name="intercept">2.6855738</param>
+      <regression-coeff>0.9997844</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="4">
+    <fit model="linear">
+      <param name="slope">-0.0021262234</param>
+      <param name="intercept">2.6832826</param>
+      <regression-coeff>0.9999537</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="5">
+    <fit model="linear">
+      <param name="slope">-0.0021200136</param>
+      <param name="intercept">2.6688452</param>
+      <regression-coeff>0.9998744</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="6">
+    <fit model="linear">
+      <param name="slope">-0.0021213705</param>
+      <param name="intercept">2.6527967</param>
+      <regression-coeff>0.999883</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="7">
+    <fit model="linear">
+      <param name="slope">-0.002124257</param>
+      <param name="intercept">2.6705225</param>
+      <regression-coeff>0.99997693</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="8">
+    <fit model="linear">
+      <param name="slope">-0.0021275452</param>
+      <param name="intercept">2.670275</param>
+      <regression-coeff>0.99994105</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="9">
+    <fit model="linear">
+      <param name="slope">-0.0021238276</param>
+      <param name="intercept">2.6560636</param>
+      <regression-coeff>0.999934</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="10">
+    <fit model="linear">
+      <param name="slope">-0.0021105085</param>
+      <param name="intercept">2.6411061</param>
+      <regression-coeff>0.9999502</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="11">
+    <fit model="linear">
+      <param name="slope">-0.0021405981</param>
+      <param name="intercept">2.6734774</param>
+      <regression-coeff>0.9998588</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="12">
+    <fit model="linear">
+      <param name="slope">-0.0021172077</param>
+      <param name="intercept">2.6604218</param>
+      <regression-coeff>0.9999712</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="13">
+    <fit model="linear">
+      <param name="slope">-0.0021100887</param>
+      <param name="intercept">2.6593602</param>
+      <regression-coeff>0.9999085</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="14">
+    <fit model="linear">
+      <param name="slope">-0.0021108743</param>
+      <param name="intercept">2.647963</param>
+      <regression-coeff>0.99996614</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="15">
+    <fit model="linear">
+      <param name="slope">-0.0021228648</param>
+      <param name="intercept">2.6695864</param>
+      <regression-coeff>0.9999544</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="16">
+    <fit model="linear">
+      <param name="slope">-0.0021234753</param>
+      <param name="intercept">2.677548</param>
+      <regression-coeff>0.9999264</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="17">
+    <fit model="linear">
+      <param name="slope">-0.0021292605</param>
+      <param name="intercept">2.6833405</param>
+      <regression-coeff>0.99995375</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="18">
+    <fit model="linear">
+      <param name="slope">-0.0021165856</param>
+      <param name="intercept">2.650365</param>
+      <regression-coeff>0.99999195</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="19">
+    <fit model="linear">
+      <param name="slope">-0.0021215614</param>
+      <param name="intercept">2.6642497</param>
+      <regression-coeff>0.99981487</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="20">
+    <fit model="linear">
+      <param name="slope">-0.0021225237</param>
+      <param name="intercept">2.6630847</param>
+      <regression-coeff>0.99995196</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="21">
+    <fit model="linear">
+      <param name="slope">-0.0021188643</param>
+      <param name="intercept">2.6693547</param>
+      <regression-coeff>0.9998062</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="22">
+    <fit model="linear">
+      <param name="slope">-0.0021136815</param>
+      <param name="intercept">2.667688</param>
+      <regression-coeff>0.9998792</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="23">
+    <fit model="linear">
+      <param name="slope">-0.0021201486</param>
+      <param name="intercept">2.6662004</param>
+      <regression-coeff>0.9999391</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="24">
+    <fit model="linear">
+      <param name="slope">-0.0021172247</param>
+      <param name="intercept">2.665433</param>
+      <regression-coeff>0.9999783</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="25">
+    <fit model="linear">
+      <param name="slope">-0.0021232623</param>
+      <param name="intercept">2.6645312</param>
+      <regression-coeff>0.9999843</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="26">
+    <fit model="linear">
+      <param name="slope">-0.002122238</param>
+      <param name="intercept">2.6600783</param>
+      <regression-coeff>0.99997556</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="27">
+    <fit model="linear">
+      <param name="slope">-0.0021235966</param>
+      <param name="intercept">2.671614</param>
+      <regression-coeff>0.99998266</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="28">
+    <fit model="linear">
+      <param name="slope">-0.0021288444</param>
+      <param name="intercept">2.6684644</param>
+      <regression-coeff>0.99991804</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="29">
+    <fit model="linear">
+      <param name="slope">-0.0021285915</param>
+      <param name="intercept">2.6646895</param>
+      <regression-coeff>0.99995697</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="30">
+    <fit model="linear">
+      <param name="slope">-0.002117518</param>
+      <param name="intercept">2.65169</param>
+      <regression-coeff>0.99995905</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="31">
+    <fit model="linear">
+      <param name="slope">-0.0021393339</param>
+      <param name="intercept">2.684066</param>
+      <regression-coeff>0.9999051</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="32">
+    <fit model="linear">
+      <param name="slope">-0.0021178771</param>
+      <param name="intercept">2.6695411</param>
+      <regression-coeff>0.9999708</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="33">
+    <fit model="linear">
+      <param name="slope">-0.00211651</param>
+      <param name="intercept">2.645911</param>
+      <regression-coeff>0.9999562</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="34">
+    <fit model="linear">
+      <param name="slope">-0.002130121</param>
+      <param name="intercept">2.6716764</param>
+      <regression-coeff>0.99988353</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="35">
+    <fit model="linear">
+      <param name="slope">-0.0021293375</param>
+      <param name="intercept">2.6740777</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="36">
+    <fit model="linear">
+      <param name="slope">-0.002114547</param>
+      <param name="intercept">2.6530366</param>
+      <regression-coeff>0.9998158</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="37">
+    <fit model="linear">
+      <param name="slope">-0.0021248541</param>
+      <param name="intercept">2.6578164</param>
+      <regression-coeff>0.99994224</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="38">
+    <fit model="linear">
+      <param name="slope">-0.0021155416</param>
+      <param name="intercept">2.657077</param>
+      <regression-coeff>0.9999716</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="39">
+    <fit model="linear">
+      <param name="slope">-0.002123222</param>
+      <param name="intercept">2.6722362</param>
+      <regression-coeff>0.9999653</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="40">
+    <fit model="linear">
+      <param name="slope">-0.0021252583</param>
+      <param name="intercept">2.654301</param>
+      <regression-coeff>0.999975</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="41">
+    <fit model="linear">
+      <param name="slope">-0.0021182236</param>
+      <param name="intercept">2.6821957</param>
+      <regression-coeff>0.9999765</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="42">
+    <fit model="linear">
+      <param name="slope">-0.002121239</param>
+      <param name="intercept">2.6656659</param>
+      <regression-coeff>0.9999791</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="43">
+    <fit model="linear">
+      <param name="slope">-0.0021222592</param>
+      <param name="intercept">2.6652958</param>
+      <regression-coeff>0.9999855</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="44">
+    <fit model="linear">
+      <param name="slope">-0.0021208809</param>
+      <param name="intercept">2.6479788</param>
+      <regression-coeff>0.9999683</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="45">
+    <fit model="linear">
+      <param name="slope">-0.0021167968</param>
+      <param name="intercept">2.6664188</param>
+      <regression-coeff>0.999934</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="46">
+    <fit model="linear">
+      <param name="slope">-0.0021138638</param>
+      <param name="intercept">2.6660311</param>
+      <regression-coeff>0.9999654</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="47">
+    <fit model="linear">
+      <param name="slope">-0.002123255</param>
+      <param name="intercept">2.6651077</param>
+      <regression-coeff>0.99998003</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="48">
+    <fit model="linear">
+      <param name="slope">-0.0021299801</param>
+      <param name="intercept">2.6749146</param>
+      <regression-coeff>0.99997526</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="49">
+    <fit model="linear">
+      <param name="slope">-0.0021212623</param>
+      <param name="intercept">2.6529472</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="50">
+    <fit model="linear">
+      <param name="slope">-0.0021192126</param>
+      <param name="intercept">2.652539</param>
+      <regression-coeff>0.9999705</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="51">
+    <fit model="linear">
+      <param name="slope">-0.0021235785</param>
+      <param name="intercept">2.6689036</param>
+      <regression-coeff>0.9999741</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="52">
+    <fit model="linear">
+      <param name="slope">-0.0021165763</param>
+      <param name="intercept">2.6684492</param>
+      <regression-coeff>0.99998754</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="53">
+    <fit model="linear">
+      <param name="slope">-0.0021232488</param>
+      <param name="intercept">2.6664565</param>
+      <regression-coeff>0.99997705</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="54">
+    <fit model="linear">
+      <param name="slope">-0.0021229084</param>
+      <param name="intercept">2.6566732</param>
+      <regression-coeff>0.99997586</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="55">
+    <fit model="linear">
+      <param name="slope">-0.0021155877</param>
+      <param name="intercept">2.646324</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="56">
+    <fit model="linear">
+      <param name="slope">-0.0021252744</param>
+      <param name="intercept">2.6510239</param>
+      <regression-coeff>0.9999816</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="57">
+    <fit model="linear">
+      <param name="slope">-0.0021185619</param>
+      <param name="intercept">2.64882</param>
+      <regression-coeff>0.99997926</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="58">
+    <fit model="linear">
+      <param name="slope">-0.002121239</param>
+      <param name="intercept">2.6510098</param>
+      <regression-coeff>0.9999791</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="59">
+    <fit model="linear">
+      <param name="slope">-0.0021205582</param>
+      <param name="intercept">2.6609645</param>
+      <regression-coeff>0.99997324</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="60">
+    <fit model="linear">
+      <param name="slope">-0.002122166</param>
+      <param name="intercept">2.6716251</param>
+      <regression-coeff>0.9999416</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="61">
+    <fit model="linear">
+      <param name="slope">-0.002123238</param>
+      <param name="intercept">2.6562226</param>
+      <regression-coeff>0.999972</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="62">
+    <fit model="linear">
+      <param name="slope">-0.0021265969</param>
+      <param name="intercept">2.6548212</param>
+      <regression-coeff>0.9999708</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="63">
+    <fit model="linear">
+      <param name="slope">-0.002124276</param>
+      <param name="intercept">2.6666665</param>
+      <regression-coeff>0.99998677</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="64">
+    <fit model="linear">
+      <param name="slope">-0.0021202418</param>
+      <param name="intercept">2.6438785</param>
+      <regression-coeff>0.999982</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="65">
+    <fit model="linear">
+      <param name="slope">-0.002127511</param>
+      <param name="intercept">2.6706483</param>
+      <regression-coeff>0.999925</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="66">
+    <fit model="linear">
+      <param name="slope">-0.0021237852</param>
+      <param name="intercept">2.6693711</param>
+      <regression-coeff>0.9999141</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="67">
+    <fit model="linear">
+      <param name="slope">-0.002133258</param>
+      <param name="intercept">2.6387832</param>
+      <regression-coeff>0.99992603</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="68">
+    <fit model="linear">
+      <param name="slope">-0.0021205435</param>
+      <param name="intercept">2.636668</param>
+      <regression-coeff>0.9999664</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="69">
+    <fit model="linear">
+      <param name="slope">-0.0021332828</param>
+      <param name="intercept">2.6459692</param>
+      <regression-coeff>0.9999368</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="70">
+    <fit model="linear">
+      <param name="slope">-0.0021229074</param>
+      <param name="intercept">2.655708</param>
+      <regression-coeff>0.9999745</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="71">
+    <fit model="linear">
+      <param name="slope">-0.0021155311</param>
+      <param name="intercept">2.6455333</param>
+      <regression-coeff>0.99996585</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="72">
+    <fit model="linear">
+      <param name="slope">-0.0021336633</param>
+      <param name="intercept">2.6596923</param>
+      <regression-coeff>0.9999561</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="73">
+    <fit model="linear">
+      <param name="slope">-0.0021205158</param>
+      <param name="intercept">2.6777184</param>
+      <regression-coeff>0.9999542</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="74">
+    <fit model="linear">
+      <param name="slope">-0.00213109</param>
+      <param name="intercept">2.6637297</param>
+      <regression-coeff>0.999861</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="75">
+    <fit model="linear">
+      <param name="slope">-0.002121868</param>
+      <param name="intercept">2.6713142</param>
+      <regression-coeff>0.9998012</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="76">
+    <fit model="linear">
+      <param name="slope">-0.0021269706</param>
+      <param name="intercept">2.6541922</param>
+      <regression-coeff>0.9998295</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="77">
+    <fit model="linear">
+      <param name="slope">-0.0021146077</param>
+      <param name="intercept">2.6342218</param>
+      <regression-coeff>0.9998445</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="78">
+    <fit model="linear">
+      <param name="slope">-0.0021282511</param>
+      <param name="intercept">2.6593304</param>
+      <regression-coeff>0.99995565</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="79">
+    <fit model="linear">
+      <param name="slope">-0.0021256458</param>
+      <param name="intercept">2.6745498</param>
+      <regression-coeff>0.9998405</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="80">
+    <fit model="linear">
+      <param name="slope">-0.0021222592</param>
+      <param name="intercept">2.666259</param>
+      <regression-coeff>0.9999855</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="81">
+    <fit model="linear">
+      <param name="slope">-0.0021266034</param>
+      <param name="intercept">2.6606226</param>
+      <regression-coeff>0.999973</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="82">
+    <fit model="linear">
+      <param name="slope">-0.0021306784</param>
+      <param name="intercept">2.6596942</param>
+      <regression-coeff>0.99998635</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="83">
+    <fit model="linear">
+      <param name="slope">-0.0021138974</param>
+      <param name="intercept">2.6422153</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="84">
+    <fit model="linear">
+      <param name="slope">-0.002123586</param>
+      <param name="intercept">2.6617618</param>
+      <regression-coeff>0.99997854</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="85">
+    <fit model="linear">
+      <param name="slope">-0.0021286395</param>
+      <param name="intercept">2.6558056</param>
+      <regression-coeff>0.99998045</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="86">
+    <fit model="linear">
+      <param name="slope">-0.0021229296</param>
+      <param name="intercept">2.652822</param>
+      <regression-coeff>0.99998486</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="87">
+    <fit model="linear">
+      <param name="slope">-0.002128961</param>
+      <param name="intercept">2.653995</param>
+      <regression-coeff>0.9999728</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="88">
+    <fit model="linear">
+      <param name="slope">-0.002127638</param>
+      <param name="intercept">2.6716657</param>
+      <regression-coeff>0.99998474</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="89">
+    <fit model="linear">
+      <param name="slope">-0.002124601</param>
+      <param name="intercept">2.6536613</param>
+      <regression-coeff>0.99998146</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="90">
+    <fit model="linear">
+      <param name="slope">-0.0021215484</param>
+      <param name="intercept">2.6605802</param>
+      <regression-coeff>0.9999668</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="91">
+    <fit model="linear">
+      <param name="slope">-0.0021275675</param>
+      <param name="intercept">2.6546164</param>
+      <regression-coeff>0.99995154</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="92">
+    <fit model="linear">
+      <param name="slope">-0.0021168578</param>
+      <param name="intercept">2.6550896</param>
+      <regression-coeff>0.99996275</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="93">
+    <fit model="linear">
+      <param name="slope">-0.0021248201</param>
+      <param name="intercept">2.666881</param>
+      <regression-coeff>0.99992627</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="94">
+    <fit model="linear">
+      <param name="slope">-0.0021431227</param>
+      <param name="intercept">2.6697938</param>
+      <regression-coeff>0.99992085</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="95">
+    <fit model="linear">
+      <param name="slope">-0.002122061</param>
+      <param name="intercept">2.681808</param>
+      <regression-coeff>0.9998921</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="96">
+    <fit model="linear">
+      <param name="slope">-0.0021189214</param>
+      <param name="intercept">2.6271896</param>
+      <regression-coeff>0.999991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="97">
+    <fit model="linear">
+      <param name="slope">-0.0021388158</param>
+      <param name="intercept">2.6694713</param>
+      <regression-coeff>0.9998224</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="98">
+    <fit model="linear">
+      <param name="slope">-0.0021175137</param>
+      <param name="intercept">2.6466808</param>
+      <regression-coeff>0.9999579</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="99">
+    <fit model="linear">
+      <param name="slope">-0.0021250697</param>
+      <param name="intercept">2.6791499</param>
+      <regression-coeff>0.9998863</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="100">
+    <fit model="linear">
+      <param name="slope">-0.0021299063</param>
+      <param name="intercept">2.6644292</param>
+      <regression-coeff>0.9999406</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="101">
+    <fit model="linear">
+      <param name="slope">-0.002132296</param>
+      <param name="intercept">2.6591609</param>
+      <regression-coeff>0.999951</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="102">
+    <fit model="linear">
+      <param name="slope">-0.002125927</param>
+      <param name="intercept">2.6704087</param>
+      <regression-coeff>0.9999727</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="103">
+    <fit model="linear">
+      <param name="slope">-0.0021208301</param>
+      <param name="intercept">2.6446817</param>
+      <regression-coeff>0.9999443</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="104">
+    <fit model="linear">
+      <param name="slope">-0.0021299147</param>
+      <param name="intercept">2.658623</param>
+      <regression-coeff>0.99994457</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="105">
+    <fit model="linear">
+      <param name="slope">-0.0021273002</param>
+      <param name="intercept">2.6409745</param>
+      <regression-coeff>0.9999854</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="106">
+    <fit model="linear">
+      <param name="slope">-0.002125224</param>
+      <param name="intercept">2.6523573</param>
+      <regression-coeff>0.99979955</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="107">
+    <fit model="linear">
+      <param name="slope">-0.0021157153</param>
+      <param name="intercept">2.6581075</param>
+      <regression-coeff>0.9998961</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="108">
+    <fit model="linear">
+      <param name="slope">-0.002131618</param>
+      <param name="intercept">2.6598659</param>
+      <regression-coeff>0.9999508</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="109">
+    <fit model="linear">
+      <param name="slope">-0.002132322</param>
+      <param name="intercept">2.6684754</param>
+      <regression-coeff>0.99996316</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="110">
+    <fit model="linear">
+      <param name="slope">-0.0021222509</param>
+      <param name="intercept">2.6465774</param>
+      <regression-coeff>0.9999816</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="111">
+    <fit model="linear">
+      <param name="slope">-0.0021147104</param>
+      <param name="intercept">2.64887</param>
+      <regression-coeff>0.999894</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="112">
+    <fit model="linear">
+      <param name="slope">-0.0021353</param>
+      <param name="intercept">2.6684802</param>
+      <regression-coeff>0.9997694</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="113">
+    <fit model="linear">
+      <param name="slope">-0.002135555</param>
+      <param name="intercept">2.6608148</param>
+      <regression-coeff>0.9998887</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="114">
+    <fit model="linear">
+      <param name="slope">-0.0021151348</param>
+      <param name="intercept">2.6524968</param>
+      <regression-coeff>0.9999361</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="115">
+    <fit model="linear">
+      <param name="slope">-0.002137768</param>
+      <param name="intercept">2.6675048</param>
+      <regression-coeff>0.99996984</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="116">
+    <fit model="linear">
+      <param name="slope">-0.0021296581</param>
+      <param name="intercept">2.6407115</param>
+      <regression-coeff>0.9999828</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="117">
+    <fit model="linear">
+      <param name="slope">-0.0021063206</param>
+      <param name="intercept">2.6433282</param>
+      <regression-coeff>0.9998479</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="118">
+    <fit model="linear">
+      <param name="slope">-0.0021218264</param>
+      <param name="intercept">2.6786282</param>
+      <regression-coeff>0.9999397</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="119">
+    <fit model="linear">
+      <param name="slope">-0.0021359294</param>
+      <param name="intercept">2.6654263</param>
+      <regression-coeff>0.9999048</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="120">
+    <fit model="linear">
+      <param name="slope">-0.0021168094</param>
+      <param name="intercept">2.6346722</param>
+      <regression-coeff>0.9999399</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="121">
+    <fit model="linear">
+      <param name="slope">-0.0021276562</param>
+      <param name="intercept">2.6498148</param>
+      <regression-coeff>0.9999932</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="122">
+    <fit model="linear">
+      <param name="slope">-0.0021295673</param>
+      <param name="intercept">2.6433878</param>
+      <regression-coeff>0.9999392</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="123">
+    <fit model="linear">
+      <param name="slope">-0.0021445726</param>
+      <param name="intercept">2.676406</param>
+      <regression-coeff>0.9999581</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="124">
+    <fit model="linear">
+      <param name="slope">-0.0021289238</param>
+      <param name="intercept">2.664626</param>
+      <regression-coeff>0.9999544</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="125">
+    <fit model="linear">
+      <param name="slope">-0.0021262171</param>
+      <param name="intercept">2.659119</param>
+      <regression-coeff>0.9999507</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="126">
+    <fit model="linear">
+      <param name="slope">-0.002118137</param>
+      <param name="intercept">2.653853</param>
+      <regression-coeff>0.9999365</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="0" bin="127">
+    <fit model="linear">
+      <param name="slope">-0.0020911337</param>
+      <param name="intercept">2.631769</param>
+      <regression-coeff>0.9999581</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="0">
+    <fit model="linear">
+      <param name="slope">-0.0019648194</param>
+      <param name="intercept">2.6819997</param>
+      <regression-coeff>0.9999889</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="1">
+    <fit model="linear">
+      <param name="slope">-0.0019758102</param>
+      <param name="intercept">2.668977</param>
+      <regression-coeff>0.99999046</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="2">
+    <fit model="linear">
+      <param name="slope">-0.0019834081</param>
+      <param name="intercept">2.641546</param>
+      <regression-coeff>0.9999962</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="3">
+    <fit model="linear">
+      <param name="slope">-0.0019996306</param>
+      <param name="intercept">2.6727169</param>
+      <regression-coeff>0.99998486</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="4">
+    <fit model="linear">
+      <param name="slope">-0.0020008313</param>
+      <param name="intercept">2.6704946</param>
+      <regression-coeff>0.9999888</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="5">
+    <fit model="linear">
+      <param name="slope">-0.001997256</param>
+      <param name="intercept">2.6577373</param>
+      <regression-coeff>0.99998635</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="6">
+    <fit model="linear">
+      <param name="slope">-0.0019937009</param>
+      <param name="intercept">2.6412225</param>
+      <regression-coeff>0.99998856</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="7">
+    <fit model="linear">
+      <param name="slope">-0.0020002376</param>
+      <param name="intercept">2.6586065</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="8">
+    <fit model="linear">
+      <param name="slope">-0.002000832</param>
+      <param name="intercept">2.6586711</param>
+      <regression-coeff>0.9999892</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="9">
+    <fit model="linear">
+      <param name="slope">-0.0020014388</param>
+      <param name="intercept">2.6487334</param>
+      <regression-coeff>0.99999505</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="10">
+    <fit model="linear">
+      <param name="slope">-0.0019931085</param>
+      <param name="intercept">2.63464</param>
+      <regression-coeff>0.99998856</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="11">
+    <fit model="linear">
+      <param name="slope">-0.0019954867</param>
+      <param name="intercept">2.654465</param>
+      <regression-coeff>0.9999928</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="12">
+    <fit model="linear">
+      <param name="slope">-0.0020016988</param>
+      <param name="intercept">2.6550264</param>
+      <regression-coeff>0.9999758</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="13">
+    <fit model="linear">
+      <param name="slope">-0.0019993496</param>
+      <param name="intercept">2.6551502</param>
+      <regression-coeff>0.9999933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="14">
+    <fit model="linear">
+      <param name="slope">-0.0019919334</param>
+      <param name="intercept">2.6403215</param>
+      <regression-coeff>0.9999928</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="15">
+    <fit model="linear">
+      <param name="slope">-0.001996373</param>
+      <param name="intercept">2.6590054</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="16">
+    <fit model="linear">
+      <param name="slope">-0.0020020257</param>
+      <param name="intercept">2.6666265</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="17">
+    <fit model="linear">
+      <param name="slope">-0.0020044153</param>
+      <param name="intercept">2.668537</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="18">
+    <fit model="linear">
+      <param name="slope">-0.0019948888</param>
+      <param name="intercept">2.6415226</param>
+      <regression-coeff>0.9999906</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="19">
+    <fit model="linear">
+      <param name="slope">-0.0020005433</param>
+      <param name="intercept">2.6565511</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="20">
+    <fit model="linear">
+      <param name="slope">-0.002000236</param>
+      <param name="intercept">2.649878</param>
+      <regression-coeff>0.99998945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="21">
+    <fit model="linear">
+      <param name="slope">-0.002001437</param>
+      <param name="intercept">2.6585584</param>
+      <regression-coeff>0.9999932</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="22">
+    <fit model="linear">
+      <param name="slope">-0.0019954883</param>
+      <param name="intercept">2.6606333</param>
+      <regression-coeff>0.9999937</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="23">
+    <fit model="linear">
+      <param name="slope">-0.0020008257</param>
+      <param name="intercept">2.6568496</param>
+      <regression-coeff>0.9999869</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="24">
+    <fit model="linear">
+      <param name="slope">-0.0020020267</param>
+      <param name="intercept">2.6566179</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="25">
+    <fit model="linear">
+      <param name="slope">-0.0019999358</param>
+      <param name="intercept">2.654847</param>
+      <regression-coeff>0.9999876</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="26">
+    <fit model="linear">
+      <param name="slope">-0.0020032213</param>
+      <param name="intercept">2.6514645</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="27">
+    <fit model="linear">
+      <param name="slope">-0.0020029247</param>
+      <param name="intercept">2.6617224</param>
+      <regression-coeff>0.999991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="28">
+    <fit model="linear">
+      <param name="slope">-0.0020032239</param>
+      <param name="intercept">2.6589332</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="29">
+    <fit model="linear">
+      <param name="slope">-0.0020032106</param>
+      <param name="intercept">2.653281</param>
+      <regression-coeff>0.99998444</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="30">
+    <fit model="linear">
+      <param name="slope">-0.001999348</param>
+      <param name="intercept">2.6431537</param>
+      <regression-coeff>0.99999166</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="31">
+    <fit model="linear">
+      <param name="slope">-0.0020032267</param>
+      <param name="intercept">2.6660366</param>
+      <regression-coeff>0.9999925</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="32">
+    <fit model="linear">
+      <param name="slope">-0.001995476</param>
+      <param name="intercept">2.6602662</param>
+      <regression-coeff>0.99998754</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="33">
+    <fit model="linear">
+      <param name="slope">-0.001998447</param>
+      <param name="intercept">2.636792</param>
+      <regression-coeff>0.99998796</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="34">
+    <fit model="linear">
+      <param name="slope">-0.0019996448</param>
+      <param name="intercept">2.6572719</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="35">
+    <fit model="linear">
+      <param name="slope">-0.0020089133</param>
+      <param name="intercept">2.665484</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="36">
+    <fit model="linear">
+      <param name="slope">-0.002000537</param>
+      <param name="intercept">2.6472733</param>
+      <regression-coeff>0.9999908</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="37">
+    <fit model="linear">
+      <param name="slope">-0.0020011389</param>
+      <param name="intercept">2.6462455</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="38">
+    <fit model="linear">
+      <param name="slope">-0.0019969628</param>
+      <param name="intercept">2.6467233</param>
+      <regression-coeff>0.99998933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="39">
+    <fit model="linear">
+      <param name="slope">-0.0020032213</param>
+      <param name="intercept">2.6634843</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="40">
+    <fit model="linear">
+      <param name="slope">-0.0020074104</param>
+      <param name="intercept">2.6447856</param>
+      <regression-coeff>0.9999874</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="41">
+    <fit model="linear">
+      <param name="slope">-0.0020032213</param>
+      <param name="intercept">2.6735005</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="42">
+    <fit model="linear">
+      <param name="slope">-0.0020035242</param>
+      <param name="intercept">2.656507</param>
+      <regression-coeff>0.9999918</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="43">
+    <fit model="linear">
+      <param name="slope">-0.0020059047</param>
+      <param name="intercept">2.6576693</param>
+      <regression-coeff>0.99998564</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="44">
+    <fit model="linear">
+      <param name="slope">-0.0019996448</param>
+      <param name="intercept">2.6372752</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="45">
+    <fit model="linear">
+      <param name="slope">-0.0019993416</param>
+      <param name="intercept">2.6569643</param>
+      <regression-coeff>0.9999885</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="46">
+    <fit model="linear">
+      <param name="slope">-0.0019975614</param>
+      <param name="intercept">2.659862</param>
+      <regression-coeff>0.99999046</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="47">
+    <fit model="linear">
+      <param name="slope">-0.0020047242</param>
+      <param name="intercept">2.6553607</param>
+      <regression-coeff>0.999993</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="48">
+    <fit model="linear">
+      <param name="slope">-0.0020047207</param>
+      <param name="intercept">2.6608262</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="49">
+    <fit model="linear">
+      <param name="slope">-0.0020017165</param>
+      <param name="intercept">2.645571</param>
+      <regression-coeff>0.99998456</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="50">
+    <fit model="linear">
+      <param name="slope">-0.0020023289</param>
+      <param name="intercept">2.646366</param>
+      <regression-coeff>0.9999921</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="51">
+    <fit model="linear">
+      <param name="slope">-0.0020041012</param>
+      <param name="intercept">2.6580203</param>
+      <regression-coeff>0.999981</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="52">
+    <fit model="linear">
+      <param name="slope">-0.0020008304</param>
+      <param name="intercept">2.6612177</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="53">
+    <fit model="linear">
+      <param name="slope">-0.0019972576</param>
+      <param name="intercept">2.6566484</param>
+      <regression-coeff>0.9999872</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="54">
+    <fit model="linear">
+      <param name="slope">-0.0020020257</param>
+      <param name="intercept">2.6466064</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="55">
+    <fit model="linear">
+      <param name="slope">-0.0019948808</param>
+      <param name="intercept">2.6366246</param>
+      <regression-coeff>0.9999857</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="56">
+    <fit model="linear">
+      <param name="slope">-0.002003223</param>
+      <param name="intercept">2.640903</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="57">
+    <fit model="linear">
+      <param name="slope">-0.0020020355</param>
+      <param name="intercept">2.6427884</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="58">
+    <fit model="linear">
+      <param name="slope">-0.0020032239</param>
+      <param name="intercept">2.6418145</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="59">
+    <fit model="linear">
+      <param name="slope">-0.0020053142</param>
+      <param name="intercept">2.6526854</param>
+      <regression-coeff>0.99998933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="60">
+    <fit model="linear">
+      <param name="slope">-0.0019975542</param>
+      <param name="intercept">2.6607656</param>
+      <regression-coeff>0.9999877</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="61">
+    <fit model="linear">
+      <param name="slope">-0.0020044143</param>
+      <param name="intercept">2.6464863</param>
+      <regression-coeff>0.99998784</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="62">
+    <fit model="linear">
+      <param name="slope">-0.0020008401</param>
+      <param name="intercept">2.641577</param>
+      <regression-coeff>0.9999932</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="63">
+    <fit model="linear">
+      <param name="slope">-0.002001132</param>
+      <param name="intercept">2.656067</param>
+      <regression-coeff>0.9999899</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="64">
+    <fit model="linear">
+      <param name="slope">-0.002003216</param>
+      <param name="intercept">2.6379855</param>
+      <regression-coeff>0.9999872</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="65">
+    <fit model="linear">
+      <param name="slope">-0.0020059173</param>
+      <param name="intercept">2.6574929</param>
+      <regression-coeff>0.999991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="66">
+    <fit model="linear">
+      <param name="slope">-0.0020080267</param>
+      <param name="intercept">2.661464</param>
+      <regression-coeff>0.99999684</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="67">
+    <fit model="linear">
+      <param name="slope">-0.002002632</param>
+      <param name="intercept">2.62792</param>
+      <regression-coeff>0.99999416</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="68">
+    <fit model="linear">
+      <param name="slope">-0.0020046956</param>
+      <param name="intercept">2.630928</param>
+      <regression-coeff>0.9999797</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="69">
+    <fit model="linear">
+      <param name="slope">-0.002000529</param>
+      <param name="intercept">2.630903</param>
+      <regression-coeff>0.9999869</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="70">
+    <fit model="linear">
+      <param name="slope">-0.0020026143</param>
+      <param name="intercept">2.6468468</param>
+      <regression-coeff>0.9999853</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="71">
+    <fit model="linear">
+      <param name="slope">-0.0019981554</param>
+      <param name="intercept">2.6384912</param>
+      <regression-coeff>0.9999908</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="72">
+    <fit model="linear">
+      <param name="slope">-0.0020035126</param>
+      <param name="intercept">2.6433873</param>
+      <regression-coeff>0.99998677</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="73">
+    <fit model="linear">
+      <param name="slope">-0.0020047207</param>
+      <param name="intercept">2.6688461</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="74">
+    <fit model="linear">
+      <param name="slope">-0.0020059163</param>
+      <param name="intercept">2.652022</param>
+      <regression-coeff>0.9999906</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="75">
+    <fit model="linear">
+      <param name="slope">-0.0020062174</param>
+      <param name="intercept">2.664183</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="76">
+    <fit model="linear">
+      <param name="slope">-0.0020020169</param>
+      <param name="intercept">2.6405966</param>
+      <regression-coeff>0.9999854</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="77">
+    <fit model="linear">
+      <param name="slope">-0.0020082868</param>
+      <param name="intercept">2.63017</param>
+      <regression-coeff>0.9999758</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="78">
+    <fit model="linear">
+      <param name="slope">-0.0020008313</param>
+      <param name="intercept">2.648666</param>
+      <regression-coeff>0.9999888</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="79">
+    <fit model="linear">
+      <param name="slope">-0.002005612</param>
+      <param name="intercept">2.663566</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="80">
+    <fit model="linear">
+      <param name="slope">-0.0020047207</param>
+      <param name="intercept">2.6579099</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="81">
+    <fit model="linear">
+      <param name="slope">-0.00200502</param>
+      <param name="intercept">2.6532948</param>
+      <regression-coeff>0.99999195</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="82">
+    <fit model="linear">
+      <param name="slope">-0.002007422</param>
+      <param name="intercept">2.648988</param>
+      <regression-coeff>0.9999941</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="83">
+    <fit model="linear">
+      <param name="slope">-0.0019999226</param>
+      <param name="intercept">2.634661</param>
+      <regression-coeff>0.999981</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="84">
+    <fit model="linear">
+      <param name="slope">-0.0020059156</param>
+      <param name="intercept">2.654027</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="85">
+    <fit model="linear">
+      <param name="slope">-0.0020074123</param>
+      <param name="intercept">2.6488006</param>
+      <regression-coeff>0.9999892</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="86">
+    <fit model="linear">
+      <param name="slope">-0.002006212</param>
+      <param name="intercept">2.643205</param>
+      <regression-coeff>0.99998933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="87">
+    <fit model="linear">
+      <param name="slope">-0.0020059156</param>
+      <param name="intercept">2.6419914</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="88">
+    <fit model="linear">
+      <param name="slope">-0.0020104137</param>
+      <param name="intercept">2.6653764</param>
+      <regression-coeff>0.9999869</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="89">
+    <fit model="linear">
+      <param name="slope">-0.0020059163</param>
+      <param name="intercept">2.6439981</param>
+      <regression-coeff>0.9999906</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="90">
+    <fit model="linear">
+      <param name="slope">-0.0020020267</param>
+      <param name="intercept">2.648609</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="91">
+    <fit model="linear">
+      <param name="slope">-0.002005903</param>
+      <param name="intercept">2.6452692</param>
+      <regression-coeff>0.999984</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="92">
+    <fit model="linear">
+      <param name="slope">-0.0020074123</param>
+      <param name="intercept">2.652815</param>
+      <regression-coeff>0.9999892</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="93">
+    <fit model="linear">
+      <param name="slope">-0.00200502</param>
+      <param name="intercept">2.6542077</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="94">
+    <fit model="linear">
+      <param name="slope">-0.0020146351</param>
+      <param name="intercept">2.6555898</param>
+      <regression-coeff>0.99998635</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="95">
+    <fit model="linear">
+      <param name="slope">-0.002017367</param>
+      <param name="intercept">2.679632</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="96">
+    <fit model="linear">
+      <param name="slope">-0.0019987393</param>
+      <param name="intercept">2.6194668</param>
+      <regression-coeff>0.9999852</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="97">
+    <fit model="linear">
+      <param name="slope">-0.0020065203</param>
+      <param name="intercept">2.6522684</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="98">
+    <fit model="linear">
+      <param name="slope">-0.0020058958</param>
+      <param name="intercept">2.6408887</param>
+      <regression-coeff>0.99998045</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="99">
+    <fit model="linear">
+      <param name="slope">-0.0020047242</param>
+      <param name="intercept">2.6713986</param>
+      <regression-coeff>0.999993</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="100">
+    <fit model="linear">
+      <param name="slope">-0.0020125278</param>
+      <param name="intercept">2.6558251</param>
+      <regression-coeff>0.99998945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="101">
+    <fit model="linear">
+      <param name="slope">-0.0020017298</param>
+      <param name="intercept">2.6443024</param>
+      <regression-coeff>0.99999124</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="102">
+    <fit model="linear">
+      <param name="slope">-0.0020101012</param>
+      <param name="intercept">2.6632361</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="103">
+    <fit model="linear">
+      <param name="slope">-0.002002328</param>
+      <param name="intercept">2.6356268</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="104">
+    <fit model="linear">
+      <param name="slope">-0.0020062102</param>
+      <param name="intercept">2.6459413</param>
+      <regression-coeff>0.99998754</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="105">
+    <fit model="linear">
+      <param name="slope">-0.0020110193</param>
+      <param name="intercept">2.6327202</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="106">
+    <fit model="linear">
+      <param name="slope">-0.0020005433</param>
+      <param name="intercept">2.644548</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="107">
+    <fit model="linear">
+      <param name="slope">-0.002002616</param>
+      <param name="intercept">2.649578</param>
+      <regression-coeff>0.9999862</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="108">
+    <fit model="linear">
+      <param name="slope">-0.0020055978</param>
+      <param name="intercept">2.6469676</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="109">
+    <fit model="linear">
+      <param name="slope">-0.0020086225</param>
+      <param name="intercept">2.657511</param>
+      <regression-coeff>0.99999416</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="110">
+    <fit model="linear">
+      <param name="slope">-0.0020005344</param>
+      <param name="intercept">2.637997</param>
+      <regression-coeff>0.9999895</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="111">
+    <fit model="linear">
+      <param name="slope">-0.0020014227</param>
+      <param name="intercept">2.6432686</param>
+      <regression-coeff>0.99998605</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="112">
+    <fit model="linear">
+      <param name="slope">-0.0020113133</param>
+      <param name="intercept">2.654962</param>
+      <regression-coeff>0.9999847</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="113">
+    <fit model="linear">
+      <param name="slope">-0.0020068074</param>
+      <param name="intercept">2.6487381</param>
+      <regression-coeff>0.9999862</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="114">
+    <fit model="linear">
+      <param name="slope">-0.002009199</param>
+      <param name="intercept">2.6482513</param>
+      <regression-coeff>0.99998087</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="115">
+    <fit model="linear">
+      <param name="slope">-0.0020074095</param>
+      <param name="intercept">2.6522682</param>
+      <regression-coeff>0.9999869</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="116">
+    <fit model="linear">
+      <param name="slope">-0.0020095163</param>
+      <param name="intercept">2.6312077</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="117">
+    <fit model="linear">
+      <param name="slope">-0.0020032169</param>
+      <param name="intercept">2.6399906</param>
+      <regression-coeff>0.9999876</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="118">
+    <fit model="linear">
+      <param name="slope">-0.0020061957</param>
+      <param name="intercept">2.66782</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="119">
+    <fit model="linear">
+      <param name="slope">-0.0020068127</param>
+      <param name="intercept">2.6502</param>
+      <regression-coeff>0.9999888</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="120">
+    <fit model="linear">
+      <param name="slope">-0.0020086206</param>
+      <param name="intercept">2.631399</param>
+      <regression-coeff>0.9999924</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="121">
+    <fit model="linear">
+      <param name="slope">-0.0020071114</param>
+      <param name="intercept">2.6426573</param>
+      <regression-coeff>0.9999889</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="122">
+    <fit model="linear">
+      <param name="slope">-0.0020050209</param>
+      <param name="intercept">2.6312406</param>
+      <regression-coeff>0.9999925</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="123">
+    <fit model="linear">
+      <param name="slope">-0.0020182792</param>
+      <param name="intercept">2.662402</param>
+      <regression-coeff>0.999991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="124">
+    <fit model="linear">
+      <param name="slope">-0.0020062146</param>
+      <param name="intercept">2.6546974</param>
+      <regression-coeff>0.99998975</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="125">
+    <fit model="linear">
+      <param name="slope">-0.002008016</param>
+      <param name="intercept">2.651238</param>
+      <regression-coeff>0.9999906</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="126">
+    <fit model="linear">
+      <param name="slope">-0.002003829</param>
+      <param name="intercept">2.642788</param>
+      <regression-coeff>0.9999945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="1" bin="127">
+    <fit model="linear">
+      <param name="slope">-0.0019784304</param>
+      <param name="intercept">2.6263835</param>
+      <regression-coeff>0.9999914</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="0">
+    <fit model="linear">
+      <param name="slope">-0.0019633817</param>
+      <param name="intercept">2.6863751</param>
+      <regression-coeff>0.99998796</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="1">
+    <fit model="linear">
+      <param name="slope">-0.0019642273</param>
+      <param name="intercept">2.671566</param>
+      <regression-coeff>0.9999795</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="2">
+    <fit model="linear">
+      <param name="slope">-0.0019700152</param>
+      <param name="intercept">2.645029</param>
+      <regression-coeff>0.99999225</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="3">
+    <fit model="linear">
+      <param name="slope">-0.0019880969</param>
+      <param name="intercept">2.6763573</param>
+      <regression-coeff>0.99999124</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="4">
+    <fit model="linear">
+      <param name="slope">-0.0019871893</param>
+      <param name="intercept">2.6738029</param>
+      <regression-coeff>0.9999781</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="5">
+    <fit model="linear">
+      <param name="slope">-0.0019872016</param>
+      <param name="intercept">2.6624277</param>
+      <regression-coeff>0.9999843</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="6">
+    <fit model="linear">
+      <param name="slope">-0.0019831103</param>
+      <param name="intercept">2.644852</param>
+      <regression-coeff>0.999993</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="7">
+    <fit model="linear">
+      <param name="slope">-0.0019845457</param>
+      <param name="intercept">2.6605945</param>
+      <regression-coeff>0.99997896</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="8">
+    <fit model="linear">
+      <param name="slope">-0.0019895663</param>
+      <param name="intercept">2.6637783</param>
+      <regression-coeff>0.99998975</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="9">
+    <fit model="linear">
+      <param name="slope">-0.0019892857</param>
+      <param name="intercept">2.6511838</param>
+      <regression-coeff>0.9999962</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="10">
+    <fit model="linear">
+      <param name="slope">-0.001978703</param>
+      <param name="intercept">2.6371064</param>
+      <regression-coeff>0.9999817</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="11">
+    <fit model="linear">
+      <param name="slope">-0.0019842829</param>
+      <param name="intercept">2.6599433</param>
+      <regression-coeff>0.99999356</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="12">
+    <fit model="linear">
+      <param name="slope">-0.0019839965</param>
+      <param name="intercept">2.6563973</param>
+      <regression-coeff>0.999997</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="13">
+    <fit model="linear">
+      <param name="slope">-0.0019869127</param>
+      <param name="intercept">2.6581519</param>
+      <regression-coeff>0.999987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="14">
+    <fit model="linear">
+      <param name="slope">-0.0019772742</param>
+      <param name="intercept">2.642097</param>
+      <regression-coeff>0.9999955</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="15">
+    <fit model="linear">
+      <param name="slope">-0.0019860524</param>
+      <param name="intercept">2.6641133</param>
+      <regression-coeff>0.9999981</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="16">
+    <fit model="linear">
+      <param name="slope">-0.0019880733</param>
+      <param name="intercept">2.6685765</param>
+      <regression-coeff>0.99997854</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="17">
+    <fit model="linear">
+      <param name="slope">-0.0019916315</param>
+      <param name="intercept">2.6715236</param>
+      <regression-coeff>0.9999888</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="18">
+    <fit model="linear">
+      <param name="slope">-0.0019813501</param>
+      <param name="intercept">2.646109</param>
+      <regression-coeff>0.9999913</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="19">
+    <fit model="linear">
+      <param name="slope">-0.0019886682</param>
+      <param name="intercept">2.6579788</param>
+      <regression-coeff>0.9999821</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="20">
+    <fit model="linear">
+      <param name="slope">-0.001986313</param>
+      <param name="intercept">2.6521232</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="21">
+    <fit model="linear">
+      <param name="slope">-0.0019895567</param>
+      <param name="intercept">2.6632314</param>
+      <regression-coeff>0.99998415</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="22">
+    <fit model="linear">
+      <param name="slope">-0.0019860533</param>
+      <param name="intercept">2.6659195</param>
+      <regression-coeff>0.9999985</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="23">
+    <fit model="linear">
+      <param name="slope">-0.0019863113</param>
+      <param name="intercept">2.6571784</param>
+      <regression-coeff>0.99998045</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="24">
+    <fit model="linear">
+      <param name="slope">-0.001990458</param>
+      <param name="intercept">2.6589036</param>
+      <regression-coeff>0.9999929</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="25">
+    <fit model="linear">
+      <param name="slope">-0.0019895758</param>
+      <param name="intercept">2.6596227</param>
+      <regression-coeff>0.9999946</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="26">
+    <fit model="linear">
+      <param name="slope">-0.0019892768</param>
+      <param name="intercept">2.652626</param>
+      <regression-coeff>0.9999918</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="27">
+    <fit model="linear">
+      <param name="slope">-0.00199193</param>
+      <param name="intercept">2.664587</param>
+      <regression-coeff>0.99999017</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="28">
+    <fit model="linear">
+      <param name="slope">-0.0019895618</param>
+      <param name="intercept">2.6610634</param>
+      <regression-coeff>0.99998754</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="29">
+    <fit model="linear">
+      <param name="slope">-0.001988083</param>
+      <param name="intercept">2.655386</param>
+      <regression-coeff>0.99998415</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="30">
+    <fit model="linear">
+      <param name="slope">-0.0019845762</param>
+      <param name="intercept">2.64437</param>
+      <regression-coeff>0.9999944</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="31">
+    <fit model="linear">
+      <param name="slope">-0.0019910487</param>
+      <param name="intercept">2.668924</param>
+      <regression-coeff>0.9999929</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="32">
+    <fit model="linear">
+      <param name="slope">-0.001982203</param>
+      <param name="intercept">2.6621382</param>
+      <regression-coeff>0.9999786</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="33">
+    <fit model="linear">
+      <param name="slope">-0.0019848524</param>
+      <param name="intercept">2.6392503</param>
+      <regression-coeff>0.9999847</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="34">
+    <fit model="linear">
+      <param name="slope">-0.0019878007</param>
+      <param name="intercept">2.6601486</param>
+      <regression-coeff>0.99999034</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="35">
+    <fit model="linear">
+      <param name="slope">-0.0019969346</param>
+      <param name="intercept">2.6683154</param>
+      <regression-coeff>0.9999743</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="36">
+    <fit model="linear">
+      <param name="slope">-0.0019874957</param>
+      <param name="intercept">2.6495419</param>
+      <regression-coeff>0.99998426</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="37">
+    <fit model="linear">
+      <param name="slope">-0.0019904335</param>
+      <param name="intercept">2.6485794</param>
+      <regression-coeff>0.9999806</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="38">
+    <fit model="linear">
+      <param name="slope">-0.0019831043</param>
+      <param name="intercept">2.6486342</param>
+      <regression-coeff>0.9999908</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="39">
+    <fit model="linear">
+      <param name="slope">-0.0019875027</param>
+      <param name="intercept">2.6645403</param>
+      <regression-coeff>0.99998856</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="40">
+    <fit model="linear">
+      <param name="slope">-0.0019954513</param>
+      <param name="intercept">2.6475558</param>
+      <regression-coeff>0.99997514</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="41">
+    <fit model="linear">
+      <param name="slope">-0.0019916429</param>
+      <param name="intercept">2.6751494</param>
+      <regression-coeff>0.9999945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="42">
+    <fit model="linear">
+      <param name="slope">-0.0019898734</param>
+      <param name="intercept">2.6590228</param>
+      <regression-coeff>0.99999493</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="43">
+    <fit model="linear">
+      <param name="slope">-0.0019928233</param>
+      <param name="intercept">2.6600688</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="44">
+    <fit model="linear">
+      <param name="slope">-0.0019872207</param>
+      <param name="intercept">2.6405764</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="45">
+    <fit model="linear">
+      <param name="slope">-0.0019860421</param>
+      <param name="intercept">2.6581497</param>
+      <regression-coeff>0.9999929</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="46">
+    <fit model="linear">
+      <param name="slope">-0.0019839923</param>
+      <param name="intercept">2.662167</param>
+      <regression-coeff>0.99999505</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="47">
+    <fit model="linear">
+      <param name="slope">-0.0019931183</param>
+      <param name="intercept">2.6565685</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="48">
+    <fit model="linear">
+      <param name="slope">-0.001992228</param>
+      <param name="intercept">2.6638052</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="49">
+    <fit model="linear">
+      <param name="slope">-0.0019883951</param>
+      <param name="intercept">2.6486475</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="50">
+    <fit model="linear">
+      <param name="slope">-0.001989868</param>
+      <param name="intercept">2.6481667</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="51">
+    <fit model="linear">
+      <param name="slope">-0.001989869</param>
+      <param name="intercept">2.6588404</param>
+      <regression-coeff>0.9999927</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="52">
+    <fit model="linear">
+      <param name="slope">-0.0019875166</param>
+      <param name="intercept">2.6634626</param>
+      <regression-coeff>0.9999955</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="53">
+    <fit model="linear">
+      <param name="slope">-0.0019863374</param>
+      <param name="intercept">2.6597185</param>
+      <regression-coeff>0.99999356</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="54">
+    <fit model="linear">
+      <param name="slope">-0.0019881038</param>
+      <param name="intercept">2.6476228</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="55">
+    <fit model="linear">
+      <param name="slope">-0.0019813552</param>
+      <param name="intercept">2.637827</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="56">
+    <fit model="linear">
+      <param name="slope">-0.0019875115</param>
+      <param name="intercept">2.642501</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="57">
+    <fit model="linear">
+      <param name="slope">-0.001988389</param>
+      <param name="intercept">2.6444871</param>
+      <regression-coeff>0.9999891</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="58">
+    <fit model="linear">
+      <param name="slope">-0.0019898734</param>
+      <param name="intercept">2.6431034</param>
+      <regression-coeff>0.99999493</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="59">
+    <fit model="linear">
+      <param name="slope">-0.0019919327</param>
+      <param name="intercept">2.6542659</param>
+      <regression-coeff>0.99999154</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="60">
+    <fit model="linear">
+      <param name="slope">-0.001986332</param>
+      <param name="intercept">2.6640494</param>
+      <regression-coeff>0.9999908</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="61">
+    <fit model="linear">
+      <param name="slope">-0.0019916445</param>
+      <param name="intercept">2.647266</param>
+      <regression-coeff>0.9999962</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="62">
+    <fit model="linear">
+      <param name="slope">-0.001989868</param>
+      <param name="intercept">2.644187</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="63">
+    <fit model="linear">
+      <param name="slope">-0.0019875115</param>
+      <param name="intercept">2.6584005</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="64">
+    <fit model="linear">
+      <param name="slope">-0.0019895697</param>
+      <param name="intercept">2.6384583</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="65">
+    <fit model="linear">
+      <param name="slope">-0.0019934168</param>
+      <param name="intercept">2.6590476</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="66">
+    <fit model="linear">
+      <param name="slope">-0.0019954883</param>
+      <param name="intercept">2.6637173</param>
+      <regression-coeff>0.9999937</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="67">
+    <fit model="linear">
+      <param name="slope">-0.001990149</param>
+      <param name="intercept">2.6300087</param>
+      <regression-coeff>0.99998605</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="68">
+    <fit model="linear">
+      <param name="slope">-0.001990162</param>
+      <param name="intercept">2.6310995</param>
+      <regression-coeff>0.9999926</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="69">
+    <fit model="linear">
+      <param name="slope">-0.001989868</param>
+      <param name="intercept">2.6342375</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="70">
+    <fit model="linear">
+      <param name="slope">-0.0019877953</param>
+      <param name="intercept">2.6484008</param>
+      <regression-coeff>0.99998677</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="71">
+    <fit model="linear">
+      <param name="slope">-0.0019872207</param>
+      <param name="intercept">2.6405764</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="72">
+    <fit model="linear">
+      <param name="slope">-0.0019904615</param>
+      <param name="intercept">2.6451545</param>
+      <regression-coeff>0.99999386</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="73">
+    <fit model="linear">
+      <param name="slope">-0.0019910296</param>
+      <param name="intercept">2.6689157</param>
+      <regression-coeff>0.9999834</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="74">
+    <fit model="linear">
+      <param name="slope">-0.0019910426</param>
+      <param name="intercept">2.6535366</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="75">
+    <fit model="linear">
+      <param name="slope">-0.0019916384</param>
+      <param name="intercept">2.6642838</param>
+      <regression-coeff>0.99999225</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="76">
+    <fit model="linear">
+      <param name="slope">-0.0019889441</param>
+      <param name="intercept">2.641459</param>
+      <regression-coeff>0.9999727</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="77">
+    <fit model="linear">
+      <param name="slope">-0.0019933905</param>
+      <param name="intercept">2.6304042</param>
+      <regression-coeff>0.99998146</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="78">
+    <fit model="linear">
+      <param name="slope">-0.00198869</param>
+      <param name="intercept">2.6502132</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="79">
+    <fit model="linear">
+      <param name="slope">-0.001988988</param>
+      <param name="intercept">2.6620903</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="80">
+    <fit model="linear">
+      <param name="slope">-0.0019966755</param>
+      <param name="intercept">2.6604002</param>
+      <regression-coeff>0.9999933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="81">
+    <fit model="linear">
+      <param name="slope">-0.0019913383</param>
+      <param name="intercept">2.654925</param>
+      <regression-coeff>0.9999899</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="82">
+    <fit model="linear">
+      <param name="slope">-0.0019937</param>
+      <param name="intercept">2.6495593</param>
+      <regression-coeff>0.99998814</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="83">
+    <fit model="linear">
+      <param name="slope">-0.0019857564</param>
+      <param name="intercept">2.635827</param>
+      <regression-coeff>0.999997</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="84">
+    <fit model="linear">
+      <param name="slope">-0.0019916429</param>
+      <param name="intercept">2.6552327</param>
+      <regression-coeff>0.9999945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="85">
+    <fit model="linear">
+      <param name="slope">-0.001997563</param>
+      <param name="intercept">2.6518712</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="86">
+    <fit model="linear">
+      <param name="slope">-0.0019925304</param>
+      <param name="intercept">2.6440065</param>
+      <regression-coeff>0.99999547</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="87">
+    <fit model="linear">
+      <param name="slope">-0.0019940138</param>
+      <param name="intercept">2.6438875</param>
+      <regression-coeff>0.99999696</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="88">
+    <fit model="linear">
+      <param name="slope">-0.0019969505</param>
+      <param name="intercept">2.667959</param>
+      <regression-coeff>0.99998224</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="89">
+    <fit model="linear">
+      <param name="slope">-0.0019910522</param>
+      <param name="intercept">2.643223</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="90">
+    <fit model="linear">
+      <param name="slope">-0.0019886917</param>
+      <param name="intercept">2.6494918</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="91">
+    <fit model="linear">
+      <param name="slope">-0.0019939865</param>
+      <param name="intercept">2.6465945</param>
+      <regression-coeff>0.9999833</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="92">
+    <fit model="linear">
+      <param name="slope">-0.0019951921</param>
+      <param name="intercept">2.6537993</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="93">
+    <fit model="linear">
+      <param name="slope">-0.0019922236</param>
+      <param name="intercept">2.6540232</param>
+      <regression-coeff>0.9999899</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="94">
+    <fit model="linear">
+      <param name="slope">-0.002005298</param>
+      <param name="intercept">2.6576018</param>
+      <regression-coeff>0.99998116</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="95">
+    <fit model="linear">
+      <param name="slope">-0.002001429</param>
+      <param name="intercept">2.6802056</param>
+      <regression-coeff>0.9999892</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="96">
+    <fit model="linear">
+      <param name="slope">-0.0019842517</param>
+      <param name="intercept">2.6186225</param>
+      <regression-coeff>0.99997777</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="97">
+    <fit model="linear">
+      <param name="slope">-0.0019936655</param>
+      <param name="intercept">2.653894</param>
+      <regression-coeff>0.9999716</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="98">
+    <fit model="linear">
+      <param name="slope">-0.001990169</param>
+      <param name="intercept">2.6405113</param>
+      <regression-coeff>0.99999523</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="99">
+    <fit model="linear">
+      <param name="slope">-0.0019901393</param>
+      <param name="intercept">2.672159</param>
+      <regression-coeff>0.99998116</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="100">
+    <fit model="linear">
+      <param name="slope">-0.0019975756</param>
+      <param name="intercept">2.654599</param>
+      <regression-coeff>0.9999984</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="101">
+    <fit model="linear">
+      <param name="slope">-0.0019869215</param>
+      <param name="intercept">2.6444283</param>
+      <regression-coeff>0.9999914</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="102">
+    <fit model="linear">
+      <param name="slope">-0.0019981482</param>
+      <param name="intercept">2.6657348</param>
+      <regression-coeff>0.9999872</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="103">
+    <fit model="linear">
+      <param name="slope">-0.0019898645</param>
+      <param name="intercept">2.6358643</param>
+      <regression-coeff>0.99999046</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="104">
+    <fit model="linear">
+      <param name="slope">-0.0019922254</param>
+      <param name="intercept">2.6458747</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="105">
+    <fit model="linear">
+      <param name="slope">-0.001998426</param>
+      <param name="intercept">2.6349673</param>
+      <regression-coeff>0.99997723</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="106">
+    <fit model="linear">
+      <param name="slope">-0.0019931227</param>
+      <param name="intercept">2.647691</param>
+      <regression-coeff>0.9999948</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="107">
+    <fit model="linear">
+      <param name="slope">-0.001989868</param>
+      <param name="intercept">2.6481667</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="108">
+    <fit model="linear">
+      <param name="slope">-0.0019945928</param>
+      <param name="intercept">2.6477494</param>
+      <regression-coeff>0.9999909</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="109">
+    <fit model="linear">
+      <param name="slope">-0.0019966702</param>
+      <param name="intercept">2.6593096</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="110">
+    <fit model="linear">
+      <param name="slope">-0.0019910391</param>
+      <param name="intercept">2.639054</param>
+      <regression-coeff>0.99998814</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="111">
+    <fit model="linear">
+      <param name="slope">-0.0019863225</param>
+      <param name="intercept">2.6425579</param>
+      <regression-coeff>0.99998605</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="112">
+    <fit model="linear">
+      <param name="slope">-0.0019966755</param>
+      <param name="intercept">2.6547742</param>
+      <regression-coeff>0.9999933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="113">
+    <fit model="linear">
+      <param name="slope">-0.0019980979</param>
+      <param name="intercept">2.6513646</param>
+      <regression-coeff>0.99996203</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="114">
+    <fit model="linear">
+      <param name="slope">-0.001994571</param>
+      <param name="intercept">2.6470156</param>
+      <regression-coeff>0.9999791</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="115">
+    <fit model="linear">
+      <param name="slope">-0.0019963705</param>
+      <param name="intercept">2.6537387</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="116">
+    <fit model="linear">
+      <param name="slope">-0.0019987596</param>
+      <param name="intercept">2.632738</param>
+      <regression-coeff>0.9999962</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="117">
+    <fit model="linear">
+      <param name="slope">-0.0019901576</param>
+      <param name="intercept">2.6408677</param>
+      <regression-coeff>0.99999034</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="118">
+    <fit model="linear">
+      <param name="slope">-0.0019951789</param>
+      <param name="intercept">2.6672165</param>
+      <regression-coeff>0.99998647</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="119">
+    <fit model="linear">
+      <param name="slope">-0.0019919344</param>
+      <param name="intercept">2.6491957</param>
+      <regression-coeff>0.9999932</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="120">
+    <fit model="linear">
+      <param name="slope">-0.0019972683</param>
+      <param name="intercept">2.6330483</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="121">
+    <fit model="linear">
+      <param name="slope">-0.0019972718</param>
+      <param name="intercept">2.6423104</param>
+      <regression-coeff>0.9999943</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="122">
+    <fit model="linear">
+      <param name="slope">-0.0019928173</param>
+      <param name="intercept">2.6299937</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="123">
+    <fit model="linear">
+      <param name="slope">-0.0020047268</param>
+      <param name="intercept">2.6613758</param>
+      <regression-coeff>0.99999523</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="124">
+    <fit model="linear">
+      <param name="slope">-0.001993705</param>
+      <param name="intercept">2.6560867</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="125">
+    <fit model="linear">
+      <param name="slope">-0.0019933959</param>
+      <param name="intercept">2.6505213</param>
+      <regression-coeff>0.99998415</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="126">
+    <fit model="linear">
+      <param name="slope">-0.0019916375</param>
+      <param name="intercept">2.6425567</param>
+      <regression-coeff>0.99999183</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="0" channel="2" bin="127">
+    <fit model="linear">
+      <param name="slope">-0.0019702925</param>
+      <param name="intercept">2.62562</param>
+      <regression-coeff>0.99998623</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="0">
+    <fit model="linear">
+      <param name="slope">-0.0020907072</param>
+      <param name="intercept">2.6907156</param>
+      <regression-coeff>0.99991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="1">
+    <fit model="linear">
+      <param name="slope">-0.0020982912</param>
+      <param name="intercept">2.6780012</param>
+      <regression-coeff>0.9999431</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="2">
+    <fit model="linear">
+      <param name="slope">-0.0021094908</param>
+      <param name="intercept">2.651454</param>
+      <regression-coeff>0.9999396</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="3">
+    <fit model="linear">
+      <param name="slope">-0.0021251899</param>
+      <param name="intercept">2.6855738</param>
+      <regression-coeff>0.9997844</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="4">
+    <fit model="linear">
+      <param name="slope">-0.0021262234</param>
+      <param name="intercept">2.6832826</param>
+      <regression-coeff>0.9999537</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="5">
+    <fit model="linear">
+      <param name="slope">-0.0021200136</param>
+      <param name="intercept">2.6688452</param>
+      <regression-coeff>0.9998744</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="6">
+    <fit model="linear">
+      <param name="slope">-0.0021213705</param>
+      <param name="intercept">2.6527967</param>
+      <regression-coeff>0.999883</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="7">
+    <fit model="linear">
+      <param name="slope">-0.002124257</param>
+      <param name="intercept">2.6705225</param>
+      <regression-coeff>0.99997693</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="8">
+    <fit model="linear">
+      <param name="slope">-0.0021275452</param>
+      <param name="intercept">2.670275</param>
+      <regression-coeff>0.99994105</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="9">
+    <fit model="linear">
+      <param name="slope">-0.0021238276</param>
+      <param name="intercept">2.6560636</param>
+      <regression-coeff>0.999934</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="10">
+    <fit model="linear">
+      <param name="slope">-0.0021105085</param>
+      <param name="intercept">2.6411061</param>
+      <regression-coeff>0.9999502</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="11">
+    <fit model="linear">
+      <param name="slope">-0.0021405981</param>
+      <param name="intercept">2.6734774</param>
+      <regression-coeff>0.9998588</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="12">
+    <fit model="linear">
+      <param name="slope">-0.0021172077</param>
+      <param name="intercept">2.6604218</param>
+      <regression-coeff>0.9999712</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="13">
+    <fit model="linear">
+      <param name="slope">-0.0021100887</param>
+      <param name="intercept">2.6593602</param>
+      <regression-coeff>0.9999085</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="14">
+    <fit model="linear">
+      <param name="slope">-0.0021108743</param>
+      <param name="intercept">2.647963</param>
+      <regression-coeff>0.99996614</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="15">
+    <fit model="linear">
+      <param name="slope">-0.0021228648</param>
+      <param name="intercept">2.6695864</param>
+      <regression-coeff>0.9999544</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="16">
+    <fit model="linear">
+      <param name="slope">-0.0021234753</param>
+      <param name="intercept">2.677548</param>
+      <regression-coeff>0.9999264</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="17">
+    <fit model="linear">
+      <param name="slope">-0.0021292605</param>
+      <param name="intercept">2.6833405</param>
+      <regression-coeff>0.99995375</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="18">
+    <fit model="linear">
+      <param name="slope">-0.0021165856</param>
+      <param name="intercept">2.650365</param>
+      <regression-coeff>0.99999195</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="19">
+    <fit model="linear">
+      <param name="slope">-0.0021215614</param>
+      <param name="intercept">2.6642497</param>
+      <regression-coeff>0.99981487</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="20">
+    <fit model="linear">
+      <param name="slope">-0.0021225237</param>
+      <param name="intercept">2.6630847</param>
+      <regression-coeff>0.99995196</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="21">
+    <fit model="linear">
+      <param name="slope">-0.0021188643</param>
+      <param name="intercept">2.6693547</param>
+      <regression-coeff>0.9998062</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="22">
+    <fit model="linear">
+      <param name="slope">-0.0021136815</param>
+      <param name="intercept">2.667688</param>
+      <regression-coeff>0.9998792</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="23">
+    <fit model="linear">
+      <param name="slope">-0.0021201486</param>
+      <param name="intercept">2.6662004</param>
+      <regression-coeff>0.9999391</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="24">
+    <fit model="linear">
+      <param name="slope">-0.0021172247</param>
+      <param name="intercept">2.665433</param>
+      <regression-coeff>0.9999783</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="25">
+    <fit model="linear">
+      <param name="slope">-0.0021232623</param>
+      <param name="intercept">2.6645312</param>
+      <regression-coeff>0.9999843</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="26">
+    <fit model="linear">
+      <param name="slope">-0.002122238</param>
+      <param name="intercept">2.6600783</param>
+      <regression-coeff>0.99997556</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="27">
+    <fit model="linear">
+      <param name="slope">-0.0021235966</param>
+      <param name="intercept">2.671614</param>
+      <regression-coeff>0.99998266</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="28">
+    <fit model="linear">
+      <param name="slope">-0.0021288444</param>
+      <param name="intercept">2.6684644</param>
+      <regression-coeff>0.99991804</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="29">
+    <fit model="linear">
+      <param name="slope">-0.0021285915</param>
+      <param name="intercept">2.6646895</param>
+      <regression-coeff>0.99995697</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="30">
+    <fit model="linear">
+      <param name="slope">-0.002117518</param>
+      <param name="intercept">2.65169</param>
+      <regression-coeff>0.99995905</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="31">
+    <fit model="linear">
+      <param name="slope">-0.0021393339</param>
+      <param name="intercept">2.684066</param>
+      <regression-coeff>0.9999051</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="32">
+    <fit model="linear">
+      <param name="slope">-0.0021178771</param>
+      <param name="intercept">2.6695411</param>
+      <regression-coeff>0.9999708</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="33">
+    <fit model="linear">
+      <param name="slope">-0.00211651</param>
+      <param name="intercept">2.645911</param>
+      <regression-coeff>0.9999562</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="34">
+    <fit model="linear">
+      <param name="slope">-0.002130121</param>
+      <param name="intercept">2.6716764</param>
+      <regression-coeff>0.99988353</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="35">
+    <fit model="linear">
+      <param name="slope">-0.0021293375</param>
+      <param name="intercept">2.6740777</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="36">
+    <fit model="linear">
+      <param name="slope">-0.002114547</param>
+      <param name="intercept">2.6530366</param>
+      <regression-coeff>0.9998158</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="37">
+    <fit model="linear">
+      <param name="slope">-0.0021248541</param>
+      <param name="intercept">2.6578164</param>
+      <regression-coeff>0.99994224</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="38">
+    <fit model="linear">
+      <param name="slope">-0.0021155416</param>
+      <param name="intercept">2.657077</param>
+      <regression-coeff>0.9999716</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="39">
+    <fit model="linear">
+      <param name="slope">-0.002123222</param>
+      <param name="intercept">2.6722362</param>
+      <regression-coeff>0.9999653</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="40">
+    <fit model="linear">
+      <param name="slope">-0.0021252583</param>
+      <param name="intercept">2.654301</param>
+      <regression-coeff>0.999975</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="41">
+    <fit model="linear">
+      <param name="slope">-0.0021182236</param>
+      <param name="intercept">2.6821957</param>
+      <regression-coeff>0.9999765</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="42">
+    <fit model="linear">
+      <param name="slope">-0.002121239</param>
+      <param name="intercept">2.6656659</param>
+      <regression-coeff>0.9999791</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="43">
+    <fit model="linear">
+      <param name="slope">-0.0021222592</param>
+      <param name="intercept">2.6652958</param>
+      <regression-coeff>0.9999855</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="44">
+    <fit model="linear">
+      <param name="slope">-0.0021208809</param>
+      <param name="intercept">2.6479788</param>
+      <regression-coeff>0.9999683</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="45">
+    <fit model="linear">
+      <param name="slope">-0.0021167968</param>
+      <param name="intercept">2.6664188</param>
+      <regression-coeff>0.999934</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="46">
+    <fit model="linear">
+      <param name="slope">-0.0021138638</param>
+      <param name="intercept">2.6660311</param>
+      <regression-coeff>0.9999654</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="47">
+    <fit model="linear">
+      <param name="slope">-0.002123255</param>
+      <param name="intercept">2.6651077</param>
+      <regression-coeff>0.99998003</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="48">
+    <fit model="linear">
+      <param name="slope">-0.0021299801</param>
+      <param name="intercept">2.6749146</param>
+      <regression-coeff>0.99997526</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="49">
+    <fit model="linear">
+      <param name="slope">-0.0021212623</param>
+      <param name="intercept">2.6529472</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="50">
+    <fit model="linear">
+      <param name="slope">-0.0021192126</param>
+      <param name="intercept">2.652539</param>
+      <regression-coeff>0.9999705</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="51">
+    <fit model="linear">
+      <param name="slope">-0.0021235785</param>
+      <param name="intercept">2.6689036</param>
+      <regression-coeff>0.9999741</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="52">
+    <fit model="linear">
+      <param name="slope">-0.0021165763</param>
+      <param name="intercept">2.6684492</param>
+      <regression-coeff>0.99998754</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="53">
+    <fit model="linear">
+      <param name="slope">-0.0021232488</param>
+      <param name="intercept">2.6664565</param>
+      <regression-coeff>0.99997705</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="54">
+    <fit model="linear">
+      <param name="slope">-0.0021229084</param>
+      <param name="intercept">2.6566732</param>
+      <regression-coeff>0.99997586</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="55">
+    <fit model="linear">
+      <param name="slope">-0.0021155877</param>
+      <param name="intercept">2.646324</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="56">
+    <fit model="linear">
+      <param name="slope">-0.0021252744</param>
+      <param name="intercept">2.6510239</param>
+      <regression-coeff>0.9999816</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="57">
+    <fit model="linear">
+      <param name="slope">-0.0021185619</param>
+      <param name="intercept">2.64882</param>
+      <regression-coeff>0.99997926</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="58">
+    <fit model="linear">
+      <param name="slope">-0.002121239</param>
+      <param name="intercept">2.6510098</param>
+      <regression-coeff>0.9999791</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="59">
+    <fit model="linear">
+      <param name="slope">-0.0021205582</param>
+      <param name="intercept">2.6609645</param>
+      <regression-coeff>0.99997324</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="60">
+    <fit model="linear">
+      <param name="slope">-0.002122166</param>
+      <param name="intercept">2.6716251</param>
+      <regression-coeff>0.9999416</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="61">
+    <fit model="linear">
+      <param name="slope">-0.002123238</param>
+      <param name="intercept">2.6562226</param>
+      <regression-coeff>0.999972</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="62">
+    <fit model="linear">
+      <param name="slope">-0.0021265969</param>
+      <param name="intercept">2.6548212</param>
+      <regression-coeff>0.9999708</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="63">
+    <fit model="linear">
+      <param name="slope">-0.002124276</param>
+      <param name="intercept">2.6666665</param>
+      <regression-coeff>0.99998677</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="64">
+    <fit model="linear">
+      <param name="slope">-0.0021202418</param>
+      <param name="intercept">2.6438785</param>
+      <regression-coeff>0.999982</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="65">
+    <fit model="linear">
+      <param name="slope">-0.002127511</param>
+      <param name="intercept">2.6706483</param>
+      <regression-coeff>0.999925</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="66">
+    <fit model="linear">
+      <param name="slope">-0.0021237852</param>
+      <param name="intercept">2.6693711</param>
+      <regression-coeff>0.9999141</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="67">
+    <fit model="linear">
+      <param name="slope">-0.002133258</param>
+      <param name="intercept">2.6387832</param>
+      <regression-coeff>0.99992603</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="68">
+    <fit model="linear">
+      <param name="slope">-0.0021205435</param>
+      <param name="intercept">2.636668</param>
+      <regression-coeff>0.9999664</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="69">
+    <fit model="linear">
+      <param name="slope">-0.0021332828</param>
+      <param name="intercept">2.6459692</param>
+      <regression-coeff>0.9999368</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="70">
+    <fit model="linear">
+      <param name="slope">-0.0021229074</param>
+      <param name="intercept">2.655708</param>
+      <regression-coeff>0.9999745</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="71">
+    <fit model="linear">
+      <param name="slope">-0.0021155311</param>
+      <param name="intercept">2.6455333</param>
+      <regression-coeff>0.99996585</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="72">
+    <fit model="linear">
+      <param name="slope">-0.0021336633</param>
+      <param name="intercept">2.6596923</param>
+      <regression-coeff>0.9999561</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="73">
+    <fit model="linear">
+      <param name="slope">-0.0021205158</param>
+      <param name="intercept">2.6777184</param>
+      <regression-coeff>0.9999542</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="74">
+    <fit model="linear">
+      <param name="slope">-0.00213109</param>
+      <param name="intercept">2.6637297</param>
+      <regression-coeff>0.999861</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="75">
+    <fit model="linear">
+      <param name="slope">-0.002121868</param>
+      <param name="intercept">2.6713142</param>
+      <regression-coeff>0.9998012</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="76">
+    <fit model="linear">
+      <param name="slope">-0.0021269706</param>
+      <param name="intercept">2.6541922</param>
+      <regression-coeff>0.9998295</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="77">
+    <fit model="linear">
+      <param name="slope">-0.0021146077</param>
+      <param name="intercept">2.6342218</param>
+      <regression-coeff>0.9998445</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="78">
+    <fit model="linear">
+      <param name="slope">-0.0021282511</param>
+      <param name="intercept">2.6593304</param>
+      <regression-coeff>0.99995565</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="79">
+    <fit model="linear">
+      <param name="slope">-0.0021256458</param>
+      <param name="intercept">2.6745498</param>
+      <regression-coeff>0.9998405</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="80">
+    <fit model="linear">
+      <param name="slope">-0.0021222592</param>
+      <param name="intercept">2.666259</param>
+      <regression-coeff>0.9999855</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="81">
+    <fit model="linear">
+      <param name="slope">-0.0021266034</param>
+      <param name="intercept">2.6606226</param>
+      <regression-coeff>0.999973</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="82">
+    <fit model="linear">
+      <param name="slope">-0.0021306784</param>
+      <param name="intercept">2.6596942</param>
+      <regression-coeff>0.99998635</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="83">
+    <fit model="linear">
+      <param name="slope">-0.0021138974</param>
+      <param name="intercept">2.6422153</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="84">
+    <fit model="linear">
+      <param name="slope">-0.002123586</param>
+      <param name="intercept">2.6617618</param>
+      <regression-coeff>0.99997854</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="85">
+    <fit model="linear">
+      <param name="slope">-0.0021286395</param>
+      <param name="intercept">2.6558056</param>
+      <regression-coeff>0.99998045</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="86">
+    <fit model="linear">
+      <param name="slope">-0.0021229296</param>
+      <param name="intercept">2.652822</param>
+      <regression-coeff>0.99998486</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="87">
+    <fit model="linear">
+      <param name="slope">-0.002128961</param>
+      <param name="intercept">2.653995</param>
+      <regression-coeff>0.9999728</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="88">
+    <fit model="linear">
+      <param name="slope">-0.002127638</param>
+      <param name="intercept">2.6716657</param>
+      <regression-coeff>0.99998474</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="89">
+    <fit model="linear">
+      <param name="slope">-0.002124601</param>
+      <param name="intercept">2.6536613</param>
+      <regression-coeff>0.99998146</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="90">
+    <fit model="linear">
+      <param name="slope">-0.0021215484</param>
+      <param name="intercept">2.6605802</param>
+      <regression-coeff>0.9999668</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="91">
+    <fit model="linear">
+      <param name="slope">-0.0021275675</param>
+      <param name="intercept">2.6546164</param>
+      <regression-coeff>0.99995154</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="92">
+    <fit model="linear">
+      <param name="slope">-0.0021168578</param>
+      <param name="intercept">2.6550896</param>
+      <regression-coeff>0.99996275</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="93">
+    <fit model="linear">
+      <param name="slope">-0.0021248201</param>
+      <param name="intercept">2.666881</param>
+      <regression-coeff>0.99992627</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="94">
+    <fit model="linear">
+      <param name="slope">-0.0021431227</param>
+      <param name="intercept">2.6697938</param>
+      <regression-coeff>0.99992085</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="95">
+    <fit model="linear">
+      <param name="slope">-0.002122061</param>
+      <param name="intercept">2.681808</param>
+      <regression-coeff>0.9998921</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="96">
+    <fit model="linear">
+      <param name="slope">-0.0021189214</param>
+      <param name="intercept">2.6271896</param>
+      <regression-coeff>0.999991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="97">
+    <fit model="linear">
+      <param name="slope">-0.0021388158</param>
+      <param name="intercept">2.6694713</param>
+      <regression-coeff>0.9998224</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="98">
+    <fit model="linear">
+      <param name="slope">-0.0021175137</param>
+      <param name="intercept">2.6466808</param>
+      <regression-coeff>0.9999579</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="99">
+    <fit model="linear">
+      <param name="slope">-0.0021250697</param>
+      <param name="intercept">2.6791499</param>
+      <regression-coeff>0.9998863</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="100">
+    <fit model="linear">
+      <param name="slope">-0.0021299063</param>
+      <param name="intercept">2.6644292</param>
+      <regression-coeff>0.9999406</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="101">
+    <fit model="linear">
+      <param name="slope">-0.002132296</param>
+      <param name="intercept">2.6591609</param>
+      <regression-coeff>0.999951</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="102">
+    <fit model="linear">
+      <param name="slope">-0.002125927</param>
+      <param name="intercept">2.6704087</param>
+      <regression-coeff>0.9999727</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="103">
+    <fit model="linear">
+      <param name="slope">-0.0021208301</param>
+      <param name="intercept">2.6446817</param>
+      <regression-coeff>0.9999443</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="104">
+    <fit model="linear">
+      <param name="slope">-0.0021299147</param>
+      <param name="intercept">2.658623</param>
+      <regression-coeff>0.99994457</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="105">
+    <fit model="linear">
+      <param name="slope">-0.0021273002</param>
+      <param name="intercept">2.6409745</param>
+      <regression-coeff>0.9999854</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="106">
+    <fit model="linear">
+      <param name="slope">-0.002125224</param>
+      <param name="intercept">2.6523573</param>
+      <regression-coeff>0.99979955</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="107">
+    <fit model="linear">
+      <param name="slope">-0.0021157153</param>
+      <param name="intercept">2.6581075</param>
+      <regression-coeff>0.9998961</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="108">
+    <fit model="linear">
+      <param name="slope">-0.002131618</param>
+      <param name="intercept">2.6598659</param>
+      <regression-coeff>0.9999508</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="109">
+    <fit model="linear">
+      <param name="slope">-0.002132322</param>
+      <param name="intercept">2.6684754</param>
+      <regression-coeff>0.99996316</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="110">
+    <fit model="linear">
+      <param name="slope">-0.0021222509</param>
+      <param name="intercept">2.6465774</param>
+      <regression-coeff>0.9999816</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="111">
+    <fit model="linear">
+      <param name="slope">-0.0021147104</param>
+      <param name="intercept">2.64887</param>
+      <regression-coeff>0.999894</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="112">
+    <fit model="linear">
+      <param name="slope">-0.0021353</param>
+      <param name="intercept">2.6684802</param>
+      <regression-coeff>0.9997694</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="113">
+    <fit model="linear">
+      <param name="slope">-0.002135555</param>
+      <param name="intercept">2.6608148</param>
+      <regression-coeff>0.9998887</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="114">
+    <fit model="linear">
+      <param name="slope">-0.0021151348</param>
+      <param name="intercept">2.6524968</param>
+      <regression-coeff>0.9999361</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="115">
+    <fit model="linear">
+      <param name="slope">-0.002137768</param>
+      <param name="intercept">2.6675048</param>
+      <regression-coeff>0.99996984</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="116">
+    <fit model="linear">
+      <param name="slope">-0.0021296581</param>
+      <param name="intercept">2.6407115</param>
+      <regression-coeff>0.9999828</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="117">
+    <fit model="linear">
+      <param name="slope">-0.0021063206</param>
+      <param name="intercept">2.6433282</param>
+      <regression-coeff>0.9998479</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="118">
+    <fit model="linear">
+      <param name="slope">-0.0021218264</param>
+      <param name="intercept">2.6786282</param>
+      <regression-coeff>0.9999397</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="119">
+    <fit model="linear">
+      <param name="slope">-0.0021359294</param>
+      <param name="intercept">2.6654263</param>
+      <regression-coeff>0.9999048</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="120">
+    <fit model="linear">
+      <param name="slope">-0.0021168094</param>
+      <param name="intercept">2.6346722</param>
+      <regression-coeff>0.9999399</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="121">
+    <fit model="linear">
+      <param name="slope">-0.0021276562</param>
+      <param name="intercept">2.6498148</param>
+      <regression-coeff>0.9999932</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="122">
+    <fit model="linear">
+      <param name="slope">-0.0021295673</param>
+      <param name="intercept">2.6433878</param>
+      <regression-coeff>0.9999392</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="123">
+    <fit model="linear">
+      <param name="slope">-0.0021445726</param>
+      <param name="intercept">2.676406</param>
+      <regression-coeff>0.9999581</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="124">
+    <fit model="linear">
+      <param name="slope">-0.0021289238</param>
+      <param name="intercept">2.664626</param>
+      <regression-coeff>0.9999544</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="125">
+    <fit model="linear">
+      <param name="slope">-0.0021262171</param>
+      <param name="intercept">2.659119</param>
+      <regression-coeff>0.9999507</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="126">
+    <fit model="linear">
+      <param name="slope">-0.002118137</param>
+      <param name="intercept">2.653853</param>
+      <regression-coeff>0.9999365</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="0" bin="127">
+    <fit model="linear">
+      <param name="slope">-0.0020911337</param>
+      <param name="intercept">2.631769</param>
+      <regression-coeff>0.9999581</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="0">
+    <fit model="linear">
+      <param name="slope">-0.0019648194</param>
+      <param name="intercept">2.6819997</param>
+      <regression-coeff>0.9999889</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="1">
+    <fit model="linear">
+      <param name="slope">-0.0019758102</param>
+      <param name="intercept">2.668977</param>
+      <regression-coeff>0.99999046</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="2">
+    <fit model="linear">
+      <param name="slope">-0.0019834081</param>
+      <param name="intercept">2.641546</param>
+      <regression-coeff>0.9999962</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="3">
+    <fit model="linear">
+      <param name="slope">-0.0019996306</param>
+      <param name="intercept">2.6727169</param>
+      <regression-coeff>0.99998486</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="4">
+    <fit model="linear">
+      <param name="slope">-0.0020008313</param>
+      <param name="intercept">2.6704946</param>
+      <regression-coeff>0.9999888</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="5">
+    <fit model="linear">
+      <param name="slope">-0.001997256</param>
+      <param name="intercept">2.6577373</param>
+      <regression-coeff>0.99998635</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="6">
+    <fit model="linear">
+      <param name="slope">-0.0019937009</param>
+      <param name="intercept">2.6412225</param>
+      <regression-coeff>0.99998856</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="7">
+    <fit model="linear">
+      <param name="slope">-0.0020002376</param>
+      <param name="intercept">2.6586065</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="8">
+    <fit model="linear">
+      <param name="slope">-0.002000832</param>
+      <param name="intercept">2.6586711</param>
+      <regression-coeff>0.9999892</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="9">
+    <fit model="linear">
+      <param name="slope">-0.0020014388</param>
+      <param name="intercept">2.6487334</param>
+      <regression-coeff>0.99999505</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="10">
+    <fit model="linear">
+      <param name="slope">-0.0019931085</param>
+      <param name="intercept">2.63464</param>
+      <regression-coeff>0.99998856</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="11">
+    <fit model="linear">
+      <param name="slope">-0.0019954867</param>
+      <param name="intercept">2.654465</param>
+      <regression-coeff>0.9999928</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="12">
+    <fit model="linear">
+      <param name="slope">-0.0020016988</param>
+      <param name="intercept">2.6550264</param>
+      <regression-coeff>0.9999758</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="13">
+    <fit model="linear">
+      <param name="slope">-0.0019993496</param>
+      <param name="intercept">2.6551502</param>
+      <regression-coeff>0.9999933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="14">
+    <fit model="linear">
+      <param name="slope">-0.0019919334</param>
+      <param name="intercept">2.6403215</param>
+      <regression-coeff>0.9999928</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="15">
+    <fit model="linear">
+      <param name="slope">-0.001996373</param>
+      <param name="intercept">2.6590054</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="16">
+    <fit model="linear">
+      <param name="slope">-0.0020020257</param>
+      <param name="intercept">2.6666265</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="17">
+    <fit model="linear">
+      <param name="slope">-0.0020044153</param>
+      <param name="intercept">2.668537</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="18">
+    <fit model="linear">
+      <param name="slope">-0.0019948888</param>
+      <param name="intercept">2.6415226</param>
+      <regression-coeff>0.9999906</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="19">
+    <fit model="linear">
+      <param name="slope">-0.0020005433</param>
+      <param name="intercept">2.6565511</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="20">
+    <fit model="linear">
+      <param name="slope">-0.002000236</param>
+      <param name="intercept">2.649878</param>
+      <regression-coeff>0.99998945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="21">
+    <fit model="linear">
+      <param name="slope">-0.002001437</param>
+      <param name="intercept">2.6585584</param>
+      <regression-coeff>0.9999932</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="22">
+    <fit model="linear">
+      <param name="slope">-0.0019954883</param>
+      <param name="intercept">2.6606333</param>
+      <regression-coeff>0.9999937</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="23">
+    <fit model="linear">
+      <param name="slope">-0.0020008257</param>
+      <param name="intercept">2.6568496</param>
+      <regression-coeff>0.9999869</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="24">
+    <fit model="linear">
+      <param name="slope">-0.0020020267</param>
+      <param name="intercept">2.6566179</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="25">
+    <fit model="linear">
+      <param name="slope">-0.0019999358</param>
+      <param name="intercept">2.654847</param>
+      <regression-coeff>0.9999876</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="26">
+    <fit model="linear">
+      <param name="slope">-0.0020032213</param>
+      <param name="intercept">2.6514645</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="27">
+    <fit model="linear">
+      <param name="slope">-0.0020029247</param>
+      <param name="intercept">2.6617224</param>
+      <regression-coeff>0.999991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="28">
+    <fit model="linear">
+      <param name="slope">-0.0020032239</param>
+      <param name="intercept">2.6589332</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="29">
+    <fit model="linear">
+      <param name="slope">-0.0020032106</param>
+      <param name="intercept">2.653281</param>
+      <regression-coeff>0.99998444</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="30">
+    <fit model="linear">
+      <param name="slope">-0.001999348</param>
+      <param name="intercept">2.6431537</param>
+      <regression-coeff>0.99999166</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="31">
+    <fit model="linear">
+      <param name="slope">-0.0020032267</param>
+      <param name="intercept">2.6660366</param>
+      <regression-coeff>0.9999925</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="32">
+    <fit model="linear">
+      <param name="slope">-0.001995476</param>
+      <param name="intercept">2.6602662</param>
+      <regression-coeff>0.99998754</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="33">
+    <fit model="linear">
+      <param name="slope">-0.001998447</param>
+      <param name="intercept">2.636792</param>
+      <regression-coeff>0.99998796</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="34">
+    <fit model="linear">
+      <param name="slope">-0.0019996448</param>
+      <param name="intercept">2.6572719</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="35">
+    <fit model="linear">
+      <param name="slope">-0.0020089133</param>
+      <param name="intercept">2.665484</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="36">
+    <fit model="linear">
+      <param name="slope">-0.002000537</param>
+      <param name="intercept">2.6472733</param>
+      <regression-coeff>0.9999908</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="37">
+    <fit model="linear">
+      <param name="slope">-0.0020011389</param>
+      <param name="intercept">2.6462455</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="38">
+    <fit model="linear">
+      <param name="slope">-0.0019969628</param>
+      <param name="intercept">2.6467233</param>
+      <regression-coeff>0.99998933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="39">
+    <fit model="linear">
+      <param name="slope">-0.0020032213</param>
+      <param name="intercept">2.6634843</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="40">
+    <fit model="linear">
+      <param name="slope">-0.0020074104</param>
+      <param name="intercept">2.6447856</param>
+      <regression-coeff>0.9999874</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="41">
+    <fit model="linear">
+      <param name="slope">-0.0020032213</param>
+      <param name="intercept">2.6735005</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="42">
+    <fit model="linear">
+      <param name="slope">-0.0020035242</param>
+      <param name="intercept">2.656507</param>
+      <regression-coeff>0.9999918</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="43">
+    <fit model="linear">
+      <param name="slope">-0.0020059047</param>
+      <param name="intercept">2.6576693</param>
+      <regression-coeff>0.99998564</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="44">
+    <fit model="linear">
+      <param name="slope">-0.0019996448</param>
+      <param name="intercept">2.6372752</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="45">
+    <fit model="linear">
+      <param name="slope">-0.0019993416</param>
+      <param name="intercept">2.6569643</param>
+      <regression-coeff>0.9999885</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="46">
+    <fit model="linear">
+      <param name="slope">-0.0019975614</param>
+      <param name="intercept">2.659862</param>
+      <regression-coeff>0.99999046</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="47">
+    <fit model="linear">
+      <param name="slope">-0.0020047242</param>
+      <param name="intercept">2.6553607</param>
+      <regression-coeff>0.999993</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="48">
+    <fit model="linear">
+      <param name="slope">-0.0020047207</param>
+      <param name="intercept">2.6608262</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="49">
+    <fit model="linear">
+      <param name="slope">-0.0020017165</param>
+      <param name="intercept">2.645571</param>
+      <regression-coeff>0.99998456</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="50">
+    <fit model="linear">
+      <param name="slope">-0.0020023289</param>
+      <param name="intercept">2.646366</param>
+      <regression-coeff>0.9999921</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="51">
+    <fit model="linear">
+      <param name="slope">-0.0020041012</param>
+      <param name="intercept">2.6580203</param>
+      <regression-coeff>0.999981</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="52">
+    <fit model="linear">
+      <param name="slope">-0.0020008304</param>
+      <param name="intercept">2.6612177</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="53">
+    <fit model="linear">
+      <param name="slope">-0.0019972576</param>
+      <param name="intercept">2.6566484</param>
+      <regression-coeff>0.9999872</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="54">
+    <fit model="linear">
+      <param name="slope">-0.0020020257</param>
+      <param name="intercept">2.6466064</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="55">
+    <fit model="linear">
+      <param name="slope">-0.0019948808</param>
+      <param name="intercept">2.6366246</param>
+      <regression-coeff>0.9999857</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="56">
+    <fit model="linear">
+      <param name="slope">-0.002003223</param>
+      <param name="intercept">2.640903</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="57">
+    <fit model="linear">
+      <param name="slope">-0.0020020355</param>
+      <param name="intercept">2.6427884</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="58">
+    <fit model="linear">
+      <param name="slope">-0.0020032239</param>
+      <param name="intercept">2.6418145</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="59">
+    <fit model="linear">
+      <param name="slope">-0.0020053142</param>
+      <param name="intercept">2.6526854</param>
+      <regression-coeff>0.99998933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="60">
+    <fit model="linear">
+      <param name="slope">-0.0019975542</param>
+      <param name="intercept">2.6607656</param>
+      <regression-coeff>0.9999877</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="61">
+    <fit model="linear">
+      <param name="slope">-0.0020044143</param>
+      <param name="intercept">2.6464863</param>
+      <regression-coeff>0.99998784</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="62">
+    <fit model="linear">
+      <param name="slope">-0.0020008401</param>
+      <param name="intercept">2.641577</param>
+      <regression-coeff>0.9999932</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="63">
+    <fit model="linear">
+      <param name="slope">-0.002001132</param>
+      <param name="intercept">2.656067</param>
+      <regression-coeff>0.9999899</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="64">
+    <fit model="linear">
+      <param name="slope">-0.002003216</param>
+      <param name="intercept">2.6379855</param>
+      <regression-coeff>0.9999872</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="65">
+    <fit model="linear">
+      <param name="slope">-0.0020059173</param>
+      <param name="intercept">2.6574929</param>
+      <regression-coeff>0.999991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="66">
+    <fit model="linear">
+      <param name="slope">-0.0020080267</param>
+      <param name="intercept">2.661464</param>
+      <regression-coeff>0.99999684</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="67">
+    <fit model="linear">
+      <param name="slope">-0.002002632</param>
+      <param name="intercept">2.62792</param>
+      <regression-coeff>0.99999416</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="68">
+    <fit model="linear">
+      <param name="slope">-0.0020046956</param>
+      <param name="intercept">2.630928</param>
+      <regression-coeff>0.9999797</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="69">
+    <fit model="linear">
+      <param name="slope">-0.002000529</param>
+      <param name="intercept">2.630903</param>
+      <regression-coeff>0.9999869</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="70">
+    <fit model="linear">
+      <param name="slope">-0.0020026143</param>
+      <param name="intercept">2.6468468</param>
+      <regression-coeff>0.9999853</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="71">
+    <fit model="linear">
+      <param name="slope">-0.0019981554</param>
+      <param name="intercept">2.6384912</param>
+      <regression-coeff>0.9999908</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="72">
+    <fit model="linear">
+      <param name="slope">-0.0020035126</param>
+      <param name="intercept">2.6433873</param>
+      <regression-coeff>0.99998677</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="73">
+    <fit model="linear">
+      <param name="slope">-0.0020047207</param>
+      <param name="intercept">2.6688461</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="74">
+    <fit model="linear">
+      <param name="slope">-0.0020059163</param>
+      <param name="intercept">2.652022</param>
+      <regression-coeff>0.9999906</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="75">
+    <fit model="linear">
+      <param name="slope">-0.0020062174</param>
+      <param name="intercept">2.664183</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="76">
+    <fit model="linear">
+      <param name="slope">-0.0020020169</param>
+      <param name="intercept">2.6405966</param>
+      <regression-coeff>0.9999854</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="77">
+    <fit model="linear">
+      <param name="slope">-0.0020082868</param>
+      <param name="intercept">2.63017</param>
+      <regression-coeff>0.9999758</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="78">
+    <fit model="linear">
+      <param name="slope">-0.0020008313</param>
+      <param name="intercept">2.648666</param>
+      <regression-coeff>0.9999888</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="79">
+    <fit model="linear">
+      <param name="slope">-0.002005612</param>
+      <param name="intercept">2.663566</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="80">
+    <fit model="linear">
+      <param name="slope">-0.0020047207</param>
+      <param name="intercept">2.6579099</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="81">
+    <fit model="linear">
+      <param name="slope">-0.00200502</param>
+      <param name="intercept">2.6532948</param>
+      <regression-coeff>0.99999195</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="82">
+    <fit model="linear">
+      <param name="slope">-0.002007422</param>
+      <param name="intercept">2.648988</param>
+      <regression-coeff>0.9999941</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="83">
+    <fit model="linear">
+      <param name="slope">-0.0019999226</param>
+      <param name="intercept">2.634661</param>
+      <regression-coeff>0.999981</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="84">
+    <fit model="linear">
+      <param name="slope">-0.0020059156</param>
+      <param name="intercept">2.654027</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="85">
+    <fit model="linear">
+      <param name="slope">-0.0020074123</param>
+      <param name="intercept">2.6488006</param>
+      <regression-coeff>0.9999892</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="86">
+    <fit model="linear">
+      <param name="slope">-0.002006212</param>
+      <param name="intercept">2.643205</param>
+      <regression-coeff>0.99998933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="87">
+    <fit model="linear">
+      <param name="slope">-0.0020059156</param>
+      <param name="intercept">2.6419914</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="88">
+    <fit model="linear">
+      <param name="slope">-0.0020104137</param>
+      <param name="intercept">2.6653764</param>
+      <regression-coeff>0.9999869</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="89">
+    <fit model="linear">
+      <param name="slope">-0.0020059163</param>
+      <param name="intercept">2.6439981</param>
+      <regression-coeff>0.9999906</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="90">
+    <fit model="linear">
+      <param name="slope">-0.0020020267</param>
+      <param name="intercept">2.648609</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="91">
+    <fit model="linear">
+      <param name="slope">-0.002005903</param>
+      <param name="intercept">2.6452692</param>
+      <regression-coeff>0.999984</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="92">
+    <fit model="linear">
+      <param name="slope">-0.0020074123</param>
+      <param name="intercept">2.652815</param>
+      <regression-coeff>0.9999892</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="93">
+    <fit model="linear">
+      <param name="slope">-0.00200502</param>
+      <param name="intercept">2.6542077</param>
+      <regression-coeff>0.9999911</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="94">
+    <fit model="linear">
+      <param name="slope">-0.0020146351</param>
+      <param name="intercept">2.6555898</param>
+      <regression-coeff>0.99998635</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="95">
+    <fit model="linear">
+      <param name="slope">-0.002017367</param>
+      <param name="intercept">2.679632</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="96">
+    <fit model="linear">
+      <param name="slope">-0.0019987393</param>
+      <param name="intercept">2.6194668</param>
+      <regression-coeff>0.9999852</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="97">
+    <fit model="linear">
+      <param name="slope">-0.0020065203</param>
+      <param name="intercept">2.6522684</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="98">
+    <fit model="linear">
+      <param name="slope">-0.0020058958</param>
+      <param name="intercept">2.6408887</param>
+      <regression-coeff>0.99998045</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="99">
+    <fit model="linear">
+      <param name="slope">-0.0020047242</param>
+      <param name="intercept">2.6713986</param>
+      <regression-coeff>0.999993</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="100">
+    <fit model="linear">
+      <param name="slope">-0.0020125278</param>
+      <param name="intercept">2.6558251</param>
+      <regression-coeff>0.99998945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="101">
+    <fit model="linear">
+      <param name="slope">-0.0020017298</param>
+      <param name="intercept">2.6443024</param>
+      <regression-coeff>0.99999124</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="102">
+    <fit model="linear">
+      <param name="slope">-0.0020101012</param>
+      <param name="intercept">2.6632361</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="103">
+    <fit model="linear">
+      <param name="slope">-0.002002328</param>
+      <param name="intercept">2.6356268</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="104">
+    <fit model="linear">
+      <param name="slope">-0.0020062102</param>
+      <param name="intercept">2.6459413</param>
+      <regression-coeff>0.99998754</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="105">
+    <fit model="linear">
+      <param name="slope">-0.0020110193</param>
+      <param name="intercept">2.6327202</param>
+      <regression-coeff>0.9999884</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="106">
+    <fit model="linear">
+      <param name="slope">-0.0020005433</param>
+      <param name="intercept">2.644548</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="107">
+    <fit model="linear">
+      <param name="slope">-0.002002616</param>
+      <param name="intercept">2.649578</param>
+      <regression-coeff>0.9999862</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="108">
+    <fit model="linear">
+      <param name="slope">-0.0020055978</param>
+      <param name="intercept">2.6469676</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="109">
+    <fit model="linear">
+      <param name="slope">-0.0020086225</param>
+      <param name="intercept">2.657511</param>
+      <regression-coeff>0.99999416</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="110">
+    <fit model="linear">
+      <param name="slope">-0.0020005344</param>
+      <param name="intercept">2.637997</param>
+      <regression-coeff>0.9999895</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="111">
+    <fit model="linear">
+      <param name="slope">-0.0020014227</param>
+      <param name="intercept">2.6432686</param>
+      <regression-coeff>0.99998605</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="112">
+    <fit model="linear">
+      <param name="slope">-0.0020113133</param>
+      <param name="intercept">2.654962</param>
+      <regression-coeff>0.9999847</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="113">
+    <fit model="linear">
+      <param name="slope">-0.0020068074</param>
+      <param name="intercept">2.6487381</param>
+      <regression-coeff>0.9999862</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="114">
+    <fit model="linear">
+      <param name="slope">-0.002009199</param>
+      <param name="intercept">2.6482513</param>
+      <regression-coeff>0.99998087</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="115">
+    <fit model="linear">
+      <param name="slope">-0.0020074095</param>
+      <param name="intercept">2.6522682</param>
+      <regression-coeff>0.9999869</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="116">
+    <fit model="linear">
+      <param name="slope">-0.0020095163</param>
+      <param name="intercept">2.6312077</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="117">
+    <fit model="linear">
+      <param name="slope">-0.0020032169</param>
+      <param name="intercept">2.6399906</param>
+      <regression-coeff>0.9999876</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="118">
+    <fit model="linear">
+      <param name="slope">-0.0020061957</param>
+      <param name="intercept">2.66782</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="119">
+    <fit model="linear">
+      <param name="slope">-0.0020068127</param>
+      <param name="intercept">2.6502</param>
+      <regression-coeff>0.9999888</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="120">
+    <fit model="linear">
+      <param name="slope">-0.0020086206</param>
+      <param name="intercept">2.631399</param>
+      <regression-coeff>0.9999924</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="121">
+    <fit model="linear">
+      <param name="slope">-0.0020071114</param>
+      <param name="intercept">2.6426573</param>
+      <regression-coeff>0.9999889</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="122">
+    <fit model="linear">
+      <param name="slope">-0.0020050209</param>
+      <param name="intercept">2.6312406</param>
+      <regression-coeff>0.9999925</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="123">
+    <fit model="linear">
+      <param name="slope">-0.0020182792</param>
+      <param name="intercept">2.662402</param>
+      <regression-coeff>0.999991</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="124">
+    <fit model="linear">
+      <param name="slope">-0.0020062146</param>
+      <param name="intercept">2.6546974</param>
+      <regression-coeff>0.99998975</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="125">
+    <fit model="linear">
+      <param name="slope">-0.002008016</param>
+      <param name="intercept">2.651238</param>
+      <regression-coeff>0.9999906</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="126">
+    <fit model="linear">
+      <param name="slope">-0.002003829</param>
+      <param name="intercept">2.642788</param>
+      <regression-coeff>0.9999945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="1" bin="127">
+    <fit model="linear">
+      <param name="slope">-0.0019784304</param>
+      <param name="intercept">2.6263835</param>
+      <regression-coeff>0.9999914</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="0">
+    <fit model="linear">
+      <param name="slope">-0.0019633817</param>
+      <param name="intercept">2.6863751</param>
+      <regression-coeff>0.99998796</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="1">
+    <fit model="linear">
+      <param name="slope">-0.0019642273</param>
+      <param name="intercept">2.671566</param>
+      <regression-coeff>0.9999795</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="2">
+    <fit model="linear">
+      <param name="slope">-0.0019700152</param>
+      <param name="intercept">2.645029</param>
+      <regression-coeff>0.99999225</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="3">
+    <fit model="linear">
+      <param name="slope">-0.0019880969</param>
+      <param name="intercept">2.6763573</param>
+      <regression-coeff>0.99999124</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="4">
+    <fit model="linear">
+      <param name="slope">-0.0019871893</param>
+      <param name="intercept">2.6738029</param>
+      <regression-coeff>0.9999781</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="5">
+    <fit model="linear">
+      <param name="slope">-0.0019872016</param>
+      <param name="intercept">2.6624277</param>
+      <regression-coeff>0.9999843</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="6">
+    <fit model="linear">
+      <param name="slope">-0.0019831103</param>
+      <param name="intercept">2.644852</param>
+      <regression-coeff>0.999993</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="7">
+    <fit model="linear">
+      <param name="slope">-0.0019845457</param>
+      <param name="intercept">2.6605945</param>
+      <regression-coeff>0.99997896</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="8">
+    <fit model="linear">
+      <param name="slope">-0.0019895663</param>
+      <param name="intercept">2.6637783</param>
+      <regression-coeff>0.99998975</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="9">
+    <fit model="linear">
+      <param name="slope">-0.0019892857</param>
+      <param name="intercept">2.6511838</param>
+      <regression-coeff>0.9999962</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="10">
+    <fit model="linear">
+      <param name="slope">-0.001978703</param>
+      <param name="intercept">2.6371064</param>
+      <regression-coeff>0.9999817</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="11">
+    <fit model="linear">
+      <param name="slope">-0.0019842829</param>
+      <param name="intercept">2.6599433</param>
+      <regression-coeff>0.99999356</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="12">
+    <fit model="linear">
+      <param name="slope">-0.0019839965</param>
+      <param name="intercept">2.6563973</param>
+      <regression-coeff>0.999997</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="13">
+    <fit model="linear">
+      <param name="slope">-0.0019869127</param>
+      <param name="intercept">2.6581519</param>
+      <regression-coeff>0.999987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="14">
+    <fit model="linear">
+      <param name="slope">-0.0019772742</param>
+      <param name="intercept">2.642097</param>
+      <regression-coeff>0.9999955</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="15">
+    <fit model="linear">
+      <param name="slope">-0.0019860524</param>
+      <param name="intercept">2.6641133</param>
+      <regression-coeff>0.9999981</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="16">
+    <fit model="linear">
+      <param name="slope">-0.0019880733</param>
+      <param name="intercept">2.6685765</param>
+      <regression-coeff>0.99997854</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="17">
+    <fit model="linear">
+      <param name="slope">-0.0019916315</param>
+      <param name="intercept">2.6715236</param>
+      <regression-coeff>0.9999888</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="18">
+    <fit model="linear">
+      <param name="slope">-0.0019813501</param>
+      <param name="intercept">2.646109</param>
+      <regression-coeff>0.9999913</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="19">
+    <fit model="linear">
+      <param name="slope">-0.0019886682</param>
+      <param name="intercept">2.6579788</param>
+      <regression-coeff>0.9999821</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="20">
+    <fit model="linear">
+      <param name="slope">-0.001986313</param>
+      <param name="intercept">2.6521232</param>
+      <regression-coeff>0.9999813</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="21">
+    <fit model="linear">
+      <param name="slope">-0.0019895567</param>
+      <param name="intercept">2.6632314</param>
+      <regression-coeff>0.99998415</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="22">
+    <fit model="linear">
+      <param name="slope">-0.0019860533</param>
+      <param name="intercept">2.6659195</param>
+      <regression-coeff>0.9999985</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="23">
+    <fit model="linear">
+      <param name="slope">-0.0019863113</param>
+      <param name="intercept">2.6571784</param>
+      <regression-coeff>0.99998045</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="24">
+    <fit model="linear">
+      <param name="slope">-0.001990458</param>
+      <param name="intercept">2.6589036</param>
+      <regression-coeff>0.9999929</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="25">
+    <fit model="linear">
+      <param name="slope">-0.0019895758</param>
+      <param name="intercept">2.6596227</param>
+      <regression-coeff>0.9999946</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="26">
+    <fit model="linear">
+      <param name="slope">-0.0019892768</param>
+      <param name="intercept">2.652626</param>
+      <regression-coeff>0.9999918</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="27">
+    <fit model="linear">
+      <param name="slope">-0.00199193</param>
+      <param name="intercept">2.664587</param>
+      <regression-coeff>0.99999017</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="28">
+    <fit model="linear">
+      <param name="slope">-0.0019895618</param>
+      <param name="intercept">2.6610634</param>
+      <regression-coeff>0.99998754</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="29">
+    <fit model="linear">
+      <param name="slope">-0.001988083</param>
+      <param name="intercept">2.655386</param>
+      <regression-coeff>0.99998415</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="30">
+    <fit model="linear">
+      <param name="slope">-0.0019845762</param>
+      <param name="intercept">2.64437</param>
+      <regression-coeff>0.9999944</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="31">
+    <fit model="linear">
+      <param name="slope">-0.0019910487</param>
+      <param name="intercept">2.668924</param>
+      <regression-coeff>0.9999929</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="32">
+    <fit model="linear">
+      <param name="slope">-0.001982203</param>
+      <param name="intercept">2.6621382</param>
+      <regression-coeff>0.9999786</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="33">
+    <fit model="linear">
+      <param name="slope">-0.0019848524</param>
+      <param name="intercept">2.6392503</param>
+      <regression-coeff>0.9999847</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="34">
+    <fit model="linear">
+      <param name="slope">-0.0019878007</param>
+      <param name="intercept">2.6601486</param>
+      <regression-coeff>0.99999034</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="35">
+    <fit model="linear">
+      <param name="slope">-0.0019969346</param>
+      <param name="intercept">2.6683154</param>
+      <regression-coeff>0.9999743</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="36">
+    <fit model="linear">
+      <param name="slope">-0.0019874957</param>
+      <param name="intercept">2.6495419</param>
+      <regression-coeff>0.99998426</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="37">
+    <fit model="linear">
+      <param name="slope">-0.0019904335</param>
+      <param name="intercept">2.6485794</param>
+      <regression-coeff>0.9999806</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="38">
+    <fit model="linear">
+      <param name="slope">-0.0019831043</param>
+      <param name="intercept">2.6486342</param>
+      <regression-coeff>0.9999908</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="39">
+    <fit model="linear">
+      <param name="slope">-0.0019875027</param>
+      <param name="intercept">2.6645403</param>
+      <regression-coeff>0.99998856</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="40">
+    <fit model="linear">
+      <param name="slope">-0.0019954513</param>
+      <param name="intercept">2.6475558</param>
+      <regression-coeff>0.99997514</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="41">
+    <fit model="linear">
+      <param name="slope">-0.0019916429</param>
+      <param name="intercept">2.6751494</param>
+      <regression-coeff>0.9999945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="42">
+    <fit model="linear">
+      <param name="slope">-0.0019898734</param>
+      <param name="intercept">2.6590228</param>
+      <regression-coeff>0.99999493</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="43">
+    <fit model="linear">
+      <param name="slope">-0.0019928233</param>
+      <param name="intercept">2.6600688</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="44">
+    <fit model="linear">
+      <param name="slope">-0.0019872207</param>
+      <param name="intercept">2.6405764</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="45">
+    <fit model="linear">
+      <param name="slope">-0.0019860421</param>
+      <param name="intercept">2.6581497</param>
+      <regression-coeff>0.9999929</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="46">
+    <fit model="linear">
+      <param name="slope">-0.0019839923</param>
+      <param name="intercept">2.662167</param>
+      <regression-coeff>0.99999505</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="47">
+    <fit model="linear">
+      <param name="slope">-0.0019931183</param>
+      <param name="intercept">2.6565685</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="48">
+    <fit model="linear">
+      <param name="slope">-0.001992228</param>
+      <param name="intercept">2.6638052</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="49">
+    <fit model="linear">
+      <param name="slope">-0.0019883951</param>
+      <param name="intercept">2.6486475</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="50">
+    <fit model="linear">
+      <param name="slope">-0.001989868</param>
+      <param name="intercept">2.6481667</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="51">
+    <fit model="linear">
+      <param name="slope">-0.001989869</param>
+      <param name="intercept">2.6588404</param>
+      <regression-coeff>0.9999927</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="52">
+    <fit model="linear">
+      <param name="slope">-0.0019875166</param>
+      <param name="intercept">2.6634626</param>
+      <regression-coeff>0.9999955</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="53">
+    <fit model="linear">
+      <param name="slope">-0.0019863374</param>
+      <param name="intercept">2.6597185</param>
+      <regression-coeff>0.99999356</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="54">
+    <fit model="linear">
+      <param name="slope">-0.0019881038</param>
+      <param name="intercept">2.6476228</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="55">
+    <fit model="linear">
+      <param name="slope">-0.0019813552</param>
+      <param name="intercept">2.637827</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="56">
+    <fit model="linear">
+      <param name="slope">-0.0019875115</param>
+      <param name="intercept">2.642501</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="57">
+    <fit model="linear">
+      <param name="slope">-0.001988389</param>
+      <param name="intercept">2.6444871</param>
+      <regression-coeff>0.9999891</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="58">
+    <fit model="linear">
+      <param name="slope">-0.0019898734</param>
+      <param name="intercept">2.6431034</param>
+      <regression-coeff>0.99999493</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="59">
+    <fit model="linear">
+      <param name="slope">-0.0019919327</param>
+      <param name="intercept">2.6542659</param>
+      <regression-coeff>0.99999154</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="60">
+    <fit model="linear">
+      <param name="slope">-0.001986332</param>
+      <param name="intercept">2.6640494</param>
+      <regression-coeff>0.9999908</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="61">
+    <fit model="linear">
+      <param name="slope">-0.0019916445</param>
+      <param name="intercept">2.647266</param>
+      <regression-coeff>0.9999962</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="62">
+    <fit model="linear">
+      <param name="slope">-0.001989868</param>
+      <param name="intercept">2.644187</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="63">
+    <fit model="linear">
+      <param name="slope">-0.0019875115</param>
+      <param name="intercept">2.6584005</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="64">
+    <fit model="linear">
+      <param name="slope">-0.0019895697</param>
+      <param name="intercept">2.6384583</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="65">
+    <fit model="linear">
+      <param name="slope">-0.0019934168</param>
+      <param name="intercept">2.6590476</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="66">
+    <fit model="linear">
+      <param name="slope">-0.0019954883</param>
+      <param name="intercept">2.6637173</param>
+      <regression-coeff>0.9999937</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="67">
+    <fit model="linear">
+      <param name="slope">-0.001990149</param>
+      <param name="intercept">2.6300087</param>
+      <regression-coeff>0.99998605</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="68">
+    <fit model="linear">
+      <param name="slope">-0.001990162</param>
+      <param name="intercept">2.6310995</param>
+      <regression-coeff>0.9999926</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="69">
+    <fit model="linear">
+      <param name="slope">-0.001989868</param>
+      <param name="intercept">2.6342375</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="70">
+    <fit model="linear">
+      <param name="slope">-0.0019877953</param>
+      <param name="intercept">2.6484008</param>
+      <regression-coeff>0.99998677</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="71">
+    <fit model="linear">
+      <param name="slope">-0.0019872207</param>
+      <param name="intercept">2.6405764</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="72">
+    <fit model="linear">
+      <param name="slope">-0.0019904615</param>
+      <param name="intercept">2.6451545</param>
+      <regression-coeff>0.99999386</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="73">
+    <fit model="linear">
+      <param name="slope">-0.0019910296</param>
+      <param name="intercept">2.6689157</param>
+      <regression-coeff>0.9999834</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="74">
+    <fit model="linear">
+      <param name="slope">-0.0019910426</param>
+      <param name="intercept">2.6535366</param>
+      <regression-coeff>0.99998987</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="75">
+    <fit model="linear">
+      <param name="slope">-0.0019916384</param>
+      <param name="intercept">2.6642838</param>
+      <regression-coeff>0.99999225</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="76">
+    <fit model="linear">
+      <param name="slope">-0.0019889441</param>
+      <param name="intercept">2.641459</param>
+      <regression-coeff>0.9999727</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="77">
+    <fit model="linear">
+      <param name="slope">-0.0019933905</param>
+      <param name="intercept">2.6304042</param>
+      <regression-coeff>0.99998146</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="78">
+    <fit model="linear">
+      <param name="slope">-0.00198869</param>
+      <param name="intercept">2.6502132</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="79">
+    <fit model="linear">
+      <param name="slope">-0.001988988</param>
+      <param name="intercept">2.6620903</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="80">
+    <fit model="linear">
+      <param name="slope">-0.0019966755</param>
+      <param name="intercept">2.6604002</param>
+      <regression-coeff>0.9999933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="81">
+    <fit model="linear">
+      <param name="slope">-0.0019913383</param>
+      <param name="intercept">2.654925</param>
+      <regression-coeff>0.9999899</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="82">
+    <fit model="linear">
+      <param name="slope">-0.0019937</param>
+      <param name="intercept">2.6495593</param>
+      <regression-coeff>0.99998814</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="83">
+    <fit model="linear">
+      <param name="slope">-0.0019857564</param>
+      <param name="intercept">2.635827</param>
+      <regression-coeff>0.999997</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="84">
+    <fit model="linear">
+      <param name="slope">-0.0019916429</param>
+      <param name="intercept">2.6552327</param>
+      <regression-coeff>0.9999945</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="85">
+    <fit model="linear">
+      <param name="slope">-0.001997563</param>
+      <param name="intercept">2.6518712</param>
+      <regression-coeff>0.9999922</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="86">
+    <fit model="linear">
+      <param name="slope">-0.0019925304</param>
+      <param name="intercept">2.6440065</param>
+      <regression-coeff>0.99999547</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="87">
+    <fit model="linear">
+      <param name="slope">-0.0019940138</param>
+      <param name="intercept">2.6438875</param>
+      <regression-coeff>0.99999696</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="88">
+    <fit model="linear">
+      <param name="slope">-0.0019969505</param>
+      <param name="intercept">2.667959</param>
+      <regression-coeff>0.99998224</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="89">
+    <fit model="linear">
+      <param name="slope">-0.0019910522</param>
+      <param name="intercept">2.643223</param>
+      <regression-coeff>0.9999947</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="90">
+    <fit model="linear">
+      <param name="slope">-0.0019886917</param>
+      <param name="intercept">2.6494918</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="91">
+    <fit model="linear">
+      <param name="slope">-0.0019939865</param>
+      <param name="intercept">2.6465945</param>
+      <regression-coeff>0.9999833</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="92">
+    <fit model="linear">
+      <param name="slope">-0.0019951921</param>
+      <param name="intercept">2.6537993</param>
+      <regression-coeff>0.999994</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="93">
+    <fit model="linear">
+      <param name="slope">-0.0019922236</param>
+      <param name="intercept">2.6540232</param>
+      <regression-coeff>0.9999899</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="94">
+    <fit model="linear">
+      <param name="slope">-0.002005298</param>
+      <param name="intercept">2.6576018</param>
+      <regression-coeff>0.99998116</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="95">
+    <fit model="linear">
+      <param name="slope">-0.002001429</param>
+      <param name="intercept">2.6802056</param>
+      <regression-coeff>0.9999892</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="96">
+    <fit model="linear">
+      <param name="slope">-0.0019842517</param>
+      <param name="intercept">2.6186225</param>
+      <regression-coeff>0.99997777</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="97">
+    <fit model="linear">
+      <param name="slope">-0.0019936655</param>
+      <param name="intercept">2.653894</param>
+      <regression-coeff>0.9999716</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="98">
+    <fit model="linear">
+      <param name="slope">-0.001990169</param>
+      <param name="intercept">2.6405113</param>
+      <regression-coeff>0.99999523</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="99">
+    <fit model="linear">
+      <param name="slope">-0.0019901393</param>
+      <param name="intercept">2.672159</param>
+      <regression-coeff>0.99998116</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="100">
+    <fit model="linear">
+      <param name="slope">-0.0019975756</param>
+      <param name="intercept">2.654599</param>
+      <regression-coeff>0.9999984</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="101">
+    <fit model="linear">
+      <param name="slope">-0.0019869215</param>
+      <param name="intercept">2.6444283</param>
+      <regression-coeff>0.9999914</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="102">
+    <fit model="linear">
+      <param name="slope">-0.0019981482</param>
+      <param name="intercept">2.6657348</param>
+      <regression-coeff>0.9999872</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="103">
+    <fit model="linear">
+      <param name="slope">-0.0019898645</param>
+      <param name="intercept">2.6358643</param>
+      <regression-coeff>0.99999046</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="104">
+    <fit model="linear">
+      <param name="slope">-0.0019922254</param>
+      <param name="intercept">2.6458747</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="105">
+    <fit model="linear">
+      <param name="slope">-0.001998426</param>
+      <param name="intercept">2.6349673</param>
+      <regression-coeff>0.99997723</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="106">
+    <fit model="linear">
+      <param name="slope">-0.0019931227</param>
+      <param name="intercept">2.647691</param>
+      <regression-coeff>0.9999948</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="107">
+    <fit model="linear">
+      <param name="slope">-0.001989868</param>
+      <param name="intercept">2.6481667</param>
+      <regression-coeff>0.99999315</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="108">
+    <fit model="linear">
+      <param name="slope">-0.0019945928</param>
+      <param name="intercept">2.6477494</param>
+      <regression-coeff>0.9999909</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="109">
+    <fit model="linear">
+      <param name="slope">-0.0019966702</param>
+      <param name="intercept">2.6593096</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="110">
+    <fit model="linear">
+      <param name="slope">-0.0019910391</param>
+      <param name="intercept">2.639054</param>
+      <regression-coeff>0.99998814</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="111">
+    <fit model="linear">
+      <param name="slope">-0.0019863225</param>
+      <param name="intercept">2.6425579</param>
+      <regression-coeff>0.99998605</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="112">
+    <fit model="linear">
+      <param name="slope">-0.0019966755</param>
+      <param name="intercept">2.6547742</param>
+      <regression-coeff>0.9999933</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="113">
+    <fit model="linear">
+      <param name="slope">-0.0019980979</param>
+      <param name="intercept">2.6513646</param>
+      <regression-coeff>0.99996203</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="114">
+    <fit model="linear">
+      <param name="slope">-0.001994571</param>
+      <param name="intercept">2.6470156</param>
+      <regression-coeff>0.9999791</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="115">
+    <fit model="linear">
+      <param name="slope">-0.0019963705</param>
+      <param name="intercept">2.6537387</param>
+      <regression-coeff>0.9999903</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="116">
+    <fit model="linear">
+      <param name="slope">-0.0019987596</param>
+      <param name="intercept">2.632738</param>
+      <regression-coeff>0.9999962</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="117">
+    <fit model="linear">
+      <param name="slope">-0.0019901576</param>
+      <param name="intercept">2.6408677</param>
+      <regression-coeff>0.99999034</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="118">
+    <fit model="linear">
+      <param name="slope">-0.0019951789</param>
+      <param name="intercept">2.6672165</param>
+      <regression-coeff>0.99998647</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="119">
+    <fit model="linear">
+      <param name="slope">-0.0019919344</param>
+      <param name="intercept">2.6491957</param>
+      <regression-coeff>0.9999932</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="120">
+    <fit model="linear">
+      <param name="slope">-0.0019972683</param>
+      <param name="intercept">2.6330483</param>
+      <regression-coeff>0.99999344</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="121">
+    <fit model="linear">
+      <param name="slope">-0.0019972718</param>
+      <param name="intercept">2.6423104</param>
+      <regression-coeff>0.9999943</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="122">
+    <fit model="linear">
+      <param name="slope">-0.0019928173</param>
+      <param name="intercept">2.6299937</param>
+      <regression-coeff>0.99999005</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="123">
+    <fit model="linear">
+      <param name="slope">-0.0020047268</param>
+      <param name="intercept">2.6613758</param>
+      <regression-coeff>0.99999523</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="124">
+    <fit model="linear">
+      <param name="slope">-0.001993705</param>
+      <param name="intercept">2.6560867</param>
+      <regression-coeff>0.9999907</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="125">
+    <fit model="linear">
+      <param name="slope">-0.0019933959</param>
+      <param name="intercept">2.6505213</param>
+      <regression-coeff>0.99998415</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="126">
+    <fit model="linear">
+      <param name="slope">-0.0019916375</param>
+      <param name="intercept">2.6425567</param>
+      <regression-coeff>0.99999183</regression-coeff>
+    </fit>
+  </atwd>
+  <atwd id="1" channel="2" bin="127">
+    <fit model="linear">
+      <param name="slope">-0.0019702925</param>
+      <param name="intercept">2.62562</param>
+      <regression-coeff>0.99998623</regression-coeff>
+    </fit>
+  </atwd>
+  <fadc parname="pedestal" value="6208"/>
+  <fadc parname="gain" value="2176"/>
+  <amplifier channel="0">
+    <gain error="0.0081545245">-16.683222</gain>
+  </amplifier>
+  <amplifier channel="1">
+    <gain error="0.0013284996">-2.308496</gain>
+  </amplifier>
+  <amplifier channel="2">
+    <gain error="3.021913E-4">-0.129257</gain>
+  </amplifier>
+  <atwdfreq chip="0">
+    <fit model="linear">
+      <param name="slope">0.011939764</param>
+      <param name="intercept">4.0535746</param>
+      <regression-coeff>0.9979043</regression-coeff>
+    </fit>
+  </atwdfreq>
+  <atwdfreq chip="1">
+    <fit model="linear">
+      <param name="slope">0.011952878</param>
+      <param name="intercept">3.872122</param>
+      <regression-coeff>0.99882513</regression-coeff>
+    </fit>
+  </atwdfreq>
+</domcal>
Index: dom-cal/src/icecube/daq/domcal/Baseline.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/Baseline.java:1.1
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/src/icecube/daq/domcal/Baseline.java	Tue Mar 29 13:13:27 2005
@@ -0,0 +1,55 @@
+/*************************************************  120 columns wide   ************************************************
+
+ Class:  	Baseline
+
+ @author 	Jim Braun
+ @author     jbraun@amanda.wisc.edu
+
+ ICECUBE Project
+ University of Wisconsin - Madison
+
+ **********************************************************************************************************************/
+
+package icecube.daq.domcal;
+
+import java.nio.ByteBuffer;
+
+public class Baseline {
+
+    private short voltage;
+    private float[][] baseVals;
+
+    public static Baseline parseHvBaseline(ByteBuffer bb) {
+        short voltage = bb.getShort();
+        float[][] baseVals = parse(bb);
+        return new Baseline(voltage, baseVals);
+    }
+
+    public static Baseline parseBaseline(ByteBuffer bb) {
+        short voltage = 0;
+        float[][] baseVals = parse(bb);
+        return new Baseline(voltage, baseVals);
+    }
+
+    private static float[][] parse(ByteBuffer bb) {
+        float[][] vals = new float[2][3];
+        for (int i = 0; i < 2; i++) {
+            for (int j = 0; j < 3; j++) vals[i][j] = bb.getFloat();
+        }
+        return vals;
+    }
+
+    public Baseline(short voltage, float[][] baseVals) {
+        this.voltage = voltage;
+        this.baseVals = baseVals;
+    }
+
+    public short getVoltage() {
+        return voltage;
+    }
+
+    public float getBaseline(int atwd, int ch) {
+        if (atwd > 1 || atwd < 0 || ch < 0 || ch > 2) throw new IndexOutOfBoundsException("" + atwd + " " + ch);
+        return baseVals[atwd][ch];
+    } 
+}
Index: dom-cal/src/icecube/daq/domcal/Calibrator.java
diff -u dom-cal/src/icecube/daq/domcal/Calibrator.java:1.9 dom-cal/src/icecube/daq/domcal/Calibrator.java:1.19
--- dom-cal/src/icecube/daq/domcal/Calibrator.java:1.9	Tue Oct 12 07:38:53 2004
+++ dom-cal/src/icecube/daq/domcal/Calibrator.java	Tue May  3 15:10:48 2005
@@ -1,23 +1,32 @@
 package icecube.daq.domcal;
 
-import org.apache.log4j.Logger;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.NodeList;
-import org.xml.sax.SAXException;
+import icecube.daq.db.domprodtest.DOMProduct;
+import icecube.daq.db.domprodtest.DOMProdTestException;
 
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
 import java.io.IOException;
 import java.io.InputStream;
+
 import java.net.URL;
+
+import java.sql.SQLException;
+
 import java.text.ParseException;
+import java.text.DateFormat;
 import java.text.SimpleDateFormat;
-import java.util.Calendar;
-import java.util.Hashtable;
-import java.util.StringTokenizer;
-import java.util.NoSuchElementException;
+
+import java.util.*;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+
+import org.apache.log4j.Logger;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.NodeList;
+
+import org.xml.sax.SAXException;
 
 /**
  * DOM calibration class.  This class makes the XML calibration files produced
@@ -30,7 +39,7 @@
  * can be done either from a local file or from a URI:
  * <pre>
  * ...
- * Calibrator cal = new Calibrator("http://the.domcal.net/kool.xdc")
+ * Calibrator cal = new Calibrator(new URL("http://the.domcal.net/kool.xdc"))
  * ...
  * </pre>
  * then you can use the various methods to access the calibration info.
@@ -51,30 +60,58 @@
  *     w[i] = (v[128-i]-frontend_bias)/cal.getAmplifierGain(0);
  * }
  * </pre>
- * @author kael hanson (kaeld@icecube.wisc.edu)
+ * @author kael d hanson (kaeld@icecube.wisc.edu)
  *
  */
-public class Calibrator {
+public class Calibrator
+{
 
-    static Logger logger = Logger.getLogger("icecube.domcal.Calibrator");
-    private Document    doc;
-    private String      domID;
-    private double      temp;
-    private int         dacs[];
-    private int         adcs[];
-    private Hashtable   atwdFits[][];
-    private Hashtable   pulserFit;
-    private double      ampGain[];
-    private double      ampGainErr[];
-    private Calendar    calendar;
-    private Hashtable   freqFits[];
-    private Hashtable   hvFit;
+    /** Log message handler. */
+    private static Logger logger =
+        Logger.getLogger(Calibrator.class.getName());
+
+    /** DOM being calibrated. */
+    private String domID;
+    /** date calibration was run. */
+    private Calendar calendar;
+    /** calibration temperature. */
+    private double temp;
+    /** DAC channel data. */
+    private int[] dacs;
+    /** ADC channel data. */
+    private int[] adcs;
+    /** ATWD fit data. */
+    private HashMap[][] atwdFits;
+    /** pulser fit data. */
+    private HashMap pulserFit;
+    /** amplifier gain data. */
+    private double[] ampGain;
+    /** amplifier gain error data. */
+    private double[] ampGainErr;
+    /** ATWD frequency fit data. */
+    private HashMap[] freqFits;
+    /** gain vs. HV fit data. */
+    private HashMap gainFit;
+    /** transit time fit data. */
+    private HashMap transitFit;
+    /** HV histogram data. */
+    private HashMap histoMap;
+    /** Baselines at various HV settings */
+    private HashMap baselines;
+
+    /** calibration database interface. */
+    private CalibratorDB calDB;
+
+    /** DOMCalibration database ID. */
+    private int domcalId;
+    /** DOM product information. */
+    private DOMProduct domProd ;
 
     /**
      * Constructor to obtain from URL location.
      * @param calfile URL reference to the XML file.
-     * @throws IOException
-     * @throws DOMCalibrationException
+     * @throws IOException if there is a problem reading the stream
+     * @throws DOMCalibrationException if there is a formatting error
      */
     public Calibrator(URL calfile) throws
             IOException,
@@ -89,348 +126,324 @@
      * The XML stream is read into a DOM tree over this object.
      * @param is an initialized, open InputStream object pointing
      * to the XML file.
-     * @throws IOException
-     * @throws DOMCalibrationException
+     * @throws IOException if there is a problem reading the stream
+     * @throws DOMCalibrationException if there is a formatting error
      */
-    public Calibrator(InputStream is) throws
+    public Calibrator(InputStream is, CalibratorDB calDB) throws
             IOException,
             DOMCalibrationException {
+        this(is);
 
-        dacs        = new int[16];
-        adcs        = new int[24];
-        atwdFits    = new Hashtable[8][128];;
-        ampGain     = new double[3];
-        ampGainErr  = new double[3];
-        freqFits    = new Hashtable[2];
-
-        /* Make a DOM tree from input stream */
-        DocumentBuilderFactory f = DocumentBuilderFactory.newInstance();
-        try {
-            DocumentBuilder parser = f.newDocumentBuilder();
-            doc = parser.parse(is);
-            fromDocTree();
-        } catch (SAXException se) {
-            logger.error(se);
-        } catch (ParserConfigurationException pe) {
-            logger.error(pe);
-        }
-
+        this.calDB = calDB;
     }
 
     /**
-     * Internal method to drive the conversion from DOM tree to
-     * class ata members.
-     * @throws DOMCalibrationException
+     * Constructor from initialized InputStream object.
+     * The XML stream is read into a DOM tree over this object.
+     * @param is an initialized, open InputStream object pointing
+     * to the XML file.
+     * @throws IOException if there is a problem reading the stream
+     * @throws DOMCalibrationException if there is a formatting error
      */
-    private void fromDocTree() throws DOMCalibrationException {
-
-        NodeList    nodes;
-        Element     dc, e;
-
-        // Get the <DEFANGED_domcal> tag
-        nodes = doc.getElementsByTagName("domcal");
-        if (nodes.getLength() != 1) {
-            throw new DOMCalibrationException("XML format error");
-        }
-        dc      = (Element) nodes.item(0);
-        logger.debug("Found node " + dc.getNodeName());
-        // Get the DOM Id
-        e       = (Element) dc.getElementsByTagName("domid").item(0);
-        domID   = e.getFirstChild().getNodeValue();
-        e       = (Element) dc.getElementsByTagName("temperature").item(0);
-        temp    = Double.parseDouble(e.getFirstChild().getNodeValue());
-        if (e.getAttribute("format").equals("raw")) {
-            if (temp > 32768) temp -= 65536;
-            temp /= 256.0;
-        } else if (e.getAttribute("format").equals("Kelvin")) {
-            temp -= 273;
-        }
-        e       = (Element) dc.getElementsByTagName("date").item(0);
+    public Calibrator(InputStream is) throws
+            IOException,
+            DOMCalibrationException {
 
-        /*
+        this();
 
-        try {
-            calendar = Calendar.getInstance();
-            SimpleDateFormat df = new SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy");
-            calendar.setTime(df.parse(e.getFirstChild().getNodeValue()));
-        } catch (ParseException pe) {
-            throw new DOMCalibrationException(pe.getMessage());
-        }
-
-        */
-
-        calendar = Calendar.getInstance();
-        calendar.clear();
-        try {
-            StringTokenizer st = new StringTokenizer(
-                    e.getFirstChild().getNodeValue(), "-" );
-            calendar.set( Calendar.MONTH,
-                              Integer.parseInt( st.nextToken() ) - 1 );
-            calendar.set( Calendar.DAY_OF_MONTH,
-                                  Integer.parseInt( st.nextToken() ) );
-            calendar.set( Calendar.YEAR, Integer.parseInt( st.nextToken() ) );
-        } catch ( NoSuchElementException ex ) {
-            throw new DOMCalibrationException( ex.getMessage() );
-        }
-
-        parseAdcDacTags(dc.getElementsByTagName("dac"), dacs);
-        parseAdcDacTags(dc.getElementsByTagName("adc"), adcs);
-        nodes = dc.getElementsByTagName("pulser");
-        switch (nodes.getLength()) {
-            case 0:
-                break;
-            case 1:
-                parsePulserFit((Element) nodes.item(0));
-                break;
-            default:
-                throw new DOMCalibrationException("XML format error - more than one <DEFANGED_pulser> record");
-        }
-        parseATWDFits(dc.getElementsByTagName("atwd"));
-        parseAmplifierGain(dc.getElementsByTagName("amplifier"));
-        parseFreqFits(dc.getElementsByTagName("atwdfreq"));
-        nodes = dc.getElementsByTagName("hvGainCal");
-        switch( nodes.getLength() ) {
-             case 0:
-                break;
-            case 1:
-                parseHvGainFit((Element) nodes.item(0));
-                break;
-            default:
-                throw new DOMCalibrationException("XML format error - more than one <DEFANGED_hvGainCal> record");
-        }
+        new Parser(is);
     }
 
     /**
-     * Private function to handle the fit tags.
-     * @param el The supporting <CODE><DEFANGED_fit></CODE> Element
+     * Load calibration data from the database.
+     *
+     * @param mbSerial mainboard serial number of DOM being loaded
+     * @param date date of data being loaded
+     * @param temp temperature of data being loaded
+     *
+     * @throws DOMCalibrationException if an argument is invalid
+     * @throws IOException if there is a problem reading the stream
+     * @throws SQLException if there is a database problem
      */
-    private static Hashtable parseFit(Element el) {
-        Hashtable h = new Hashtable(5);
-        h.put("model", el.getAttribute("model"));
-        NodeList nodes = el.getElementsByTagName("param");
-        for (int i = 0; i < nodes.getLength(); i++) {
-            Element param = (Element) nodes.item(i);
-            h.put(
-                    param.getAttribute("name"),
-                    Double.valueOf(param.getFirstChild().getNodeValue())
-            );
-        }
-        Element r = (Element) el.getElementsByTagName("regression-coeff").item(0);
-        h.put("r", Double.valueOf(r.getFirstChild().getNodeValue()));
-        return h;
+    public Calibrator(String mbSerial, Date date, double temp)
+        throws DOMCalibrationException, IOException, SQLException
+    {
+        this(mbSerial, date, temp, null);
     }
 
     /**
-     * Internal function to drive the parsing of <code><DEFANGED_atwd></code> tags.
-     * @param atwdNodes
-     */
-    private void parseATWDFits(NodeList atwdNodes) {
-        for (int i = 0; i < atwdNodes.getLength(); i++) {
-            Element atwd = (Element) atwdNodes.item(i);
-            String atwdStr = atwd.getAttribute("id");
-            int ch = Integer.parseInt(atwd.getAttribute("channel"));
-            if ( atwdStr != null ) {
-                ch += 4*( Integer.parseInt( atwdStr ) );
+     * Load calibration data from the database.
+     *
+     * @param mbSerial mainboard serial number of DOM being loaded
+     * @param date date of data being loaded
+     * @param temp temperature of data being loaded
+     *
+     * @throws DOMCalibrationException if an argument is invalid
+     * @throws IOException if there is a problem reading the stream
+     * @throws SQLException if there is a database problem
+     */
+    public Calibrator(String mbSerial, Date date, double temp,
+                      CalibratorDB calDB)
+        throws DOMCalibrationException, IOException, SQLException
+    {
+        this();
+
+        if (calDB != null) {
+            this.calDB = calDB;
+        } else {
+            try {
+                this.calDB = new CalibratorDB();
+            } catch (DOMProdTestException dpte) {
+                throw new DOMCalibrationException(dpte.getMessage());
             }
-            int bin = Integer.parseInt(atwd.getAttribute("bin"));
-            atwdFits[ch][bin] = parseFit((Element) atwd.getElementsByTagName("fit").item(0));
         }
+
+        this.calDB.load(this, mbSerial, date, temp);
     }
 
     /**
-     * Parse the <code><DEFANGED_pulser></code> tag
-     * @param pulser
+     * Default constructor which sets up data arrays.
      */
-    private void parsePulserFit(Element pulser) {
-        pulserFit = parseFit((Element) pulser.getElementsByTagName("fit").item(0));
+    Calibrator()
+    {
+        dacs        = new int[16];
+        adcs        = new int[24];
+        atwdFits    = new HashMap[8][128];
+        ampGain     = new double[3];
+        ampGainErr  = new double[3];
+        freqFits    = new HashMap[2];
     }
 
     /**
-     * Parse the HV gain fit
-     * @param hv document node containing the fit.
+     * Calibrate raw ATWD counts passed in array atwdin to calibrated volts.
+     * Note this function assumes the ATWD input array is in raw order
+     * and returns an array with same ordering (time decreasing with increasing
+     * array index).
+     * @param atwdin input array of shorts
+     * @param ch specifies ATWD channel 0-3 ATWD-A, 4-7 ATWD-B
+     * @param offset specifies starting offset in ATWD to atwdin[0].
+     *               For example, if offset is 40 then atwdin[0] really holds
+     *               the 40th bin of the ATWD.
+     * @return ATWD array in V
      */
+    public double[] atwdCalibrate(short[] atwdin, int ch, int offset) {
+        if (ch == 3 || ch == 7) {
+            final String errMsg =
+                "Calibration of channels 3 and 7 not allowed!";
+            throw new IllegalArgumentException(errMsg);
+        }
+        double[] out = new double[atwdin.length];
+        for (int i = 0; i < atwdin.length; i++) {
+            int bin = i + offset;
+            if (atwdFits[ch][bin].get("model").equals("linear")) {
+                Double dbl;
 
-    private void parseHvGainFit(Element hv) {
-        hvFit = parseFit((Element) hv.getElementsByTagName("fit").item(0));
-    }
+                dbl = (Double)atwdFits[ch][bin].get("slope");
+                double m = dbl.doubleValue();
 
-    /**
-     * Parse the ATWD frequency fit
-     * @param freqNodes document node containing the fit.
-     */
-    private void parseFreqFits(NodeList freqNodes) {
-        for (int i = 0; i < freqNodes.getLength(); i++) {
-            Element freq = (Element) freqNodes.item(i);
-            int chip = Integer.parseInt(freq.getAttribute("chip"));
-            freqFits[chip] = parseFit((Element) freq.getElementsByTagName("fit").item(0));
+                dbl = (Double)atwdFits[ch][bin].get("intercept");
+                double b = dbl.doubleValue();
+
+                out[i] = m*atwdin[i] + b;
+            }
         }
+        return out;
     }
 
     /**
-     * Parse the DAC and ADC tags.
-     * @param nodes A NodeList with the DAC/ADC tags
-     * @param arr   The output array
+     * Reconstruct PMT signal given an ATWD array and a bias DAC setting.
+     * Note this function assumes the ATWD input array is in raw order
+     * and returns an array with same ordering (time decreasing with increasing
+     * array index).
+     * @param atwdin input array of shorts
+     * @param ch specifies ATWD channel 0-3 ATWD-A, 4-7 ATWD-B
+     * @param offset specifies starting offset in ATWD to atwdin[0].
+     *               For example, if offset is 40 then atwdin[0] really holds
+     *               the 40th bin of the ATWD.
+     * @param biasDAC DAC bias
+     * @return ATWD array in V
+     * @throws DOMCalibrationException if there is a problem with the data
      */
-    private static void parseAdcDacTags(NodeList nodes, int[] arr) {
-        for (int idac = 0; idac < nodes.getLength(); idac++) {
-            Element dacNode = (Element) nodes.item(idac);
-            int ch = Integer.parseInt(dacNode.getAttribute("channel"));
-            arr[ch] = Integer.parseInt(dacNode.getFirstChild().getNodeValue());
-        }
+
+    public double[] atwdCalibrateToPmtSig(short[] atwdin, int ch, int offset,
+                                          int biasDAC) throws DOMCalibrationException {
+
+        /* if no voltage supplied, assume 10^7 voltage when calculating baseline */
+        int hv = (int)calcVoltageFromGain(1e7);
+        return atwdCalibrateToPmtSig(atwdin, ch, offset, biasDAC, hv);
+
     }
 
     /**
-     * Get FE amplifier gains from <code><DEFANGED_amplifier></code> tags.
-     * @param amplifierNodes NodeList of <code><DEFANGED_amplifier></code> nodes.
+     * Reconstruct PMT signal given an ATWD array and a bias DAC setting.
+     * Note this function assumes the ATWD input array is in raw order
+     * and returns an array with same ordering (time decreasing with increasing
+     * array index).
+     * @param atwdin input array of shorts
+     * @param ch specifies ATWD channel 0-3 ATWD-A, 4-7 ATWD-B
+     * @param offset specifies starting offset in ATWD to atwdin[0].
+     *               For example, if offset is 40 then atwdin[0] really holds
+     *               the 40th bin of the ATWD.
+     * @param biasDAC DAC bias
+     * @param hv HV setting -- baseline id HV dependent!
+     * @return ATWD array in V
+     * @throws DOMCalibrationException if there is a problem with the data
      */
-    private void parseAmplifierGain(NodeList amplifierNodes) {
 
-        for (int i = 0; i < amplifierNodes.getLength(); i++) {
-            Element amp = (Element) amplifierNodes.item(i);
-            int ch = Integer.parseInt(amp.getAttribute("channel"));
-            Element gain = (Element) amp.getElementsByTagName("gain").item(0);
-            ampGainErr[ch] = Double.parseDouble(gain.getAttribute("error"));
-            ampGain[ch] = Double.parseDouble(gain.getFirstChild().getNodeValue());
+    public double[] atwdCalibrateToPmtSig(short[] atwdin, int ch, int offset,
+                                          int biasDAC, int hv)
+        throws DOMCalibrationException
+    {
+        if (ch == 3 || ch == 7) {
+            final String errMsg =
+                "Calibration of channels 3 and 7 not allowed!";
+            throw new IllegalArgumentException(errMsg);
         }
 
-    }
-    /**
-     * Obtain the DOM hardware ID (Dallas ID chip on mainboard).
-     * @return String id which is currently 12-bit hex number.
-     */
-    public String getDOMId() {
-        return this.domID;
-    }
+        /*
+         *  Find closest value to hv in baseline hashmap
+         *  This probably needs to be faster.....
+         */
+        Baseline bl = null;
+        if (baselines != null) {
+            Set s = baselines.keySet();
+            int abs = 10000;
+            for (Iterator it = s.iterator(); it.hasNext();) {
+                Baseline base = (Baseline)(baselines.get(it.next()));
+                int diff = (int)Math.abs(base.getVoltage() - hv);
+                if (diff < abs) {
+                    bl = base;
+                    abs = diff;
+                }
+            }
+        }
 
-    /**
-     * Return DOM mainboard temperature.
-     * @return double-valued temperature (degrees C).
-     */
-    public double getTemperature() {
-        return this.temp;
-    }
+        double baseline = (bl == null) ? 0.0 : bl.getBaseline(ch >> 2, ch % 4);
 
-    /**
-     * Return ADC readback values.
-     * @param ch ADC channel
-     * @return ADC value
-     */
-    public int getADC(int ch) {
-        return this.adcs[ch];
-    }
+        double amp = getAmplifierGain(ch % 4);
+        if ( amp == 0.0 ) {
+            final String errMsg = "Amplifier calibration cannot be zero";
+            throw new DOMCalibrationException(errMsg);
+        }
+        double biasV = biasDAC * 5.0 / 4096.0;
+        double[] out = new double[atwdin.length];
+        for (int i = 0; i < atwdin.length; i++) {
+            int bin = i + offset;
+            if (atwdFits[ch][bin].get("model").equals("linear")) {
+                Double dbl;
 
-    /**
-     * Return DAC settings on mainboard at startup.
-     * @param ch channel of DAC (0=ATWD_TRIGGER_BIAS, ...)
-     * @return DAC value
-     */
-    public int getDAC(int ch) {
-        return this.dacs[ch];
-    }
+                dbl = (Double)atwdFits[ch][bin].get("slope");
+                double m = dbl.doubleValue();
 
-    /**
-     * Obtain the fit information for an ATWD channel.
-     * This fit allows conversion between ATWD counts and
-     * volts.
-     * @param ch ATWD channel: channels 0-3 map to physical
-     * channels 0-3 of ATWD 'A' and channels 4-7 map to
-     * physical channels 0-3 of ATWD 'B'.
-     * @param bin Sample bin of the ATWD.  Each ATWD
-     * has 128 sample bins addressed starting from O.
-     * @param param Parameter name.  Each fit may have
-     * its own set of named fit paramters.  Each fit
-     * however must support the "model" parameter and
-     * the "r" parameter.
-     * @return double value of the fit parameter.
-     */
-    public double getATWDFitParam(int ch, int bin, String param) {
-        if (ch == 3 || ch == 7) throw new IllegalArgumentException("Calibration of channels 3 and 7 not allowed!");
-        return ((Double) atwdFits[ch][bin].get(param)).doubleValue();
-    }
+                dbl = (Double)atwdFits[ch][bin].get("intercept");
+                double b = dbl.doubleValue();
 
-    /**
-     * Obtain the fit information for the DOM analog front-end
-     * pulser. It describes the relation between the pulser DAC
-     * setting and the peak pulse amplitude in volts.
-     * @param param Named fit paramter.  See the description
-     * of the ATWD fit parameters.
-     * @return pulser fit parameter value
-     */
-    public double getPulserFitParam(String param) {
-        return ((Double) pulserFit.get(param)).doubleValue();
+                out[i] = m*atwdin[i] + b;
+                out[i] -= biasV;
+                out[i] -= baseline;
+                out[i] /= amp;
+            }
+        }
+        return out;
     }
 
     /**
-     * Obtain the fit information for the DOM HV gain.
-     * It describes the relation between log PMT gain
-     * and log HV in volts.
-     * @param param Named fit paramter.  See the description
-     * of the ATWD fit parameters.
-     * @return pulser fit parameter value
+     * Perform inverse calibration to get back to raw quantities.
+     * @param v calibrated ATWD vector
+     * @param ch ATWD channel (0-3 A), (4-7 B)
+     * @param offset offset of first bin
+     * @return  raw ATWD array, cast back to shorts.
      */
-    public double getHvFitParam(String param) {
-        return ((Double) hvFit.get(param)).doubleValue();
+    public short[] atwdDecalibrate(double[] v, int ch, int offset) {
+        if (ch == 3 || ch == 7) {
+            final String errMsg =
+                "Calibration of channels 3 and 7 not allowed!";
+            throw new IllegalArgumentException(errMsg);
+        }
+        short[] out = new short[v.length];
+        for (int i = 0; i < v.length; i++) {
+            int bin = i + offset;
+            HashMap h = atwdFits[ch][bin];
+            if (h.get("model").equals("linear")) {
+                double m = ((Double)h.get("slope")).doubleValue();
+                double b = ((Double)h.get("intercept")).doubleValue();
+                out[i] = (short) ((v[i] - b) / m);
+            }
+        }
+        return out;
     }
 
     /**
-     * Obtain the front end amplifier gains.
-     * @param ch Channel number
-     * <dl>
-     * <dt>Channel 0</dt><dd>high-gain</dd>
-     * <dt>Channel 1</dt><dd>medium gain</dd>
-     * <dt>Channel 2</dt><dd>low-gain</dd>
-     * @return double-valued gain
+     * Find the ATWD frequency corresponding to a given DAC value.
+     * @param dac the <code>ATWD_TRIGGER_BIAS</code> DAC setting
+     * @param chip the ATWD chip 0: 'A', 1: 'B'
+     * @return ATWD frequency
      */
-    public double getAmplifierGain(int ch) {
-        if (ch < 0 || ch > 2) throw new IllegalArgumentException("Channel " + ch + " is not a valid amplifier channel");
-        return ampGain[ch];
+    public double calcAtwdFreq(int dac, int chip) {
+        HashMap h = freqFits[chip];
+        double m = ((Double)h.get("slope")).doubleValue();
+        double b = ((Double)h.get("intercept")).doubleValue();
+        return m*dac + b;
     }
 
     /**
-     * Obtain error estimate on the amplifier gain.
-     * @param ch Channel number
-     * @return the error on the amplifier gain.
+     * Find the voltage required for specified gain.  For this
+     * to work, the calibration structure must contain a fit
+     * of the (log) HV to (log) Gain.
+     * @param gain the target PMT gain of the DOM (e.g. 1.0E+07)
+     * @return voltage in Volts
+     *
+     * @throws DOMCalibrationException if there is no "gain vs. HV" data
      */
-    public double getAmplifierGainError(int ch) {
-        if (ch < 0 || ch > 2) throw new IllegalArgumentException("Channel " + ch + " is not a valid amplifier channel");
-        return ampGainErr[ch];
+    public double calcVoltageFromGain(double gain)
+            throws DOMCalibrationException {
+        if (gainFit == null) {
+            throw new DOMCalibrationException("No gain vs. HV fit");
+        }
+
+        double m = ((Double) gainFit.get("slope")).doubleValue();
+        double b = ((Double) gainFit.get("intercept")).doubleValue();
+        // Take log10
+        double logGain = Math.log(gain) / Math.log(10);
+        return Math.pow(10.0, (logGain - b)/m);
     }
 
     /**
-     * Get the calibration timestamp - that is, when the calibration happened.
-     * @return Java Calendar object.
+     *
+     * @param voltage  Voltage applied to PMT
+     * @return transit time for given voltage in ns
+     * @throws DOMCalibrationException if no transit time data is present
      */
-    public Calendar getCalendar() {
-        return calendar;
+
+    public double getTransitTime(double voltage) throws DOMCalibrationException {
+        if (transitFit == null) {
+            throw new DOMCalibrationException("No transit time fit");
+        }
+
+        double m = ((Double) transitFit.get("slope")).doubleValue();
+        double b = ((Double) transitFit.get("intercept")).doubleValue();
+
+        double sqrtV = Math.sqrt(voltage);
+        return m/sqrtV + b;
+
     }
 
     /**
-     * Calibrate raw ATWD counts passed in array atwdin to calibrated volts.
-     * Note this function assumes the ATWD input array is in raw order
-     * and returns an array with same ordering (time decreasing with increasing
-     * array index).
-     * @param atwdin input array of shorts
-     * @param ch specifies ATWD channel 0-3 ATWD-A, 4-7 ATWD-B
-     * @param offset specifies starting offset in ATWD to atwdin[0].  For example,
-     * if offset is 40 then atwdin[0] really holds the 40th bin of the ATWD.
-     * @return ATWD array in V
+     * Close all open threads, file handles, database connections, etc.
      */
-    public double[] atwdCalibrate(short[] atwdin, int ch, int offset) {
-        if (ch == 3 || ch == 7) throw new IllegalArgumentException("Calibration of channels 3 and 7 not allowed!");
-        double[] out = new double[atwdin.length];
-        for (int i = 0; i < atwdin.length; i++) {
-            int bin = i + offset;
-            if (atwdFits[ch][bin].get("model").equals("linear")) {
-                double m = ((Double)atwdFits[ch][bin].get("slope")).doubleValue();
-                double b = ((Double)atwdFits[ch][bin].get("intercept")).doubleValue();
-                out[i] = m*atwdin[i] + b;
+    public void close()
+    {
+        if (calDB != null) {
+            try {
+                calDB.close();
+            } catch (SQLException se) {
+                // ignore errors on close
             }
+
+            calDB = null;
         }
-        return out;
     }
 
-    /* MKA Adding stuff here, Aug 12, 2004:
-    */
     /**
      * Method to calibrate domtest-format, pedestalpattern-subtracted and
      * baseline-subtracted input arrays containing raw data into a pulse in
@@ -445,7 +458,11 @@
      */
     public double[] domtestAtwdCalibrate( short[] domtestAtwdIn, int iChannel ) {
 
-        if (iChannel == 3 || iChannel == 7) throw new IllegalArgumentException("Calibration of channels 3 and 7 not allowed!");
+        if (iChannel == 3 || iChannel == 7) {
+            final String errMsg =
+                "Calibration of channels 3 and 7 not allowed!";
+            throw new IllegalArgumentException(errMsg);
+        }
 
         int inputDataLength = domtestAtwdIn.length;
 
@@ -457,10 +474,10 @@
             if ( atwdFits[iChannel][iSample].get( "model" ).equals( "linear" ) ) {
 
                 slope = ( (Double)atwdFits[iChannel][iSample].get( "slope" ) ).
-                        doubleValue();
+                    doubleValue();
                 domtestAtwdOut[inputDataLength - 1 - iSample] = ( (
-                        slope * domtestAtwdIn[inputDataLength - 1 - iSample] ) ) /
-                        this.getAmplifierGain( iChannel % 4 );
+                                                                   slope * domtestAtwdIn[inputDataLength - 1 - iSample] ) ) /
+                    this.getAmplifierGain( iChannel % 4 );
             } else {
 
                 domtestAtwdOut[inputDataLength - 1 - iSample] = 0.;
@@ -484,7 +501,11 @@
      */
     public double[] domtestAtwdCalibrate( int[] domtestAtwdIn, int iChannel ) {
 
-        if (iChannel == 3 || iChannel == 7) throw new IllegalArgumentException("Calibration of channels 3 and 7 not allowed!");
+        if (iChannel == 3 || iChannel == 7) {
+            final String errMsg =
+                "Calibration of channels 3 and 7 not allowed!";
+            throw new IllegalArgumentException(errMsg);
+        }
 
         int inputDataLength = domtestAtwdIn.length;
 
@@ -496,10 +517,10 @@
             if ( atwdFits[iChannel][iSample].get( "model" ).equals( "linear" ) ) {
 
                 slope = ( (Double)atwdFits[iChannel][iSample].get( "slope" ) ).
-                        doubleValue();
+                    doubleValue();
                 domtestAtwdOut[inputDataLength - 1 - iSample] = ( (
-                        slope * domtestAtwdIn[inputDataLength - 1 - iSample] ) ) /
-                        this.getAmplifierGain( iChannel % 4);
+                                                                   slope * domtestAtwdIn[inputDataLength - 1 - iSample] ) ) /
+                    this.getAmplifierGain( iChannel % 4 );
             } else {
 
                 domtestAtwdOut[inputDataLength - 1 - iSample] = 0.;
@@ -523,7 +544,11 @@
      */
     public double[] domtestAtwdCalibrate( double[] domtestAtwdIn, int iChannel ) {
 
-        if (iChannel == 3 || iChannel == 7) throw new IllegalArgumentException("Calibration of channels 3 and 7 not allowed!");
+        if (iChannel == 3 || iChannel == 7) {
+            final String errMsg =
+                "Calibration of channels 3 and 7 not allowed!";
+            throw new IllegalArgumentException(errMsg);
+        }
 
         int inputDataLength = domtestAtwdIn.length;
 
@@ -535,10 +560,10 @@
             if ( atwdFits[iChannel][iSample].get( "model" ).equals( "linear" ) ) {
 
                 slope = ( (Double)atwdFits[iChannel][iSample].get( "slope" ) ).
-                        doubleValue();
+                    doubleValue();
                 domtestAtwdOut[inputDataLength - 1 - iSample] = ( (
-                        slope * domtestAtwdIn[inputDataLength - 1 - iSample] ) ) /
-                        this.getAmplifierGain( iChannel % 4 );
+                                                                   slope * domtestAtwdIn[inputDataLength - 1 - iSample] ) ) /
+                    this.getAmplifierGain( iChannel % 4 );
             } else {
 
                 domtestAtwdOut[inputDataLength - 1 - iSample] = 0.;
@@ -549,73 +574,947 @@
     }
 
     /**
-     * Reconstruct PMT signal given an ATWD array and a bias DAC setting.
-     * Note this function assumes the ATWD input array is in raw order
-     * and returns an array with same ordering (time decreasing with increasing
-     * array index).
-     * @param atwdin input array of shorts
-     * @param ch specifies ATWD channel 0-3 ATWD-A, 4-7 ATWD-B
-     * @param offset specifies starting offset in ATWD to atwdin[0].  For example,
-     * if offset is 40 then atwdin[0] really holds the 40th bin of the ATWD.
-     * @return ATWD array in V
+     * Return ADC readback values.
+     * @param ch ADC channel
+     * @return ADC value
+     */
+    public int getADC(int ch) {
+        return adcs[ch];
+    }
+
+    /**
+     * Obtain the keys used to access data from the ATWD channel bin.
+     *
+     * @param ch ATWD channel: channels 0-3 map to physical
+     * channels 0-3 of ATWD 'A' and channels 4-7 map to
+     * physical channels 0-3 of ATWD 'B'.
+     * @param bin Sample bin of the ATWD.  Each ATWD
+     * has 128 sample bins addressed starting from O.
+     *
+     * @return ATWD keys.
      */
+    public Iterator getATWDFitKeys(int ch, int bin)
+    {
+        if (ch == 3 || ch == 7) {
+            final String errMsg =
+                "Calibration of channels 3 and 7 not allowed!";
+            throw new IllegalArgumentException(errMsg);
+        }
+        if (atwdFits[ch][bin] == null) {
+            return null;
+        }
 
-    public double[] atwdCalibrateToPmtSig(short[] atwdin, int ch, int offset, int biasDAC)
-                                                                      throws DOMCalibrationException {
-        if(ch == 3 || ch == 7) throw new IllegalArgumentException("Calibration of channels 3 and 7 not allowed!");
+        ArrayList keys = new ArrayList(atwdFits[ch][bin].keySet());
+        Collections.sort(keys);
+        return keys.iterator();
+    }
 
-        double amp = getAmplifierGain(ch);
-        if ( amp == 0.0 ) {
-            throw new DOMCalibrationException( "Ampifier calibration canno be zero" );
+    /**
+     * Obtain the fit information for an ATWD channel.
+     * This fit allows conversion between ATWD counts and
+     * volts.
+     * @param ch ATWD channel: channels 0-3 map to physical
+     * channels 0-3 of ATWD 'A' and channels 4-7 map to
+     * physical channels 0-3 of ATWD 'B'.
+     * @param bin Sample bin of the ATWD.  Each ATWD
+     * has 128 sample bins addressed starting from O.
+     * @param param Parameter name.  Each fit may have
+     * its own set of named fit paramters.  Each fit
+     * however must support the "model" parameter and
+     * the "r" parameter.
+     * @return double value of the fit parameter.
+     */
+    public double getATWDFitParam(int ch, int bin, String param) {
+        if (ch == 3 || ch == 7) {
+            final String errMsg =
+                "Calibration of channels 3 and 7 not allowed!";
+            throw new IllegalArgumentException(errMsg);
         }
-        double ampInv = 1.0 / amp;
-        double biasV = biasDAC * 5.0 / 4096.0;
-        double[] out = new double[atwdin.length];
-        for (int i = 0; i < atwdin.length; i++) {
-            int bin = i + offset;
-            if (atwdFits[ch][bin].get("model").equals("linear")) {
-                double m = ((Double)atwdFits[ch][bin].get("slope")).doubleValue();
-                double b = ((Double)atwdFits[ch][bin].get("intercept")).doubleValue();
-                out[i] = m*atwdin[i] + b;
-                out[i] -= biasV;
-                out[i] *= ampInv;
+        if (atwdFits[ch][bin] == null) {
+            return Double.NaN;
+        }
+
+        return ((Double) atwdFits[ch][bin].get(param)).doubleValue();
+    }
+
+    /**
+     * Obtain the fit model for an ATWD channel.
+     * This fit allows conversion between ATWD counts and
+     * volts.
+     * @param ch ATWD channel: channels 0-3 map to physical
+     * channels 0-3 of ATWD 'A' and channels 4-7 map to
+     * physical channels 0-3 of ATWD 'B'.
+     * @param bin Sample bin of the ATWD.  Each ATWD
+     * has 128 sample bins addressed starting from O.
+     * @return ATWD fit model.
+     */
+    public String getATWDFitModel(int ch, int bin) {
+        if (atwdFits[ch][bin] == null) {
+            return null;
+        }
+
+        return ((String) atwdFits[ch][bin].get("model"));
+    }
+
+    /**
+     * Obtain the keys used to access data from the ATWD frequency chip.
+     *
+     * @param chip the ATWD chip 0: 'A', 1: 'B'
+     *
+     * @return ATWD frequency keys.
+     */
+    public Iterator getATWDFrequencyFitKeys(int chip)
+    {
+        ArrayList keys = new ArrayList(freqFits[chip].keySet());
+        Collections.sort(keys);
+        return keys.iterator();
+    }
+
+    /**
+     * Obtain the model for an ATWD frequency chip.
+     *
+     * @param chip the ATWD chip 0: 'A', 1: 'B'
+     *
+     * @return model
+     */
+    public String getATWDFrequencyFitModel(int chip)
+    {
+        if (freqFits == null || chip < 0 || chip >= freqFits.length ||
+            freqFits[chip] == null)
+        {
+            return null;
+        }
+
+        return ((String) freqFits[chip].get("model"));
+    }
+
+    /**
+     * Obtain the data for an ATWD frequency chip parameter.
+     *
+     * @param chip the ATWD chip 0: 'A', 1: 'B'
+     * @param param parameter name
+     *
+     * @return parameter value
+     */
+    public double getATWDFrequencyFitParam(int chip, String param)
+    {
+        if (freqFits == null || chip < 0 || chip >= freqFits.length ||
+            freqFits[chip] == null)
+        {
+            return Double.NaN;
+        }
+
+        return ((Double) freqFits[chip].get(param)).doubleValue();
+    }
+
+    /**
+     * Obtain the front end amplifier gains.
+     * @param ch Channel number
+     * <dl>
+     * <dt>Channel 0</dt><dd>high-gain</dd>
+     * <dt>Channel 1</dt><dd>medium gain</dd>
+     * <dt>Channel 2</dt><dd>low-gain</dd>
+     * </dl>
+     * @return double-valued gain
+     */
+    public double getAmplifierGain(int ch) {
+        if (ch < 0 || ch > 2) {
+            final String errMsg = "Channel " + ch +
+                " is not a valid amplifier channel";
+            throw new IllegalArgumentException(errMsg);
+        }
+        return ampGain[ch];
+    }
+
+    /**
+     * Obtain error estimate on the amplifier gain.
+     * @param ch Channel number
+     * @return the error on the amplifier gain.
+     */
+    public double getAmplifierGainError(int ch) {
+        if (ch < 0 || ch > 2) {
+            final String errMsg = "Channel " + ch +
+                " is not a valid amplifier channel";
+            throw new IllegalArgumentException(errMsg);
+        }
+        return ampGainErr[ch];
+    }
+
+    /**
+     * Get the calibration timestamp - that is, when the calibration happened.
+     * @return Java Calendar object.
+     */
+    public Calendar getCalendar() {
+        return calendar;
+    }
+
+    /**
+     * Return DAC settings on mainboard at startup.
+     * @param ch channel of DAC (0=ATWD_TRIGGER_BIAS, ...)
+     * @return DAC value
+     */
+    public int getDAC(int ch) {
+        return dacs[ch];
+    }
+
+    /**
+     * Get the DOMCalibration database ID.
+     *
+     * @return id database ID
+     */
+    public int getDOMCalId()
+    {
+        return domcalId;
+    }
+
+    /**
+     * Obtain the DOM hardware ID (Dallas ID chip on mainboard).
+     * @return String id which is currently 12-bit hex number.
+     */
+    public String getDOMId() {
+        return domID;
+    }
+
+    /**
+     * Get the unique database ID for the DOM.
+     *
+     * @return DOM prod_id (or <tt>-1</tt> if product ID has not been set)
+     */
+    public int getDOMProductId()
+    {
+        if (domProd == null) {
+            return -1;
+        }
+
+        return domProd.getId();
+    }
+
+    /**
+     * Get the regression coefficient, if present.
+     *
+     * @return <tt>Double.NaN</tt> if gain fit data is not present.
+     */
+    public double getHvGainRegression()
+    {
+        if (gainFit == null) {
+            return Double.NaN;
+        }
+
+        return ((Double) gainFit.get("r")).doubleValue();
+    }
+
+    /**
+     * Get the gain intercept, if present.
+     *
+     * @return <tt>Double.NaN</tt> if gain fit data is not present.
+     */
+    public double getHvGainIntercept()
+    {
+        if (gainFit == null) {
+            return Double.NaN;
+        }
+
+        return ((Double) gainFit.get("intercept")).doubleValue();
+    }
+
+    /**
+     * Get the gain slope, if present.
+     *
+     * @return <tt>Double.NaN</tt> if gain fit data is not present.
+     */
+    public double getHvGainSlope()
+    {
+        if (gainFit == null) {
+            return Double.NaN;
+        }
+
+        return ((Double) gainFit.get("slope")).doubleValue();
+    }
+
+    /**
+     * Get the histogram data for the specified key, if present.
+     *
+     * @param key <tt>Short</tt> key
+     *
+     * @return <tt>null</tt> if histogram is not found
+     */
+    public HVHistogram getHvHistogram(Short key)
+    {
+        if (histoMap == null) {
+            return null;
+        }
+
+        return (HVHistogram) histoMap.get(key);
+    }
+
+    /**
+     * Get the histogram keys, if present.
+     *
+     * @return list of histogram keys
+     */
+    public Iterator getHvHistogramKeys()
+    {
+        if (histoMap == null) {
+            return null;
+        }
+
+        ArrayList keys = new ArrayList(histoMap.keySet());
+        Collections.sort(keys);
+        return keys.iterator();
+    }
+
+    /**
+     * Get the number of ADC channels.
+     *
+     * @return number of channels
+     */
+    public int getNumberOfADCs()
+    {
+        return adcs.length;
+    }
+
+    /**
+     * Get the number of ATWD bins.
+     *
+     * @param channel ATWD channel
+     *
+     * @return number of bins in the specified channel
+     */
+    public int getNumberOfATWDBins(int channel)
+    {
+        if (channel >= 0 && channel < atwdFits.length &&
+            atwdFits[channel] != null)
+        {
+            for (int i = atwdFits[channel].length - 1; i > 0; i--) {
+                if (atwdFits[channel][i] != null) {
+                    return i + 1;
+                }
             }
         }
-        return out;
+
+        return 0;
     }
 
     /**
-     * Perform inverse calibration to get back to raw quantities.
-     * @param v calibrated ATWD vector
-     * @param ch ATWD channel (0-3 A), (4-7 B)
-     * @param offset offset of first bin
-     * @return  raw ATWD array, cast back to shorts.
+     * Get the number of ATWD channels.
+     *
+     * @return number of channels
      */
-    public short[] atwdDecalibrate(double[] v, int ch, int offset) {
-        if (ch == 3 || ch == 7) throw new IllegalArgumentException("Calibration of channels 3 and 7 not allowed!");
-        short[] out = new short[v.length];
-        for (int i = 0; i < v.length; i++) {
-            int bin = i + offset;
-            Hashtable h = atwdFits[ch][bin];
-            if (h.get("model").equals("linear")) {
-                double m = ((Double)h.get("slope")).doubleValue();
-                double b = ((Double)h.get("intercept")).doubleValue();
-                out[i] = (short) ((v[i] - b) / m);
+    public int getNumberOfATWDChannels()
+    {
+        for (int i = atwdFits.length - 1; i > 0; i--) {
+            if (atwdFits[i][0] != null) {
+                return i + 1;
             }
         }
-        return out;
 
+        return 0;
     }
 
     /**
-     * Find the ATWD frequency corresponding to a given DAC value.
-     * @param dac the <code>ATWD_TRIGGER_BIAS</code> DAC setting
-     * @param chip the ATWD chip 0: 'A', 1: 'B'
+     * Get the number of ATWD frequency chips.
+     *
+     * @return number of chips
      */
-    public double calcAtwdFreq(int dac, int chip) {
-        Hashtable h = freqFits[chip];
-        double m = ((Double)h.get("slope")).doubleValue();
-        double b = ((Double)h.get("intercept")).doubleValue();
-        return m*dac + b;
+    public int getNumberOfATWDFrequencyChips()
+    {
+        for (int i = freqFits.length - 1; i > 0; i--) {
+            if (freqFits[i] != null) {
+                return i + 1;
+            }
+        }
+
+        return 0;
+    }
+
+    /**
+     * Get the number of amplifier gain channels.
+     *
+     * @return number of channels
+     */
+    public int getNumberOfAmplifierGainChannels()
+    {
+        return ampGain.length;
+    }
+
+    /**
+     * Get the number of DAC channels.
+     *
+     * @return number of channels
+     */
+    public int getNumberOfDACs()
+    {
+        return dacs.length;
+    }
+
+    /**
+     * Obtain the keys used to access data from the
+     * DOM analog front-end pulser.
+     *
+     * @return pulser keys.
+     */
+    public Iterator getPulserFitKeys()
+    {
+        ArrayList keys = new ArrayList(pulserFit.keySet());
+        Collections.sort(keys);
+        return keys.iterator();
+    }
+
+    /**
+     * Obtain the fit model for the DOM analog front-end
+     * pulser.
+     * @return pulser fit model value
+     */
+    public String getPulserFitModel()
+    {
+        return (String) pulserFit.get("model");
+    }
+
+    /**
+     * Obtain the fit information for the DOM analog front-end
+     * pulser. It describes the relation between the pulser DAC
+     * setting and the peak pulse amplitude in volts.
+     * @param param Named fit paramter.  See the description
+     * of the ATWD fit parameters.
+     * @return pulser fit parameter value
+     */
+    public double getPulserFitParam(String param)
+    {
+        return ((Double) pulserFit.get(param.toLowerCase())).doubleValue();
+    }
+
+    /**
+     * Return DOM mainboard temperature.
+     * @return double-valued temperature (degrees C).
+     */
+    public double getTemperature() {
+        return temp;
+    }
+
+    /**
+     * Is there gain fit data for this calibration file?
+     *
+     * @return <tt>true</tt> if there is gain slope/intercept data
+     */
+    public boolean hasHvGainFit()
+    {
+        return (gainFit != null);
+    }
+
+    /**
+     * Save the calibration data to the database.
+     *
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws IOException if there is a filesystem probelm
+     * @throws SQLException if there is a database problem
+     */
+    public void save()
+        throws DOMCalibrationException, IOException, SQLException
+    {
+        if (calDB == null) {
+            try {
+                calDB = new CalibratorDB();
+            } catch (DOMProdTestException dpte) {
+                throw new DOMCalibrationException(dpte.getMessage());
+            }
+        }
+
+        calDB.save(this);
+    }
+
+    /**
+     * Set the calibration ADC array.
+     *
+     * @param adcs ADC array
+     */
+    protected void setADCs(int[] adcs)
+    {
+        this.adcs = adcs;
+    }
+
+    /**
+     * Set the calibration ATWD fit array.
+     *
+     * @param atwdFits ATWD fit array
+     */
+    protected void setATWDFits(HashMap[][] atwdFits)
+    {
+        this.atwdFits = atwdFits;
+    }
+
+    /**
+     * Set the calibration ATWD frequency fit array.
+     *
+     * @param freqs ATWD frequency fit array
+     */
+    protected void setATWDFrequencyFits(HashMap[] freqs)
+    {
+        this.freqFits = freqs;
+    }
+
+    /**
+     * Set the calibration amplifier gain and error arrays.
+     *
+     * @param gain amplifier gain array
+     * @param error amplifier error array
+     */
+    protected void setAmpGain(double[] gain, double[] error)
+    {
+        this.ampGain = gain;
+        this.ampGainErr = error;
+    }
+
+    /**
+     * Set the calibration DAC array.
+     *
+     * @param dacs DAC array
+     */
+    protected void setDACs(int[] dacs)
+    {
+        this.dacs = dacs;
+    }
+
+    /**
+     * Set the DOMCalibration database ID.
+     *
+     * @param id database ID
+     */
+    protected void setDOMCalId(int id)
+    {
+        this.domcalId = id;
+    }
+
+    /**
+     * Set the cached database information for the DOM.
+     *
+     * @param domProd database DOM information
+     */
+    protected void setDOMProduct(DOMProduct domProd)
+    {
+        this.domProd = domProd;
+    }
+
+    /**
+     * Set the high-voltage slope and intercept data
+     *
+     * @param slope slope
+     * @param intercept intercept
+     */
+    protected void setHvGain(double slope, double intercept, double regression)
+    {
+        if (gainFit == null) {
+            gainFit = new HashMap();
+        }
+
+        gainFit.put("slope", new Double(slope));
+        gainFit.put("intercept", new Double(intercept));
+        gainFit.put("r", new Double(regression));
+    }
+
+    /**
+     * Set the high-voltage histogram data
+     *
+     * @param histo histogram array
+     */
+    protected void setHvHistograms(HVHistogram[] histo)
+    {
+        if (histo == null) {
+            histoMap = null;
+        } else {
+            if (histoMap == null) {
+                histoMap = new HashMap();
+            } else {
+                histoMap.clear();
+            }
+
+            for (int i = 0; i < histo.length; i++) {
+                histoMap.put(new Short(histo[i].getVoltage()), histo[i]);
+            }
+        }
+    }
+
+    /**
+     * Set the main table data from the database.
+     *
+     * @param domcalId DOMCalibration database ID
+     * @param mbSerial DOM ID (main board hardware serial number)
+     * @param domProd database DOM information
+     * @param date DOMCalibration date
+     * @param temp DOMCalibration temperature
+     */
+    protected void setMain(int domcalId, String mbSerial, DOMProduct domProd,
+                           Date date, double temp)
+    {
+        this.domcalId = domcalId;
+        this.domID = mbSerial;
+        this.domProd = domProd;
+        this.calendar = Calendar.getInstance();
+        this.calendar.setTime(date);
+        this.temp = temp;
+    }
+
+    /**
+     * Set the fit model for the DOM analog front-end pulser.
+     *
+     * @param model pulser fit model value
+     */
+    public void setPulserFitModel(String model)
+    {
+        if (pulserFit == null) {
+            pulserFit = new HashMap();
+        }
+
+        pulserFit.put("model", model);
+    }
+
+    /**
+     * Set the fit information for the DOM analog front-end pulser.
+     *
+     * @param param Named fit paramter.  See the description
+     * of the ATWD fit parameters.
+     * @param value pulser fit parameter value
+     *
+     * @throws DOMCalibrationException if an argument is invalid
+     */
+    public void setPulserFitParam(String param, double value)
+        throws DOMCalibrationException
+    {
+        if (param == null) {
+            throw new DOMCalibrationException("Parameter name cannot be null");
+        }
+
+        final String paramLow = param.toLowerCase();
+
+        if (paramLow.equals("model")) {
+            throw new DOMCalibrationException("'model' is not a valid" +
+                                              " parameter name");
+        }
+
+        if (pulserFit == null) {
+            pulserFit = new HashMap();
+        }
+
+        pulserFit.put(paramLow, new Double(value));
+    }
+
+    /**
+     * Constructor from initialized InputStream object.
+     * The XML stream is read into a DOM tree over this object.
+     * @param is an initialized, open InputStream object pointing
+     * to the XML file.
+     * @throws IOException
+     * @throws DOMCalibrationException
+     */
+    class Parser
+    {
+        /**
+         * Calibration XML parser.
+         *
+         * @param is input stream
+         *
+         * @throws IOException if there is a problem reading the stream
+         * @throws DOMCalibrationException if there is a formatting error
+         */
+        Parser(InputStream is) throws
+            IOException,
+            DOMCalibrationException {
+
+            /* Make a DOM tree from input stream */
+            DocumentBuilderFactory f = DocumentBuilderFactory.newInstance();
+            try {
+                DocumentBuilder parser = f.newDocumentBuilder();
+                Document doc = parser.parse(is);
+                fromDocTree(doc);
+            } catch (SAXException se) {
+                logger.error(se);
+            } catch (ParserConfigurationException pe) {
+                logger.error(pe);
+            }
+        }
+
+        /**
+         * Internal method to drive the conversion from DOM tree to
+         * class ata members.
+         * @param doc document
+         * @throws DOMCalibrationException if there is a formatting error
+         */
+        private void fromDocTree(Document doc) throws DOMCalibrationException {
+
+            NodeList    nodes;
+            Element     dc, e;
+
+            // Get the <domcal> tag
+            nodes = doc.getElementsByTagName("domcal");
+            if (nodes.getLength() != 1) {
+                throw new DOMCalibrationException("XML format error");
+            }
+            dc      = (Element) nodes.item(0);
+            logger.debug("Found node " + dc.getNodeName());
+            // Get the DOM Id
+            e       = (Element) dc.getElementsByTagName("domid").item(0);
+            domID   = e.getFirstChild().getNodeValue();
+            e       = (Element) dc.getElementsByTagName("temperature").item(0);
+            temp    = Double.parseDouble(e.getFirstChild().getNodeValue());
+            String tempFmt = e.getAttribute("format");
+            if (tempFmt.equals("raw")) {
+                if (temp > 32768) temp -= 65536;
+                temp /= 256.0;
+            } else if (tempFmt.equals("Kelvin")) {
+                temp -= 273.15;
+            }
+            e       = (Element) dc.getElementsByTagName("date").item(0);
+
+            /*
+             * Sorry - a little kludgy here.  Need to get the calibration date
+             * information out of the DOM.  The python calibrator emits a full
+             * date string but the in-DOM calibrator program (1) needs date
+             * input from the caller, and (2) has pretty terse format,
+             * e.g. 1-24-2009.
+             * Try the new format first (non-python) and, failing that revert
+             * to the older, python formatting.
+             */
+            calendar = Calendar.getInstance();
+            Date d = null;
+	
+            String date_string = e.getFirstChild().getNodeValue();
+	
+            try {
+                DateFormat df = new SimpleDateFormat("MM-dd-yyyy");
+                d = df.parse(date_string);
+            } catch (ParseException pexo) {
+                try {
+                    DateFormat df =
+                        new SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy");
+                    d = df.parse(date_string);
+                } catch (ParseException pexi) {
+                    throw new DOMCalibrationException(pexi.getMessage());
+                }
+            }
+
+            calendar.setTime(d);
+
+            parseAdcDacTags(dc.getElementsByTagName("dac"), dacs);
+            parseAdcDacTags(dc.getElementsByTagName("adc"), adcs);
+            nodes = dc.getElementsByTagName("pulser");
+            switch (nodes.getLength()) {
+            case 0:
+                break;
+            case 1:
+                parsePulserFit((Element) nodes.item(0));
+                break;
+            default:
+                final String msg =
+                    "XML format error - more than one <pulser> record";
+                throw new DOMCalibrationException(msg);
+            }
+            parseATWDFits(dc.getElementsByTagName("atwd"));
+            parseAmplifierGain(dc.getElementsByTagName("amplifier"));
+            parseFreqFits(dc.getElementsByTagName("atwdfreq"));
+            parseGainVsHV(dc.getElementsByTagName("hvGainCal"));
+            parseHistograms(dc.getElementsByTagName("histo"));
+            parseBaselines(dc.getElementsByTagName("baseline"));
+            parseTransitTimes(dc.getElementsByTagName("pmtTransitTime"));
+        }
+
+        /**
+         * Internal function to drive the parsing of <code>&lt;atwd&gt;</code>
+         * tags.
+         * @param atwdNodes list of atwd nodes
+         */
+        private void parseATWDFits(NodeList atwdNodes) {
+            for (int i = 0; i < atwdNodes.getLength(); i++) {
+                Element atwd = (Element) atwdNodes.item(i);
+                int ch = Integer.parseInt(atwd.getAttribute("channel"));
+                int bin = Integer.parseInt(atwd.getAttribute("bin"));
+                /* 
+                 * Check whether the element has an "id" attribute - if
+                 * so then that means that the channels are not assigned a
+                 * linear range from 0-7 but run 0-4 and ATWD 0/1 are
+                 * differentiated by the "id" attribute. 
+                 */
+                String ids = atwd.getAttribute("id");
+                if (ids.length() > 0) {
+                    ch += 4*Integer.parseInt(ids);
+                }
+                Element elem =
+                    (Element) atwd.getElementsByTagName("fit").item(0);
+                atwdFits[ch][bin] = parseFit(elem);
+            }
+        }
+
+        /**
+         * Parse the DAC and ADC tags.
+         * @param nodes A NodeList with the DAC/ADC tags
+         * @param arr   The output array
+         */
+        private void parseAdcDacTags(NodeList nodes, int[] arr) {
+            for (int idac = 0; idac < nodes.getLength(); idac++) {
+                Element dacNode = (Element) nodes.item(idac);
+                int ch = Integer.parseInt(dacNode.getAttribute("channel"));
+                String val = dacNode.getFirstChild().getNodeValue();
+                arr[ch] = Integer.parseInt(val);
+            }
+        }
+
+        /**
+         * Get FE amplifier gains from <code>&lt;amplifier&gt;</code> tags.
+         * @param amplifierNodes NodeList of <code>&lt;amplifier&gt;</code>
+         *                       nodes.
+         */
+        private void parseAmplifierGain(NodeList amplifierNodes) {
+
+            for (int i = 0; i < amplifierNodes.getLength(); i++) {
+                Element amp = (Element) amplifierNodes.item(i);
+                int ch = Integer.parseInt(amp.getAttribute("channel"));
+                Element gain =
+                    (Element) amp.getElementsByTagName("gain").item(0);
+                ampGainErr[ch] = Double.parseDouble(gain.getAttribute("error"));
+                String val = gain.getFirstChild().getNodeValue();
+                ampGain[ch] = Double.parseDouble(val);
+            }
+        }
+
+        /**
+         * Private function to handle the fit tags.
+         * @param el The supporting <CODE>&lt;fit&gt;</CODE> Element
+         * @return hashed list of parameter name/value pairs
+         */
+        private HashMap parseFit(Element el) {
+            HashMap h = new HashMap(5);
+            h.put("model", el.getAttribute("model"));
+            NodeList nodes = el.getElementsByTagName("param");
+            for (int i = 0; i < nodes.getLength(); i++) {
+                Element param = (Element) nodes.item(i);
+                h.put(
+                      param.getAttribute("name").toLowerCase(),
+                      Double.valueOf(param.getFirstChild().getNodeValue())
+                      );
+            }
+            Element r =
+                (Element) el.getElementsByTagName("regression-coeff").item(0);
+            h.put("r", Double.valueOf(r.getFirstChild().getNodeValue()));
+            return h;
+        }
+
+        /**
+         * Parse the ATWD frequency fit
+         * @param freqNodes document node containing the fit.
+         */
+        private void parseFreqFits(NodeList freqNodes) {
+            for (int i = 0; i < freqNodes.getLength(); i++) {
+                Element freq = (Element) freqNodes.item(i);
+                String chipStr = freq.getAttribute("atwd");
+                if (chipStr.length() == 0) {
+                    chipStr = freq.getAttribute("chip");
+                }
+                int chip = Integer.parseInt(chipStr);
+                Element elem =
+                    (Element) freq.getElementsByTagName("fit").item(0);
+                freqFits[chip] = parseFit(elem);
+            }
+        }
+
+        /**
+         * Parses the Gain vs. HV fit block - this is an optional
+         * element in the XML file - currently only supported by
+         * the ARM domcal versions > 2.0.
+         * @param nodes The supporting <CODE>&lt;hvGainCal&gt;</CODE> NodeList
+         * @throws DOMCalibrationException if more than one &lt;hvGainCal&gt;
+         *                                 element is found
+         */
+        private void parseGainVsHV(NodeList nodes)
+            throws DOMCalibrationException
+        {
+            switch (nodes.getLength()) {
+            case 0:
+                break;
+            case 1:
+                gainFit = parseFit((Element) nodes.item(0));
+                break;
+            default:
+                final String errMsg =
+                    "XML format error - more than one <hvGainCal> record";
+                throw new DOMCalibrationException(errMsg);
+            }
+        }
+
+        /**
+         * Parses new domcal transit time data
+         *
+         */
+
+        private void parseTransitTimes(NodeList nodes)
+            throws DOMCalibrationException
+        {
+            switch (nodes.getLength()) {
+            case 0:
+                break;
+            case 1:
+                transitFit = parseFit((Element) nodes.item(0));
+                break;
+            default:
+                final String errMsg =
+                    "XML format error - more than one <pmtTransitTime> record";
+                throw new DOMCalibrationException(errMsg);
+            }
+        }
+
+        /**
+         * Parses new domcal baseline data
+         *
+         */
+
+        private void parseBaselines(NodeList nodes) {
+            baselines = new HashMap();
+            for (int i = 0; i < nodes.getLength(); i++) {
+                Element baseEl = (Element)(nodes.item(i));
+                short voltage = Short.parseShort(baseEl.getAttribute("voltage"));
+                NodeList baselist = baseEl.getElementsByTagName("base");
+                float[][] values = new float[2][3];
+                for (int j = 0; j < baselist.getLength(); j++) {
+                    Element base = (Element)baselist.item(j);
+                    int atwd = Integer.parseInt(base.getAttribute("atwd"));
+                    String chanStr = base.getAttribute("channel");
+                    if (chanStr.length() == 0) {
+                        chanStr = base.getAttribute("ch");
+                    }
+                    int ch = Integer.parseInt(chanStr);
+                    float value = Float.parseFloat(base.getAttribute("value"));
+                    values[atwd][ch] = value;
+                }
+                Integer v = new Integer(voltage);
+                baselines.put(v, new Baseline(voltage, values));
+            }
+        }
+
+        /**
+         * Parses the histogram block.
+         * @param histos The supporting <CODE>&lt;histo&gt;</CODE> NodeList
+         */
+        private void parseHistograms(NodeList histos)
+        {
+            histoMap = null;
+            for (int i = 0; i < histos.getLength(); i++) {
+                HVHistogram current =
+                    HVHistogram.parseHVHistogram((Element) histos.item(i));
+
+                if (histoMap == null) {
+                    histoMap = new HashMap();
+                }
+
+                histoMap.put(new Short(current.getVoltage()), current);
+            }
+        }
+
+        /**
+         * Parse the <code>&lt;pulser&gt;</code> tag
+         *
+         * @param pulser pulser node
+         */
+        private void parsePulserFit(Element pulser) {
+            Element elem = (Element) pulser.getElementsByTagName("fit").item(0);
+            pulserFit = parseFit(elem);
+        }
     }
 }
Index: dom-cal/src/icecube/daq/domcal/CalibratorComparator.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/CalibratorComparator.java:1.2
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/src/icecube/daq/domcal/CalibratorComparator.java	Mon Jan 10 14:18:16 2005
@@ -0,0 +1,990 @@
+package icecube.daq.domcal;
+
+import java.util.Calendar;
+import java.util.Comparator;
+import java.util.Iterator;
+
+/**
+ * Compare calibration data.
+ */
+public class CalibratorComparator
+    implements Comparator
+{
+    /**
+     * Create calibration comparator.
+     */
+    CalibratorComparator()
+    {
+    }
+
+    /**
+     * Compare calibration data.
+     *
+     * @param o1 first object being compared
+     * @param o2 second object being compared
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    public int compare(Object o1, Object o2)
+    {
+        if (o1 == null) {
+            if (o2 == null) {
+                return 0;
+            }
+
+            return 1;
+        } else if (o2 == null) {
+            return -1;
+        }
+
+        if (!(o1 instanceof Calibrator) || !(o2 instanceof Calibrator)) {
+            return o1.getClass().getName().compareTo(o2.getClass().getName());
+        }
+
+        return compare((Calibrator) o1, (Calibrator) o2);
+    }
+
+    /**
+     * Compare calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    public static final int compare(Calibrator c1, Calibrator c2)
+    {
+        return compare(c1, c2, false);
+    }
+
+    /**
+     * Compare calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    public static final int compare(Calibrator c1, Calibrator c2,
+                                    boolean verbose)
+    {
+        int cmp = compareMain(c1, c2, verbose);
+        if (cmp == 0) {
+            cmp = compareADCs(c1, c2, verbose);
+            if (cmp == 0) {
+                cmp = compareDACs(c1, c2, verbose);
+                if (cmp == 0) {
+                    cmp = comparePulsers(c1, c2, verbose);
+                    if (cmp == 0) {
+                        cmp = compareATWDs(c1, c2, verbose);
+                        if (cmp == 0) {
+                            cmp = compareAmpGains(c1, c2, verbose);
+                            if (cmp == 0) {
+                                cmp = compareATWDFreqs(c1, c2, verbose);
+                                if (cmp == 0) {
+                                    cmp = compareHvGains(c1, c2, verbose);
+                                    if (cmp == 0) {
+                                        cmp = compareHvHistos(c1, c2, verbose);
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+
+        return cmp;
+    }
+
+    /**
+     * Compare ADC calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int compareADCs(Calibrator c1, Calibrator c2,
+                                   boolean verbose)
+    {
+        final int len = c1.getNumberOfADCs();
+        if (len != c2.getNumberOfADCs()) {
+            if (verbose) {
+                System.err.println("ADC length mismatch (" + len + " != " +
+                                   c2.getNumberOfADCs() + ")");
+            }
+            return len - c2.getNumberOfADCs();
+        }
+
+        for (int i = 0; i < len; i++) {
+            if (c1.getADC(i) != c2.getADC(i)) {
+                if (verbose) {
+                    System.err.println("ADC#" + i + " mismatch (" +
+                                       c1.getADC(i) + " != " + c2.getADC(i) +
+                                       ")");
+                }
+                return c1.getADC(i) - c2.getADC(i);
+            }
+        }
+
+        return 0;
+    }
+
+    /**
+     * Compare ATWD frequency calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int compareATWDFreqs(Calibrator c1, Calibrator c2,
+                                        boolean verbose)
+    {
+        final int numChips = c1.getNumberOfATWDFrequencyChips();
+        if (numChips != c2.getNumberOfATWDFrequencyChips()) {
+            if (verbose) {
+                System.err.println("ATWD frequency chip mismatch (" +
+                                   numChips + " != " +
+                                   c2.getNumberOfATWDFrequencyChips() + ")");
+            }
+            return numChips - c2.getNumberOfATWDFrequencyChips();
+        }
+
+        for (int ch = 0; ch < numChips; ch++) {
+            final String model = c1.getATWDFrequencyFitModel(ch);
+            if (!model.equals(c2.getATWDFrequencyFitModel(ch))) {
+                if (verbose) {
+                    System.err.println("ATWD chip#" + ch +
+                                       " model mismatch (" + model + " != " +
+                                       c2.getATWDFrequencyFitModel(ch) + ")");
+                }
+                return model.compareTo(c2.getATWDFrequencyFitModel(ch));
+            }
+
+            Iterator i1 = c1.getATWDFrequencyFitKeys(ch);
+            Iterator i2 = c2.getATWDFrequencyFitKeys(ch);
+
+            int num = 0;
+            while (i1.hasNext()) {
+                if (!i2.hasNext()) {
+                    if (verbose) {
+                        int num1 = num;
+                        while (i1.hasNext()) {
+                            num1++;
+                            i1.next();
+                        }
+
+                        System.err.println("ATWD chip#" + ch +
+                                           " entry length mismatch (" + num1 +
+                                           " != " + num + ")");
+                    }
+                    return -1;
+                }
+
+                final String p1 = (String) i1.next();
+                final String p2 = (String) i2.next();
+                if (!p1.equals(p2)) {
+                    if (verbose) {
+                        System.err.println("ATWD chip#" + ch + " parameter#" +
+                                           num + " mismatch (" + p1 + " != " +
+                                           p2 + ")");
+                    }
+                    return p1.compareTo(p2);
+                }
+
+                if (p1.equals("model")) {
+                    continue;
+                }
+
+                final double v1 = c1.getATWDFrequencyFitParam(ch, p1);
+                final double v2 = c1.getATWDFrequencyFitParam(ch, p2);
+                final double delta = 0.00000001;
+                if (v1 < v2 - delta || v1 > v2 + delta) {
+                    if (verbose) {
+                        System.err.println("ATWD chip#" + ch + " parameter " +
+                                           p1 + " mismatch (" + v1 +
+                                           " != " + v2 + ")");
+                    }
+                    return (int) (v1 < v2 - delta ? 1 : -1);
+                }
+
+                num++;
+            }
+
+            if (i2.hasNext()) {
+                if (verbose) {
+                    int num2 = num;
+                    while (i2.hasNext()) {
+                        num2++;
+                        i2.next();
+                    }
+
+                    System.err.println("ATWD chip#" + ch +
+                                       " entry length mismatch (" + num +
+                                       " != " + num2 + ")");
+                }
+                return 1;
+            }
+        }
+
+        return 0;
+    }
+
+    /**
+     * Compare ATWD calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int compareATWDs(Calibrator c1, Calibrator c2,
+                                    boolean verbose)
+    {
+        final int numChan = c1.getNumberOfATWDChannels();
+        if (numChan != c2.getNumberOfATWDChannels()) {
+            if (verbose) {
+                System.err.println("ATWD channel mismatch (" + numChan +
+                                   " != " + c2.getNumberOfATWDChannels() +
+                                   ")");
+            }
+            return numChan - c2.getNumberOfATWDChannels();
+        }
+
+        for (int ch = 0; ch < numChan; ch++) {
+            if (ch == 3 || ch == 7) {
+                // channels 3 and 7 do not exist
+                continue;
+            }
+
+            final int numBin = c1.getNumberOfATWDBins(ch);
+            if (numBin != c2.getNumberOfATWDBins(ch)) {
+                if (verbose) {
+                    System.err.println("ATWD channel#" + ch +
+                                       " bin mismatch (" + numBin +
+                                       " != " + c2.getNumberOfATWDBins(ch) +
+                                       ")");
+                }
+                return numBin - c2.getNumberOfATWDBins(ch);
+            }
+
+            for (int bin = 0; bin < numBin; bin++) {
+                final String model = c1.getATWDFitModel(ch, bin);
+                if (!model.equals(c2.getATWDFitModel(ch, bin))) {
+                    if (verbose) {
+                        System.err.println("ATWD model mismatch (" + model +
+                                           " != " +
+                                           c2.getATWDFitModel(ch, bin) + ")");
+                    }
+                    return model.compareTo(c2.getATWDFitModel(ch, bin));
+                }
+
+                Iterator i1 = c1.getATWDFitKeys(ch, bin);
+                Iterator i2 = c2.getATWDFitKeys(ch, bin);
+
+                int num = 0;
+                while (i1.hasNext()) {
+                    if (!i2.hasNext()) {
+                        if (verbose) {
+                            int num1 = num;
+                            while (i1.hasNext()) {
+                                num1++;
+                                i1.next();
+                            }
+
+                            System.err.println("ATWD channel#" + ch + " bin#" +
+                                               bin +
+                                               " entry length mismatch (" +
+                                               num1 + " != " + num + ")");
+                        }
+                        return -1;
+                    }
+
+                    final String p1 = (String) i1.next();
+                    final String p2 = (String) i2.next();
+                    if (!p1.equals(p2)) {
+                        if (verbose) {
+                            System.err.println("ATWD channel#" + ch +
+                                               " bin#" + bin + " parameter#" +
+                                               num +
+                                               " mismatch (" + p1 + " != " +
+                                               p2 + ")");
+                        }
+                        return p1.compareTo(p2);
+                    }
+
+                    if (p1.equals("model")) {
+                        continue;
+                    }
+
+                    final double v1 = c1.getATWDFitParam(ch, bin, p1);
+                    final double v2 = c1.getATWDFitParam(ch, bin, p2);
+                    final double delta = 0.00000001;
+                    if (v1 < v2 - delta || v1 > v2 + delta) {
+                        if (verbose) {
+                            System.err.println("ATWD channel#" + ch +
+                                               " bin#" + bin + " parameter " +
+                                               p1 + " mismatch (" + v1 +
+                                               " != " + v2 + ")");
+                        }
+                        return (int) (v1 < v2 - delta ? 1 : -1);
+                    }
+
+                    num++;
+                }
+
+                if (i2.hasNext()) {
+                    if (verbose) {
+                        int num2 = num;
+                        while (i2.hasNext()) {
+                            num2++;
+                            i2.next();
+                        }
+
+                        System.err.println("ATWD channel#" + ch + " bin#" +
+                                           bin +
+                                           " entry length mismatch (" +
+                                           num + " != " + num2 + ")");
+                    }
+                    return 1;
+                }
+            }
+        }
+
+        return 0;
+    }
+
+    /**
+     * Compare amplifier gain calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int compareAmpGains(Calibrator c1, Calibrator c2,
+                                       boolean verbose)
+    {
+        final int len = c1.getNumberOfAmplifierGainChannels();
+        if (len != c2.getNumberOfAmplifierGainChannels()) {
+            if (verbose) {
+                System.err.println("Amplifier gain length mismatch (" + len +
+                                   " != " +
+                                   c2.getNumberOfAmplifierGainChannels() +
+                                   ")");
+            }
+            return len - c2.getNumberOfAmplifierGainChannels();
+        }
+
+        for (int i = 0; i < len; i++) {
+            final double delta = 0.00000001;
+
+            final double g1 = c1.getAmplifierGain(i);
+            final double g2 = c2.getAmplifierGain(i);
+            if (g1 < g2 - delta || g1 > g2 + delta) {
+                if (verbose) {
+                    System.err.println("Amplifier#" + i + " gain mismatch (" +
+                                       g1 + " != " + g2 + ")");
+                }
+                return (int) (g1 < g2 - delta ? 1 : -1);
+            }
+
+            final double e1 = c1.getAmplifierGainError(i);
+            final double e2 = c2.getAmplifierGainError(i);
+            if (e1 < e2 - delta || e1 > e2 + delta) {
+                if (verbose) {
+                    System.err.println("Amplifier#" + i + " error mismatch (" +
+                                       e1 + " != " + e2 + ")");
+                }
+                return (int) (e1 < e2 - delta ? 1 : -1);
+            }
+        }
+
+        return 0;
+    }
+
+    /**
+     * Compare DAC calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int compareDACs(Calibrator c1, Calibrator c2,
+                                   boolean verbose)
+    {
+        final int len = c1.getNumberOfDACs();
+        if (len != c2.getNumberOfDACs()) {
+            if (verbose) {
+                System.err.println("DAC length mismatch (" + len + " != " +
+                                   c2.getNumberOfDACs() + ")");
+            }
+            return len - c2.getNumberOfDACs();
+        }
+
+        for (int i = 0; i < len; i++) {
+            if (c1.getDAC(i) != c2.getDAC(i)) {
+                if (verbose) {
+                    System.err.println("DAC#" + i + " mismatch (" +
+                                       c1.getDAC(i) + " != " + c2.getDAC(i) +
+                                       ")");
+                }
+                return c1.getDAC(i) - c2.getDAC(i);
+            }
+        }
+
+        return 0;
+    }
+
+    /**
+     * Compare high-voltage histograms.
+     *
+     * @param h1 first histogram
+     * @param h2 second histogram
+     * @param num histogram index number
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int compareHisto(HVHistogram h1, HVHistogram h2, int num,
+                                    boolean verbose)
+    {
+        final short v1 = h1.getVoltage();
+        if (v1 != h2.getVoltage()) {
+            if (verbose) {
+                System.err.println("Histogram#" + num + " voltage mismatch (" +
+                                   v1 + " != " + h2.getVoltage() + ")");
+                                   
+            }
+            return (h2.getVoltage() - v1);
+        }
+
+        final boolean convergent = h1.isConvergent();
+        if (convergent != h2.isConvergent()) {
+            if (verbose) {
+                System.err.println("Histogram#" + num +
+                                   " convergence mismatch (" +
+                                   (convergent ? "" : "!") + "convergent != " +
+                                   (h2.isConvergent() ?"" : "!") +
+                                   "convergent)");
+            }
+            return (convergent ? -1 : 1);
+        }
+
+        final float delta = 0.00000001f;
+
+        final float p1 = h1.getPV();
+        final float p2 = h2.getPV();
+        if (p1 < p2 - delta || p1 > p2 + delta) {
+            if (verbose) {
+                System.err.println("Histogram#" + num + " PV mismatch (" + p1 +
+                                   " != " + p2 + ")");
+            }
+            return (p1 < p2 - delta ? 1 : -1);
+        }
+
+        final float n1 = h1.getNoiseRate();
+        final float n2 = h2.getNoiseRate();
+        if (n1 < n2 - delta || n1 > n2 + delta) {
+            if (verbose) {
+                System.err.println("Histogram#" + num +
+                                   " noise rate mismatch (" + n1 + " != " +
+                                   n2 + ")");
+            }
+            return (n1 < n2 - delta ? 1 : -1);
+        }
+
+        final boolean isFilled = h1.isFilled();
+        if (isFilled != h2.isFilled()) {
+            if (verbose) {
+                System.err.println("Histogram#" + num +
+                                   " isFilled mismatch (" +
+                                   (isFilled ? "" : "!") + "isFilled != " +
+                                   (h2.isFilled() ?"" : "!") + "isFilled)");
+            }
+            return (isFilled ? -1 : 1);
+        }
+
+        float[] hp1 = h1.getFitParams();
+        float[] hp2 = h2.getFitParams();
+
+        if (hp1 == null) {
+            if (hp2 != null) {
+                if (verbose) {
+                    System.err.println("Histogram#" + num +
+                                       " param array mismatch" +
+                                       " (null != float[" + hp2.length + "])");
+                }
+
+                return 1;
+            }
+
+            return 0;
+        } else if (hp2 == null) {
+            if (verbose) {
+                System.err.println("Histogram#" + num +
+                                   " param array mismatch (float[" +
+                                   hp1.length + "] != null)");
+            }
+
+            return -1;
+        } else if (hp1.length != hp2.length) {
+            if (verbose) {
+                System.err.println("Histogram#" + num +
+                                   " param array mismatch (float[" +
+                                   hp1.length + "] != float[" + hp2.length +
+                                   "])");
+            }
+
+            return (hp2.length - hp1.length);
+        }
+
+        for (int i = 0; i < hp1.length; i++) {
+            if (hp1[i] < hp2[i] - delta || hp1[i] > hp2[i] + delta) {
+                if (verbose) {
+                    System.err.println("Histogram#" + num + " \"" +
+                                       HVHistogram.getParameterName(i) +
+                                       "\" mismatch (" + hp1[i] + " != " +
+                                       hp2[i] + ")");
+                }
+                return (hp1[i] < hp2[i] - delta ? 1 : -1);
+            }
+        }
+
+        float[] x1 = h1.getXVals();
+        float[] x2 = h2.getXVals();
+
+        if (x1 == null) {
+            if (x2 != null) {
+                if (verbose) {
+                    System.err.println("Histogram#" + num +
+                                       " charge array mismatch" +
+                                       " (null != float[" + x2.length + "])");
+                }
+
+                return 1;
+            }
+
+            return 0;
+        } else if (x2 == null) {
+            if (verbose) {
+                System.err.println("Histogram#" + num +
+                                   " charge array mismatch (float[" +
+                                   x1.length + "] != null)");
+            }
+
+            return -1;
+        } else if (x1.length != x2.length) {
+            if (verbose) {
+                System.err.println("Histogram#" + num +
+                                   " charge array mismatch (float[" +
+                                   x1.length + "] != float[" + x2.length +
+                                   "])");
+            }
+
+            return (x2.length - x1.length);
+        }
+
+        float[] y1 = h1.getYVals();
+        float[] y2 = h2.getYVals();
+
+        if (y1 == null) {
+            if (y2 != null) {
+                if (verbose) {
+                    System.err.println("Histogram#" + num +
+                                       " count array mismatch" +
+                                       " (null != float[" + y2.length + "])");
+                }
+
+                return 1;
+            }
+
+            return 0;
+        } else if (y2 == null) {
+            if (verbose) {
+                System.err.println("Histogram#" + num +
+                                   " count array mismatch (float[" +
+                                   y1.length + "] != null)");
+            }
+
+            return -1;
+        } else if (y1.length != y2.length) {
+            if (verbose) {
+                System.err.println("Histogram#" + num +
+                                   " count array mismatch (float[" +
+                                   y1.length + "] != float[" + y2.length +
+                                   "])");
+            }
+
+            return (y2.length - y1.length);
+        }
+
+        for (int i = 0; i < x1.length; i++) {
+            if (x1[i] < x2[i] - delta || x1[i] > x2[i] + delta) {
+                if (verbose) {
+                    System.err.println("Histogram#" + num + " charge#" + i +
+                                       " mismatch (" + x1[i] + " != " + x2[i] +
+                                       ")");
+                }
+                return (x1[i] < x2[i] - delta ? 1 : -1);
+            }
+
+            if (y1[i] < y2[i] - delta || y1[i] > y2[i] + delta) {
+                if (verbose) {
+                    System.err.println("Histogram#" + num + " count#" + i +
+                                       " mismatch (" + y1[i] + " != " + y2[i] +
+                                       ")");
+                }
+                return (y1[i] < y2[i] - delta ? 1 : -1);
+            }
+        }
+
+        return 0;
+    }
+
+    /**
+     * Compare high-voltage gain calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int compareHvGains(Calibrator c1, Calibrator c2,
+                                      boolean verbose)
+    {
+        final boolean hasHvGain = c1.hasHvGainFit();
+        if (hasHvGain != c2.hasHvGainFit()) {
+            if (verbose) {
+                System.err.println("High-voltage gain mismatch (" +
+                                   (hasHvGain ? "present" : "absent") +
+                                   " != " + (c2.hasHvGainFit() ?
+                                             "present" : "absent") + ")");
+            }
+            return (hasHvGain ? -1 : 1);
+        }
+
+        final double delta = 0.00000001;
+
+        final double s1 = c1.getHvGainSlope();
+        final double s2 = c2.getHvGainSlope();
+        if (s1 < s2 - delta || s1 > s2 + delta) {
+            if (verbose) {
+                System.err.println("high-voltage slope mismatch (" +
+                                   s1 + " != " + s2 + ")");
+            }
+            return (int) (s1 < s2 - delta ? 1 : -1);
+        }
+
+        final double i1 = c1.getHvGainIntercept();
+        final double i2 = c2.getHvGainIntercept();
+        if (i1 < i2 - delta || i1 > i2 + delta) {
+            if (verbose) {
+                System.err.println("high-voltage intercept mismatch (" +
+                                   i1 + " != " + i2 + ")");
+            }
+            return (int) (i1 < i2 - delta ? 1 : -1);
+        }
+
+        return 0;
+    }
+
+    /**
+     * Compare high-voltage histogram data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int compareHvHistos(Calibrator c1, Calibrator c2,
+                                       boolean verbose)
+    {
+        Iterator i1 = c1.getHvHistogramKeys();
+        Iterator i2 = c2.getHvHistogramKeys();
+        if (i1 == null) {
+            if (i2 != null) {
+                int num2 = 0;
+                while (i2.hasNext()) {
+                    num2++;
+                    i2.next();
+                }
+
+                if (verbose) {
+                    System.err.println("Mismatch in number of histograms (" +
+                                       "null !=" + num2 + ")");
+                }
+
+                return 1;
+            }
+
+            return 0;
+        } else if (i2 == null) {
+            int num1 = 0;
+            while (i1.hasNext()) {
+                num1++;
+                i1.next();
+            }
+
+            if (verbose) {
+                System.err.println("Mismatch in number of histograms (" +
+                                   num1 + " != null)");
+            }
+
+            return -1;
+        }
+
+        int cmp = 0;
+
+        int num = 0;
+        boolean notDone = true;
+        while (notDone) {
+            if (!i1.hasNext()) {
+                if (i2.hasNext()) {
+                    int num2 = num;
+                    while (i2.hasNext()) {
+                        num2++;
+                        i2.next();
+                    }
+
+                    if (verbose) {
+                        System.err.println("Mismatch in number of histograms" +
+                                           " (" + num + " != " + num2 + ")");
+                    }
+
+                    return 1;
+                }
+
+                break;
+            } else if (!i2.hasNext()) {
+                int num1 = num;
+                while (i1.hasNext()) {
+                    num1++;
+                    i1.next();
+                }
+
+                if (verbose) {
+                    System.err.println("Mismatch in number of histograms (" +
+                                       num1 + " != " + num + ")");
+                }
+
+                return -1;
+            }
+
+            HVHistogram h1 = c1.getHvHistogram((Short) i1.next());
+            HVHistogram h2 = c2.getHvHistogram((Short) i2.next());
+
+            cmp = compareHisto(h1, h2, num, verbose);
+
+            notDone = (cmp == 0);
+            num++;
+        }
+
+        return cmp;
+    }
+
+    /**
+     * Compare pulser calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int comparePulsers(Calibrator c1, Calibrator c2,
+                                      boolean verbose)
+    {
+        if (!c1.getPulserFitModel().equals(c2.getPulserFitModel())) {
+            if (verbose) {
+                System.err.println("Pulser model mismatch (" +
+                                   c1.getPulserFitModel() + " != " +
+                                   c2.getPulserFitModel() + ")");
+            }
+            return c1.getPulserFitModel().compareTo(c2.getPulserFitModel());
+        }
+
+        Iterator i1 = c1.getPulserFitKeys();
+        Iterator i2 = c2.getPulserFitKeys();
+
+        int num = 0;
+        while (i1.hasNext()) {
+            if (!i2.hasNext()) {
+                if (verbose) {
+                    int num1 = num;
+                    while (i1.hasNext()) {
+                        num1++;
+                        i1.next();
+                    }
+
+                    System.err.println("Pulser entry length mismatch (" +
+                                       num1 + " != " + num + ")");
+                }
+                return -1;
+            }
+
+            final String p1 = (String) i1.next();
+            final String p2 = (String) i2.next();
+            if (!p1.equals(p2)) {
+                if (verbose) {
+                    System.err.println("Pulser parameter#" + num +
+                                       " mismatch (" + p1 + " != " + p2 + ")");
+                }
+                return p1.compareTo(p2);
+            }
+
+            if (p1.equals("model")) {
+                continue;
+            }
+
+            final double v1 = c1.getPulserFitParam(p1);
+            final double v2 = c1.getPulserFitParam(p2);
+            final double delta = 0.00000001;
+            if (v1 < v2 - delta || v1 > v2 + delta) {
+                if (verbose) {
+                    System.err.println("Pulser parameter " + p1 +
+                                       " mismatch (" + v1 + " != " + v2 + ")");
+                }
+                return (int) (v1 < v2 - delta ? 1 : -1);
+            }
+
+            num++;
+        }
+
+        if (i2.hasNext()) {
+            if (verbose) {
+                int num2 = num;
+                while (i2.hasNext()) {
+                    num2++;
+                    i2.next();
+                }
+
+                System.err.println("Pulser entry length mismatch (" +
+                                   num + " != " + num2 + ")");
+            }
+            return 1;
+        }
+
+        return 0;
+    }
+
+    /**
+     * Compare main calibration data.
+     *
+     * @param c1 first set of calibration data
+     * @param c2 second set of calibration data
+     * @param verbose <tt>true</tt> to print reason for inequality
+     *
+     * @return <tt>0</tt> if the arguments are equal, <tt>-1</tt> if
+     *         <tt>c1</tt> is greater than <tt>c2</tt>, or <tt>-1</tt> if
+     *         <tt>c1</tt> is less than <tt>c2</tt>
+     */
+    private static int compareMain(Calibrator c1, Calibrator c2,
+                                   boolean verbose)
+    {
+        if (!c1.getDOMId().equals(c2.getDOMId())) {
+            if (verbose) {
+                System.err.println("DOMId mismatch (" + c1.getDOMId() +
+                                   " != " + c2.getDOMId() + ")");
+            }
+            return c1.getDOMId().compareTo(c2.getDOMId());
+        }
+
+        final Calendar cal1 = c1.getCalendar();
+        final Calendar cal2 = c2.getCalendar();
+        int calCmp = cal1.get(Calendar.YEAR) - cal2.get(Calendar.YEAR);
+        if (calCmp == 0) {
+            calCmp = cal1.get(Calendar.MONTH) - cal2.get(Calendar.MONTH);
+            if (calCmp == 0) {
+                calCmp = cal1.get(Calendar.DATE) - cal2.get(Calendar.DATE);
+            }
+        }
+        if (calCmp != 0) {
+            if (verbose) {
+                System.err.println("Calendar mismatch (" +
+                                   cal1.get(Calendar.YEAR) + "/" +
+                                   cal1.get(Calendar.MONTH) + "/" +
+                                   cal1.get(Calendar.DATE) + " != " +
+                                   cal2.get(Calendar.YEAR) + "/" +
+                                   cal2.get(Calendar.MONTH) + "/" +
+                                   cal2.get(Calendar.DATE) + ")");
+            }
+            return calCmp;
+        }
+
+        final double t1 = c1.getTemperature();
+        final double t2 = c2.getTemperature();
+        final double delta = 0.01;
+        if (t1 < t2 - delta || t1 > t2 + delta) {
+            if (verbose) {
+                System.err.println("Temperature mismatch (" + t1 + " != " +
+                                   t2 + ")");
+            }
+            return (int) (t1 < t2 - delta ? 1 : -1);
+        }
+
+        return 0;
+    }
+
+    /**
+     * Silly implementation to check for equality to another
+     * CalibratorComparator.
+     *
+     * @param obj object being compared
+     *
+     * @return <tt>true</tt> if the object is a CalibratorComparator
+     */
+    public boolean equals(Object obj)
+    {
+        if (obj == null || !(obj instanceof CalibratorComparator)) {
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Silly implementation to provide lame hash code.
+     *
+     * @return class hash code
+     */
+    public int hashCode()
+    {
+        return getClass().hashCode();
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/CalibratorDB.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/CalibratorDB.java:1.5
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/src/icecube/daq/domcal/CalibratorDB.java	Mon Apr 25 12:40:07 2005
@@ -0,0 +1,1556 @@
+package icecube.daq.domcal;
+
+import icecube.daq.db.domprodtest.DOMProdTestDB;
+import icecube.daq.db.domprodtest.DOMProdTestException;
+import icecube.daq.db.domprodtest.DOMProdTestUtil;
+import icecube.daq.db.domprodtest.DOMProduct;
+import icecube.daq.db.domprodtest.Laboratory;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+
+import java.sql.Connection;
+import java.sql.Date;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import java.text.FieldPosition;
+import java.text.SimpleDateFormat;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Properties;
+
+import org.apache.log4j.Logger;
+
+/**
+ * Database interface for Calibrator.
+ */
+public class CalibratorDB
+    extends DOMProdTestDB
+{
+    /** Log message handler. */
+    private static Logger logger = Logger.getLogger(CalibratorDB.class);
+
+    /** List of model types. */
+    private static ModelType modelType;
+    /** List of parameter types. */
+    private static ParamType paramType;
+
+    /** Lab where results are being saved. */
+    private Laboratory lab;
+
+    /**
+     * Constructor.
+     *
+     * @throws DOMProdTestException if there is a problem creating the object
+     * @throws IOException if there is a problem reading the properties.
+     * @throws SQLException if there is a problem initializing the database.
+     */
+    public CalibratorDB()
+        throws DOMProdTestException, IOException, SQLException
+    {
+        super();
+    }
+
+    /**
+     * Constructor.
+     *
+     * @param props properties used to initialize the database connection
+     *
+     * @throws DOMProdTestException if there is a problem creating the object
+     * @throws IOException if there is a problem reading the properties.
+     * @throws SQLException if there is a problem initializing the database.
+     */
+    public CalibratorDB(Properties props)
+        throws DOMProdTestException, IOException, SQLException
+    {
+        super(props);
+    }
+
+    /**
+     * Clear all cached entries.
+     */
+    public static void clearStatic()
+    {
+        modelType = null;
+        paramType = null;
+    }
+
+    /**
+     * Return a formatted creation date string.
+     *
+     * @param cal calibration data
+     *
+     * @return formatted creation date
+     */
+    private static final String formatDate(Calibrator cal)
+    {
+        SimpleDateFormat dateFmt = new SimpleDateFormat("MMM-dd-yyyy");
+        StringBuffer dateBuf = new StringBuffer();
+        FieldPosition fldPos = new FieldPosition(0);
+
+        dateFmt.format(cal.getCalendar().getTime(), dateBuf, fldPos);
+
+        return dateBuf.toString();
+    }
+
+    /**
+     * Return a formatted temperature string.
+     *
+     * @param cal calibration data
+     *
+     * @return formatted temperature
+     */
+    private static final String formatTemperature(Calibrator cal)
+    {
+        final String dblStr = Double.toString(cal.getTemperature());
+        final int dotIdx = dblStr.indexOf('.');
+        if (dblStr.length() <= dotIdx + 3) {
+            return dblStr;
+        }
+        return dblStr.substring(0, dotIdx + 3);
+    }
+
+    /**
+     * Get model ID.
+     *
+     * @param stmt SQL statement
+     * @param model model name
+     *
+     * @return ID associated with model name
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private static final int getModelId(Statement stmt, String model)
+        throws DOMCalibrationException, SQLException
+    {
+        if (modelType == null) {
+            modelType = new ModelType(stmt);
+        }
+
+        int id = modelType.getId(model);
+        if (id == DOMProdTestUtil.ILLEGAL_ID) {
+            throw new DOMCalibrationException("Model \"" + model +
+                                              "\" not found");
+        }
+
+        return id;
+    }
+
+    /**
+     * Get parameter ID.
+     *
+     * @param stmt SQL statement
+     * @param param parameter name
+     *
+     * @return ID associated with parameter name
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private static final int getParamId(Statement stmt, String param)
+        throws DOMCalibrationException, SQLException
+    {
+        if (paramType == null) {
+            paramType = new ParamType(stmt);
+        }
+
+        int id = paramType.getId(param);
+        if (id == DOMProdTestUtil.ILLEGAL_ID) {
+            throw new DOMCalibrationException("Param \"" + param +
+                                              "\" not found");
+        }
+
+        return id;
+    }
+
+    /**
+     * Get the database <tt>prod_id</tt> for the calibrated DOM.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration object
+     *
+     * @return product ID
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private int getProductId(Statement stmt, Calibrator cal)
+        throws DOMCalibrationException, SQLException
+    {
+        int prodId = cal.getDOMProductId();
+        if (prodId < 0) {
+            DOMProduct prod;
+            try {
+                prod = new DOMProduct(stmt, cal.getDOMId());
+            } catch (DOMProdTestException dpte) {
+                throw new DOMCalibrationException("Couldn't get DOM \"" +
+                                                  cal.getDOMId() + "\": " +
+                                                  dpte.getMessage());
+            }
+
+            cal.setDOMProduct(prod);
+            prodId = cal.getDOMProductId();
+            if (prodId < 0) {
+                final String errMsg = "No database entry for DOM \"" +
+                    cal.getDOMId() + "\"";
+                throw new DOMCalibrationException(errMsg);
+            }
+        }
+
+        return prodId;
+    }
+
+    /**
+     * Load calibration data.
+     *
+     * @param mbSerial mainboard serial number of DOM being loaded
+     * @param date date of data being loaded
+     * @param temp temperature of data being loaded
+     *
+     * @return loaded data
+     *
+     * @throws DOMCalibrationException if an argument is invalid
+     * @throws SQLException if there is a database problem
+     */
+    public Calibrator load(String mbSerial, java.util.Date date, double temp)
+        throws DOMCalibrationException, SQLException
+    {
+        Calibrator cal = new Calibrator();
+        load(cal, mbSerial, date, temp);
+        return cal;
+    }
+
+    /**
+     * Load calibration data.
+     *
+     * @param cal calibration object to be filled
+     * @param mbSerial mainboard serial number of DOM being loaded
+     * @param date date of data being loaded
+     * @param temp temperature of data being loaded
+     *
+     * @throws DOMCalibrationException if an argument is invalid
+     * @throws SQLException if there is a database problem
+     */
+    public void load(Calibrator cal, String mbSerial, java.util.Date date,
+                     double temp)
+        throws DOMCalibrationException, SQLException
+    {
+        Connection conn;
+        Statement stmt;
+
+        conn = getConnection();
+        stmt = getStatement(conn);
+
+        try {
+            loadMain(stmt, cal, mbSerial, date, temp);
+            loadADCs(stmt, cal);
+            loadDACs(stmt, cal);
+            loadPulser(stmt, cal);
+            loadATWDs(stmt, cal);
+            loadAmpGain(stmt, cal);
+            loadATWDFreqs(stmt, cal);
+            loadHvGain(stmt, cal);
+            loadHvHisto(stmt, cal);
+        } finally {
+            try {
+                stmt.close();
+            } catch (SQLException se) {
+                // ignore errors on close
+            }
+
+            try {
+                conn.close();
+            } catch (SQLException se) {
+                // ignore errors on close
+            }
+        }
+    }
+
+    /**
+     * Load ADC data from database.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     *
+     * @throws SQLException if there is a database problem
+     */
+    private void loadADCs(Statement stmt, Calibrator cal)
+        throws SQLException
+    {
+        final String qStr =
+            "select channel,value from DOMCal_ADC where domcal_id=" +
+            cal.getDOMCalId() + " order by channel desc";
+
+        ResultSet rs = stmt.executeQuery(qStr);
+
+        int[] adcs = null;
+        while (rs.next()) {
+            final int channel = rs.getInt(1);
+            final int value = rs.getInt(2);
+
+            if (adcs == null) {
+                adcs = new int[channel + 1];
+            }
+
+            adcs[channel] = value;
+        }
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+
+        if (adcs != null) {
+            cal.setADCs(adcs);
+        }
+    }
+
+    /**
+     * Load ATWD frequency data from database.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     *
+     * @throws SQLException if there is a database problem
+     */
+    private void loadATWDFreqs(Statement stmt, Calibrator cal)
+        throws SQLException
+    {
+        HashMap[] freqs = null;
+
+        final String qStr =
+            "select da.chip,dm.name,da.fit_regression" +
+            " from DOMCal_ATWDFreq da,DOMCal_Model dm where da.domcal_id=" +
+            cal.getDOMCalId() + " and da.dc_model_id=dm.dc_model_id" +
+            " order by chip desc";
+
+        ResultSet rs = stmt.executeQuery(qStr);
+        while (rs.next()) {
+            final int chip = rs.getInt(1);
+            final String model = rs.getString(2);
+            final double regression = rs.getDouble(3);
+
+            if (freqs == null) {
+                freqs = new HashMap[chip + 1];
+
+                for (int i = 0; i <= chip; i++) {
+                    freqs[i] = null;
+                }
+            }
+
+            if (freqs[chip] == null) {
+                freqs[chip] = new HashMap();
+            }
+
+            freqs[chip].put("model", model);
+            freqs[chip].put("r", new Double(regression));
+        }
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+
+        if (freqs != null) {
+            final String pStr = "select dap.chip,dp.name,dap.value" +
+                " from DOMCal_ATWDFreqParam dap,DOMCal_Param dp" +
+                " where dap.domcal_id=" + cal.getDOMCalId() +
+                " and dap.dc_param_id=dp.dc_param_id order by chip desc";
+
+            rs = stmt.executeQuery(pStr);
+            while (rs.next()) {
+                final int chip = rs.getInt(1);
+                final String name = rs.getString(2);
+                final double value = rs.getDouble(3);
+
+                freqs[chip].put(name, new Double(value));
+            }
+
+            try {
+                rs.close();
+            } catch (SQLException se) {
+                // ignore errors on close
+            }
+
+            cal.setATWDFrequencyFits(freqs);
+        }
+    }
+
+    /**
+     * Load ATWD data from database.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void loadATWDs(Statement stmt, Calibrator cal)
+        throws DOMCalibrationException, SQLException
+    {
+        HashMap[][] atwds = null;
+
+        final String qStr =
+            "select da.channel,da.bin,dm.name,da.fit_regression" +
+            " from DOMCal_ATWD da,DOMCal_Model dm where da.domcal_id=" +
+            cal.getDOMCalId() + " and da.dc_model_id=dm.dc_model_id" +
+            " order by channel desc,bin desc";
+
+        ResultSet rs = stmt.executeQuery(qStr);
+        while (rs.next()) {
+            final int channel = rs.getInt(1);
+            final int bin = rs.getInt(2);
+            final String model = rs.getString(3);
+            final double regression = rs.getDouble(4);
+
+            if (atwds == null) {
+                atwds = new HashMap[channel + 1][];
+
+                for (int i = 0; i <= channel; i++) {
+                    atwds[i] = null;
+                }
+            }
+
+            if (atwds[channel] == null) {
+                atwds[channel] = new HashMap[bin + 1];
+
+                for (int i = 0; i <= bin; i++) {
+                    atwds[channel][bin] = null;
+                }
+            }
+
+            if (atwds[channel][bin] == null) {
+                atwds[channel][bin] = new HashMap();
+            }
+
+            atwds[channel][bin].put("model", model);
+            atwds[channel][bin].put("r", new Double(regression));
+        }
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+
+        if (atwds != null) {
+            final String pStr =
+                "select dap.channel,dap.bin,dp.name,dap.value" +
+                " from DOMCal_ATWDParam dap,DOMCal_Param dp" +
+                " where dap.domcal_id=" + cal.getDOMCalId() +
+                " and dap.dc_param_id=dp.dc_param_id" +
+                " order by channel desc,bin desc";
+
+            rs = stmt.executeQuery(pStr);
+            while (rs.next()) {
+                final int channel = rs.getInt(1);
+                final int bin = rs.getInt(2);
+                final String name = rs.getString(3);
+                final double value = rs.getDouble(4);
+
+                atwds[channel][bin].put(name, new Double(value));
+            }
+
+            try {
+                rs.close();
+            } catch (SQLException se) {
+                // ignore errors on close
+            }
+
+            cal.setATWDFits(atwds);
+        }
+    }
+
+    /**
+     * Load amplifier gain data from database.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void loadAmpGain(Statement stmt, Calibrator cal)
+        throws DOMCalibrationException, SQLException
+    {
+        final String qStr = "select channel,gain,error from DOMCal_AmpGain" +
+            " where domcal_id=" + cal.getDOMCalId() + " order by channel desc";
+
+        ResultSet rs = stmt.executeQuery(qStr);
+
+        double[] ampGain = null;
+        double[] ampGainErr = null;
+        while (rs.next()) {
+            final int channel = rs.getInt(1);
+            final double gain = rs.getDouble(2);
+            final double error = rs.getDouble(3);
+
+            if (ampGain == null) {
+                ampGain = new double[channel + 1];
+                ampGainErr = new double[channel + 1];
+            }
+
+            ampGain[channel] = gain;
+            ampGainErr[channel] = error;
+        }
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+
+        if (ampGain != null) {
+            cal.setAmpGain(ampGain, ampGainErr);
+        }
+    }
+
+    /**
+     * Load DAC data from database.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void loadDACs(Statement stmt, Calibrator cal)
+        throws DOMCalibrationException, SQLException
+    {
+        final String qStr =
+            "select channel,value from DOMCal_DAC where domcal_id=" +
+            cal.getDOMCalId() + " order by channel desc";
+
+        ResultSet rs = stmt.executeQuery(qStr);
+
+        int[] dacs = null;
+        while (rs.next()) {
+            final int channel = rs.getInt(1);
+            final int value = rs.getInt(2);
+
+            if (dacs == null) {
+                dacs = new int[channel + 1];
+            }
+
+            dacs[channel] = value;
+        }
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+
+        if (dacs != null) {
+            cal.setDACs(dacs);
+        }
+    }
+
+    /**
+     * Load high-voltage gain data from database.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void loadHvGain(Statement stmt, Calibrator cal)
+        throws DOMCalibrationException, SQLException
+    {
+        final String qStr = "select slope,intercept,regression" +
+            " from DOMCal_HvGain where domcal_id=" + cal.getDOMCalId();
+
+        ResultSet rs = stmt.executeQuery(qStr);
+
+        double slope = Double.NaN;
+        double intercept = Double.NaN;
+        double regression = Double.NaN;
+
+        boolean found = false;
+        if (rs.next()) {
+            slope = rs.getDouble(1);
+            intercept = rs.getDouble(2);
+            regression = rs.getDouble(3);
+            found = true;
+        }
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+
+        if (found) {
+            cal.setHvGain(slope, intercept, regression);
+        }
+    }
+
+    /**
+     * Load high-voltage histogram data from database.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void loadHvHisto(Statement stmt, Calibrator cal)
+        throws DOMCalibrationException, SQLException
+    {
+        ArrayList list = new ArrayList();
+        for (int i = 0; true; i++) {
+            final String qStr = "select voltage,convergent,pv,noise_rate" +
+                ",is_filled from DOMCal_ChargeMain where domcal_id=" +
+                cal.getDOMCalId() + " and dc_histo_num=" + i;
+
+            ResultSet rs = stmt.executeQuery(qStr);
+
+            short voltage = -1;
+            boolean convergent = false;
+            float pv = Float.NaN;
+            float noiseRate = Float.NaN;
+            boolean isFilled = false;
+
+            boolean found = false;
+            if (rs.next()) {
+                voltage = rs.getShort(1);
+                convergent = rs.getBoolean(2);
+                pv = rs.getFloat(3);
+                noiseRate = rs.getFloat(4);
+                isFilled = rs.getBoolean(5);
+                found = true;
+            }
+
+            try {
+                rs.close();
+            } catch (SQLException se) {
+                // ignore errors on close
+            }
+
+            if (!found) {
+                break;
+            }
+
+            float[] params = new float[5];
+
+            final String pStr = "select dp.name,cp.value" +
+                " from DOMCal_ChargeParam cp,DOMCal_Param dp" +
+                " where cp.domcal_id=" + cal.getDOMCalId() +
+                " and cp.dc_histo_num=" + i +
+                " and cp.dc_param_id=dp.dc_param_id";
+
+            rs = stmt.executeQuery(pStr);
+            while (rs.next()) {
+                final String name = rs.getString(1);
+                final float value = rs.getFloat(2);
+
+                boolean foundParam = false;
+                for (int j = 0; !foundParam && j < params.length; j++) {
+                    final String paramName = HVHistogram.getParameterName(j);
+                    if (name.equals(paramName)) {
+                        params[j] = value;
+                        foundParam = true;
+                    }
+                }
+
+                if (!foundParam) {
+                    System.err.println("Unknown HvHistogram parameter \"" +
+                                       name + "\"");
+                }
+            }
+
+            try {
+                rs.close();
+            } catch (SQLException se) {
+                // ignore errors on close
+            }
+
+            final String dStr =
+                "select bin,charge,count from DOMCal_ChargeData" +
+                " where domcal_id=" + cal.getDOMCalId() +
+                " and dc_histo_num=" + i +
+                " order by bin desc";
+
+            rs = stmt.executeQuery(dStr);
+
+            float[] charge = null;
+            float[] count = null;
+            while (rs.next()) {
+                final int bin = rs.getInt(1);
+                final float chg = rs.getFloat(2);
+                final float cnt = rs.getFloat(3);
+
+                if (charge == null) {
+                    charge = new float[bin + 1];
+                    count = new float[bin + 1];
+                }
+
+                charge[bin] = chg;
+                count[bin] = cnt;
+            }
+
+            try {
+                rs.close();
+            } catch (SQLException se) {
+                // ignore errors on close
+            }
+
+            list.add(new HVHistogram(voltage, params, charge, count,
+                                     convergent, pv, noiseRate, isFilled));
+        }
+
+        if (list.size() > 0) {
+            HVHistogram[] array = new HVHistogram[list.size()];
+            list.toArray(array);
+            cal.setHvHistograms(array);
+        }
+    }
+
+    /**
+     * Load main calibration data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration object to be filled
+     * @param mbSerial mainboard serial number of DOM being loaded
+     * @param date date of data being loaded
+     * @param temp temperature of data being loaded
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    public void loadMain(Statement stmt, Calibrator cal, String mbSerial,
+                         java.util.Date date, double temp)
+        throws DOMCalibrationException, SQLException
+    {
+        DOMProduct dcProd;
+        try {
+            dcProd = new DOMProduct(stmt, mbSerial);
+        } catch (DOMProdTestException dpte) {
+            throw new DOMCalibrationException("Couldn't get DOM \"" +
+                                              mbSerial + "\": " +
+                                              dpte.getMessage());
+        }
+
+        java.sql.Date sqlDate;
+        if (date == null) {
+            sqlDate = null;
+        } else {
+            sqlDate = new java.sql.Date(date.getTime());
+        }
+
+        final String qStr =
+            "select domcal_id,date,temperature from DOMCalibration" +
+            " where prod_id=" + dcProd.getId() +
+            (sqlDate == null ? "" : " and date<=" +
+             DOMProdTestUtil.quoteString(sqlDate.toString())) +
+            (Double.isNaN(temp) ? "" : " and temperature>=" + (temp - 5.0) +
+             " and temperature<=" + (temp + 5.0)) +
+            " order by date desc";
+
+        ResultSet rs = stmt.executeQuery(qStr);
+
+        boolean hasNext = rs.next();
+
+        final int domcalId;
+        final Date dcDate;
+        final double dcTemp;
+
+        if (!hasNext) {
+            domcalId = Integer.MIN_VALUE;
+            dcDate = null;
+            dcTemp = 0.0;
+        } else {
+            domcalId = rs.getInt(1);
+            dcDate = rs.getDate(2);
+            dcTemp = rs.getDouble(3);
+        }
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+
+        if (!hasNext) {
+            final String errMsg = "No calibration information for DOM " +
+                mbSerial + (date == null ? "" : ", date " + date) +
+                (Double.isNaN(temp) ? "" : ", temperature " + temp);
+            throw new DOMCalibrationException(errMsg);
+        }
+
+        cal.setMain(domcalId, mbSerial, dcProd, dcDate, dcTemp);
+    }
+
+    /**
+     * Load pulser data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void loadPulser(Statement stmt, Calibrator cal)
+        throws DOMCalibrationException, SQLException
+    {
+        final String qStr = "select dm.name,dp.fit_regression" +
+            " from DOMCal_Pulser dp,DOMCal_Model dm where dp.domcal_id=" +
+            cal.getDOMCalId() + " and dp.dc_model_id=dm.dc_model_id";
+
+        ResultSet rs = stmt.executeQuery(qStr);
+        if (!rs.next()) {
+            final String errMsg = "No Pulser data for DOM " + cal.getDOMId() +
+                ", date " + cal.getCalendar() +
+                ", temperature " + cal.getTemperature();
+            throw new DOMCalibrationException(errMsg);
+        }
+
+        final String model = rs.getString(1);
+        final double regression = rs.getDouble(2);
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+
+        cal.setPulserFitModel(model);
+        cal.setPulserFitParam("r", regression);
+
+        final String pStr = "select dp.name,dpp.value" +
+            " from DOMCal_PulserParam dpp,DOMCal_Param dp" +
+            " where dpp.domcal_id=" + cal.getDOMCalId() +
+            " and dpp.dc_param_id=dp.dc_param_id";
+
+        rs = stmt.executeQuery(pStr);
+        while (rs.next()) {
+            final String param = rs.getString(1);
+            final double value = rs.getDouble(2);
+            cal.setPulserFitParam(param, value);
+        }
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+    }
+
+    /**
+     * Save specified file to the database.
+     *
+     * @param fileName file name
+     * @param logger error logger
+     *
+     * @throws DOMProdTestException if there is a problem creating the object
+     * @throws IOException if there is a problem reading the properties.
+     * @throws SQLException if there is a problem initializing the database.
+     */
+    public static final void save(String fileName, Logger logger)
+        throws DOMCalibrationException, IOException, SQLException
+    {
+        save(fileName, logger, null, false);
+    }
+
+    /**
+     * Save specified file to the database.
+     *
+     * @param fileName file name
+     * @param logger error logger
+     * @param calDB database interface (one will be created if this
+     *              is not <code>null</code>
+     * @param verbose <code>true</code> for verbose comparison
+     *
+     * @throws DOMProdTestException if there is a problem creating the object
+     * @throws IOException if there is a problem reading the properties.
+     * @throws SQLException if there is a problem initializing the database.
+     */
+    public static final void save(String fileName, Logger logger,
+                                  CalibratorDB calDB, boolean verbose)
+        throws DOMCalibrationException, IOException, SQLException
+    {
+        FileInputStream fis = new FileInputStream(fileName);
+
+        Calibrator cal = new Calibrator(fis, calDB);
+
+        try {
+            fis.close();
+        } catch (IOException ioe) {
+            // ignore errors on close
+        }
+
+        Calibrator dbCal;
+        try {
+            dbCal = new Calibrator(cal.getDOMId(), cal.getCalendar().getTime(),
+                                   cal.getTemperature(), calDB);
+        } catch (DOMCalibrationException dce) {
+            dbCal = null;
+        }
+
+        if (dbCal != null &&
+            CalibratorComparator.compare(cal, dbCal, verbose) == 0)
+        {
+            logger.info("Calibration data for DOM " + cal.getDOMId() +
+                        "/" + formatDate(cal) + "/" +
+                        formatTemperature(cal) + " degrees already in DB");
+        } else {
+            cal.save();
+            cal.close();
+            logger.info("Saved calibration data for DOM " + cal.getDOMId() +
+                        "/" + formatDate(cal) + "/" + formatTemperature(cal) +
+                        " degrees");
+        }
+
+        if (dbCal != null) {
+            dbCal.close();
+        }
+    }
+
+    /**
+     * Save calibration data.
+     *
+     * @param cal calibration data
+     *
+     * @return ID of inserted data
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    public int save(Calibrator cal)
+        throws DOMCalibrationException, SQLException
+    {
+        Connection conn;
+        Statement stmt;
+
+        conn = getConnection();
+        stmt = getStatement(conn);
+
+        int id = DOMProdTestUtil.ILLEGAL_ID;
+        try {
+            if (lab == null) {
+                try {
+                    lab = new Laboratory(stmt);
+                } catch (DOMProdTestException dpte) {
+                    final String errMsg = "Couldn't get local laboratory: " +
+                        dpte.getMessage();
+                    throw new DOMCalibrationException(errMsg);
+                }
+            }
+
+            int domcalId = saveMain(stmt, cal);
+            saveADCs(stmt, cal, domcalId);
+            saveDACs(stmt, cal, domcalId);
+            savePulser(stmt, cal, domcalId);
+            saveATWDs(stmt, cal, domcalId);
+            saveAmpGain(stmt, cal, domcalId);
+            saveATWDFreqs(stmt, cal, domcalId);
+            saveHvGain(stmt, cal, domcalId);
+            saveHvHisto(stmt, cal, domcalId);
+
+            cal.setDOMCalId(domcalId);
+        } finally {
+            try {
+                stmt.close();
+            } catch (SQLException se) {
+                // ignore errors on close
+            }
+
+            try {
+                conn.close();
+            } catch (SQLException se) {
+                // ignore errors on close
+            }
+        }
+
+        return id;
+    }
+
+    /**
+     * Save ADC data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     * @param domcalId ID of main calibration row in database
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void saveADCs(Statement stmt, Calibrator cal, int domcalId)
+        throws DOMCalibrationException, SQLException
+    {
+        final int len = cal.getNumberOfADCs();
+        for (int i = 0; i < len; i++) {
+            saveChanValueRow(stmt, "DOMCal_ADC", domcalId, i, cal.getADC(i));
+        }
+    }
+
+    /**
+     * Save ATWD data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     * @param domcalId ID of main calibration row in database
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void saveATWDs(Statement stmt, Calibrator cal, int domcalId)
+        throws DOMCalibrationException, SQLException
+    {
+        final int numChan = cal.getNumberOfATWDChannels();
+        for (int ch = 0; ch < numChan; ch++) {
+            if (ch == 3 || ch == 7) {
+                // channels 3 and 7 do not exist
+                continue;
+            }
+
+            final int numBins = cal.getNumberOfATWDBins(ch);
+            for (int bin = 0; bin < numBins; bin++) {
+                Iterator iter = cal.getATWDFitKeys(ch, bin);
+                if (iter == null) {
+                    continue;
+                }
+
+                HashMap params = new HashMap();
+                int modelId = DOMProdTestUtil.ILLEGAL_ID;
+                double regression = Double.NaN;
+
+                while (iter.hasNext()) {
+                    final String key = (String) iter.next();
+                    if (key.equals("model")) {
+                        final String model = cal.getATWDFitModel(ch, bin);
+                        modelId = getModelId(stmt, model);
+                        if (modelId == DOMProdTestUtil.ILLEGAL_ID) {
+                            logger.error("Unknown model \"" + model +
+                                         "\" for ATWD channel " + ch +
+                                         " bin " + bin);
+                            break;
+                        }
+                    } else if (key.equals("r")) {
+                        regression = cal.getATWDFitParam(ch, bin, key);
+                    } else {
+                        double val = cal.getATWDFitParam(ch, bin, key);
+                        params.put(key, new Double(val));
+                    }
+                }
+
+                if (modelId == DOMProdTestUtil.ILLEGAL_ID ||
+                    Double.isNaN(regression))
+                {
+                    continue;
+                }
+
+                final String iStr = "insert into DOMCal_ATWD(domcal_id" +
+                    ",channel,bin,dc_model_id,fit_regression)values(" +
+                    domcalId + "," + ch + "," + bin + "," + modelId + "," +
+                    regression + ")";
+
+                int rows;
+                try {
+                    rows = stmt.executeUpdate(iStr);
+                } catch (SQLException se) {
+                    throw new SQLException(iStr + ": " + se.getMessage());
+                }
+
+                if (rows != 1) {
+                    throw new SQLException("Expected to insert 1 row, not " +
+                                           rows);
+                }
+
+                Iterator pIter = params.entrySet().iterator();
+                while (pIter.hasNext()) {
+                    java.util.Map.Entry entry =
+                        (java.util.Map.Entry) pIter.next();
+
+                    final String key = (String) entry.getKey();
+
+                    int paramId = getParamId(stmt, key);
+                    if (paramId == DOMProdTestUtil.ILLEGAL_ID) {
+                        logger.error("Ignoring unknown ATWD parameter \"" +
+                                     key + "\"");
+                        continue;
+                    }
+
+                    final String pStr =
+                        "insert into DOMCal_ATWDParam(domcal_id,channel,bin" +
+                        ",dc_param_id,value)values(" + domcalId + "," +
+                        ch + "," + bin + "," +  paramId + "," +
+                        entry.getValue() + ")";
+
+                    try {
+                        rows = stmt.executeUpdate(pStr);
+                    } catch (SQLException se) {
+                        throw new SQLException(pStr + ": " + se.getMessage());
+                    }
+
+                    if (rows != 1) {
+                        throw new SQLException("Expected to insert 1 row" +
+                                               ", not " + rows);
+                    }
+                }
+            }
+        }
+    }
+
+    /**
+     * Save ATWD frequency data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     * @param domcalId ID of main calibration row in database
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void saveATWDFreqs(Statement stmt, Calibrator cal, int domcalId)
+        throws DOMCalibrationException, SQLException
+    {
+        final int num = cal.getNumberOfATWDFrequencyChips();
+        for (int i = 0; i < num; i++) {
+            Iterator iter = cal.getATWDFrequencyFitKeys(i);
+            if (iter == null) {
+                continue;
+            }
+
+            HashMap params = new HashMap();
+            int modelId = DOMProdTestUtil.ILLEGAL_ID;
+            double regression = Double.NaN;
+
+            while (iter.hasNext()) {
+                final String key = (String) iter.next();
+                if (key.equals("model")) {
+                    final String model = cal.getATWDFrequencyFitModel(i);
+                    modelId = getModelId(stmt, model);
+                    if (modelId == DOMProdTestUtil.ILLEGAL_ID) {
+                        logger.error("Unknown model \"" + model +
+                                     "\" for ATWD frequency chip " + i);
+                        break;
+                    }
+                } else if (key.equals("r")) {
+                    regression = cal.getATWDFrequencyFitParam(i, key);
+                } else {
+                    double val = cal.getATWDFrequencyFitParam(i, key);
+                    params.put(key, new Double(val));
+                }
+            }
+
+            if (modelId == DOMProdTestUtil.ILLEGAL_ID ||
+                Double.isNaN(regression))
+            {
+                continue;
+            }
+
+            final String iStr = "insert into DOMCal_ATWDFreq(domcal_id" +
+                ",chip,dc_model_id,fit_regression)values(" + domcalId +
+                "," + i + "," + modelId + "," + regression + ")";
+
+            int rows;
+            try {
+                rows = stmt.executeUpdate(iStr);
+            } catch (SQLException se) {
+                throw new SQLException(iStr + ": " + se.getMessage());
+            }
+
+            if (rows != 1) {
+                throw new SQLException("Expected to insert 1 row, not " +
+                                       rows);
+            }
+
+            Iterator pIter = params.entrySet().iterator();
+            while (pIter.hasNext()) {
+                java.util.Map.Entry entry =
+                    (java.util.Map.Entry) pIter.next();
+
+                final String key = (String) entry.getKey();
+
+                int paramId = getParamId(stmt, key);
+                if (paramId == DOMProdTestUtil.ILLEGAL_ID) {
+                    logger.error("Ignoring unknown ATWD parameter \"" +
+                                 key + "\"");
+                    continue;
+                }
+
+                final String pStr =
+                    "insert into DOMCal_ATWDFreqParam(domcal_id,chip" +
+                    ",dc_param_id,value)values(" + domcalId + "," +
+                    i + "," +  paramId + "," + entry.getValue() + ")";
+
+                try {
+                    rows = stmt.executeUpdate(pStr);
+                } catch (SQLException se) {
+                    throw new SQLException(pStr + ": " + se.getMessage());
+                }
+
+                if (rows != 1) {
+                    throw new SQLException("Expected to insert 1 row" +
+                                           ", not " + rows);
+                }
+            }
+        }
+    }
+
+    /**
+     * Save amplifier gain data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     * @param domcalId ID of main calibration row in database
+     *
+     * @throws SQLException if there is a database problem
+     */
+    private void saveAmpGain(Statement stmt, Calibrator cal, int domcalId)
+        throws SQLException
+    {
+        final int len = cal.getNumberOfAmplifierGainChannels();
+        for (int i = 0; i < len; i++) {
+            final String iStr =
+                "insert into DOMCal_AmpGain(domcal_id,channel,gain,error)" +
+                "values(" + domcalId + "," + i + "," +
+                cal.getAmplifierGain(i) + "," +
+                cal.getAmplifierGainError(i) + ")";
+
+            int rows;
+            try {
+                rows = stmt.executeUpdate(iStr);
+            } catch (SQLException se) {
+                throw new SQLException(iStr + ": " + se.getMessage());
+            }
+
+            if (rows != 1) {
+                throw new SQLException("Expected to insert 1 row, not " + rows);
+            }
+        }
+    }
+
+    /**
+     * Save channel/value row.
+     *
+     * @param stmt SQL statement
+     * @param tblName database table name
+     * @param domcalId ID of main calibration row in database
+     * @param channel channel being saved
+     * @param value value being saved
+     *
+     * @throws SQLException if there is a database problem
+     */
+    private void saveChanValueRow(Statement stmt, String tblName, int domcalId,
+                                  int channel, int value)
+        throws SQLException
+    {
+        final String iStr = "insert into " + tblName +
+            "(domcal_id,channel,value)values(" + domcalId + "," + channel +
+            "," + value + ")";
+
+        int rows;
+        try {
+            rows = stmt.executeUpdate(iStr);
+        } catch (SQLException se) {
+            throw new SQLException(iStr + ": " + se.getMessage());
+        }
+
+        if (rows != 1) {
+            throw new SQLException("Expected to insert 1 row, not " + rows);
+        }
+    }
+
+    /**
+     * Save DAC data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     * @param domcalId ID of main calibration row in database
+     *
+     * @throws SQLException if there is a database problem
+     */
+    private void saveDACs(Statement stmt, Calibrator cal, int domcalId)
+        throws SQLException
+    {
+        final int len = cal.getNumberOfDACs();
+        for (int i = 0; i < len; i++) {
+            saveChanValueRow(stmt, "DOMCal_DAC", domcalId, i, cal.getDAC(i));
+        }
+    }
+
+    /**
+     * Save HV/gain fit data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     * @param domcalId ID of main calibration row in database
+     *
+     * @throws SQLException if there is a database problem
+     */
+    private void saveHvGain(Statement stmt, Calibrator cal, int domcalId)
+        throws SQLException
+    {
+        if (!cal.hasHvGainFit()) {
+            return;
+        }
+
+        final String iStr =
+            "insert into DOMCal_HvGain(domcal_id,slope,intercept,regression)" +
+            "values(" + domcalId + "," + cal.getHvGainSlope() + "," +
+            cal.getHvGainIntercept() + "," + cal.getHvGainRegression() + ")";
+
+        int rows;
+        try {
+            rows = stmt.executeUpdate(iStr);
+        } catch (SQLException se) {
+            throw new SQLException(iStr + ": " + se.getMessage());
+        }
+
+        if (rows != 1) {
+            throw new SQLException("Expected to insert 1 row, not " + rows);
+        }
+    }
+
+    /**
+     * Save HV histogram data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     * @param domcalId ID of main calibration row in database
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void saveHvHisto(Statement stmt, Calibrator cal, int domcalId)
+        throws DOMCalibrationException, SQLException
+    {
+        Iterator iter = cal.getHvHistogramKeys();
+        if (iter == null) {
+            return;
+        }
+
+        int num = 0;
+        while (iter.hasNext()) {
+            HVHistogram histo = cal.getHvHistogram((Short) iter.next());
+
+            saveHvHistoMain(stmt, domcalId, histo, num);
+            saveHvHistoParams(stmt, domcalId, histo, num);
+            saveHvHistoData(stmt, domcalId, histo, num);
+
+            num++;
+        }
+    }
+
+    /**
+     * Save HV histogram data.
+     *
+     * @param stmt SQL statement
+     * @param domcalId ID of main calibration row in database
+     * @param histo histogram being saved
+     * @param num histogram number
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void saveHvHistoData(Statement stmt, int domcalId,
+                                 HVHistogram histo, int num)
+        throws DOMCalibrationException, SQLException
+    {
+        float[] charge = histo.getXVals();
+        float[] count = histo.getYVals();
+
+        for (int i = 0; i < charge.length; i++) {
+            final String iStr =
+                "insert into DOMCal_ChargeData(domcal_id,dc_histo_num" +
+                ",bin,charge,count)values(" + domcalId + "," + num + "," +
+                i + "," + charge[i] + "," + count[i] + ")";
+
+            int rows;
+            try {
+                rows = stmt.executeUpdate(iStr);
+            } catch (SQLException se) {
+                throw new SQLException(iStr + ": " + se.getMessage());
+            }
+
+            if (rows != 1) {
+                throw new SQLException("Expected to insert 1 row, not " + rows);
+            }
+        }
+    }
+
+    /**
+     * Save main HV histogram data.
+     *
+     * @param stmt SQL statement
+     * @param domcalId ID of main calibration row in database
+     * @param histo histogram being saved
+     * @param num histogram number
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void saveHvHistoMain(Statement stmt, int domcalId,
+                                 HVHistogram histo, int num)
+        throws DOMCalibrationException, SQLException
+    {
+        final String iStr =
+            "insert into DOMCal_ChargeMain(domcal_id,dc_histo_num,voltage," +
+            "convergent,pv,noise_rate,is_filled)values(" + domcalId + "," +
+            num + "," + histo.getVoltage() + "," +
+            (histo.isConvergent() ? 1 : 0) + "," + histo.getPV() + "," +
+            histo.getNoiseRate() + "," + (histo.isFilled() ? 1 : 0) + ")";
+
+        int rows;
+        try {
+            rows = stmt.executeUpdate(iStr);
+        } catch (SQLException se) {
+            throw new SQLException(iStr + ": " + se.getMessage());
+        }
+
+        if (rows != 1) {
+            throw new SQLException("Expected to insert 1 row, not " + rows);
+        }
+
+    }
+
+    /**
+     * Save HV histogram parameter data.
+     *
+     * @param stmt SQL statement
+     * @param domcalId ID of main calibration row in database
+     * @param histo histogram being saved
+     * @param num histogram number
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void saveHvHistoParams(Statement stmt, int domcalId,
+                                   HVHistogram histo, int num)
+        throws DOMCalibrationException, SQLException
+    {
+        float[] paramVals = histo.getFitParams();
+
+        for (int i = 0; i < paramVals.length; i++) {
+            int paramId = getParamId(stmt, HVHistogram.getParameterName(i));
+
+            final String iStr =
+                "insert into DOMCal_ChargeParam(domcal_id,dc_histo_num" +
+                ",dc_param_id,value)values(" + domcalId + "," + num + "," +
+                paramId + "," + paramVals[i] + ")";
+
+            int rows;
+            try {
+                rows = stmt.executeUpdate(iStr);
+            } catch (SQLException se) {
+                throw new SQLException(iStr + ": " + se.getMessage());
+            }
+
+            if (rows != 1) {
+                throw new SQLException("Expected to insert 1 row, not " + rows);
+            }
+        }
+    }
+
+    /**
+     * Save main calibration data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     *
+     * @return ID of inserted data
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private int saveMain(Statement stmt, Calibrator cal)
+        throws DOMCalibrationException, SQLException
+    {
+        String[] cols = new String[] {
+            "prod_id", "date", "temperature",
+        };
+        Object[] vals = new Object[] {
+            new Integer(getProductId(stmt, cal)),
+            new java.sql.Date(cal.getCalendar().getTimeInMillis()).toString(),
+            new Double(cal.getTemperature()),
+        };
+
+        return DOMProdTestUtil.addId(stmt, "DOMCalibration", "domcal_id",
+                                     cols, vals,
+                                     lab.getMinimumId(), lab.getMaximumId());
+    }
+
+    /**
+     * Save pulser data.
+     *
+     * @param stmt SQL statement
+     * @param cal calibration data
+     * @param domcalId ID of main calibration row in database
+     *
+     * @throws DOMCalibrationException if there is a problem with the data
+     * @throws SQLException if there is a database problem
+     */
+    private void savePulser(Statement stmt, Calibrator cal, int domcalId)
+        throws DOMCalibrationException, SQLException
+    {
+        final String model = cal.getPulserFitModel();
+        final int modelId = getModelId(stmt, model);
+
+        double regression = cal.getPulserFitParam("r");
+
+        final String iStr =
+            "insert into DOMCal_Pulser(domcal_id,dc_model_id,fit_regression)" +
+            "values(" + domcalId + "," + modelId + "," + regression + ")";
+
+        int rows;
+        try {
+            rows = stmt.executeUpdate(iStr);
+        } catch (SQLException se) {
+            throw new SQLException(iStr + ": " + se.getMessage());
+        }
+
+        if (rows != 1) {
+            throw new SQLException("Expected to insert 1 row, not " + rows);
+        }
+
+        Iterator keys = cal.getPulserFitKeys();
+        while (keys.hasNext()) {
+            final String key = (String) keys.next();
+            if (!key.equals("model") && !key.equals("r")) {
+                int paramId = getParamId(stmt, key);
+                if (paramId == DOMProdTestUtil.ILLEGAL_ID) {
+                    logger.error("Ignoring unknown pulser parameter \"" + key +
+                                 "\"");
+                    continue;
+                }
+
+                final String pStr =
+                    "insert into DOMCal_PulserParam(domcal_id,dc_param_id" +
+                    ",value)values(" + domcalId + "," + paramId + "," +
+                    cal.getPulserFitParam(key) + ")";
+
+                try {
+                    rows = stmt.executeUpdate(pStr);
+                } catch (SQLException se) {
+                    throw new SQLException(pStr + ": " + se.getMessage());
+                }
+
+                if (rows != 1) {
+                    throw new SQLException("Expected to insert 1 row, not " +
+                                           rows);
+                }
+            }
+        }
+    }
+
+    /**
+     * Set the laboratory used to generate unique IDs.
+     *
+     * @param lab laboratory
+     */
+    public void setLaboratory(Laboratory lab)
+    {
+        this.lab = lab;
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/DOMCal.java
diff -u dom-cal/src/icecube/daq/domcal/DOMCal.java:1.31 dom-cal/src/icecube/daq/domcal/DOMCal.java:1.34
--- dom-cal/src/icecube/daq/domcal/DOMCal.java:1.31	Sat Sep 25 08:29:19 2004
+++ dom-cal/src/icecube/daq/domcal/DOMCal.java	Wed May 25 12:53:40 2005
@@ -21,7 +21,6 @@
 import java.nio.ByteBuffer;
 import java.io.*;
 import java.util.*;
-import java.sql.*;
 
 public class DOMCal implements Runnable {
     
@@ -42,8 +41,6 @@
     private boolean calibrate;
     private boolean calibrateHv;
     private DOMCalRecord rec;
-    private Connection jdbc;
-    private Properties calProps;
     private String version;
 
     public DOMCal( String host, int port, String outDir ) {
@@ -64,22 +61,6 @@
         }
         this.calibrate = calibrate;
         this.calibrateHv = calibrateHv;
-        calProps = new Properties();
-        File propFile = new File(System.getProperty("user.home") +
-                "/.domcal.properties"
-        );
-        if (!propFile.exists()) {
-            propFile = new File("/usr/local/etc/domcal.properties");
-        }
-
-        try {
-            calProps.load(new FileInputStream(propFile));
-        } catch (IOException e) {
-            logger.warn("Cannot access the domcal.properties file " +
-                    "- using compiled defaults.",
-                    e
-            );
-        }
     }
 
     public void run() {
@@ -110,8 +91,26 @@
 
         if ( calibrate ) {
 
+            String id = null;
             logger.debug( "Beginning DOM calibration routine" );
             try {
+                //fetch hwid
+                com.send("crlf domid type type\r");
+                String idraw = com.receive( "\r\n> " );
+                StringTokenizer r = new StringTokenizer(idraw, " \r\n\t");
+                //Move past input string
+                for (int i = 0; i < 4; i++) {
+                    if (!r.hasMoreTokens()) {
+                        logger.error("Corrupt domId " + idraw + " returned from DOM -- exiting");
+                        return;
+                    }
+                    r.nextToken();
+                }
+                if (!r.hasMoreTokens()) {
+                    logger.error("Corrupt domId " + idraw + " returned from DOM -- exiting");
+                    return;
+                }
+                id = r.nextToken();
                 com.send( "s\" domcal\" find if ls endif\r" );
                 String ret = com.receive( "\r\n> " );
                 if ( ret.equals(  "s\" domcal\" find if ls endif\r\n> " ) ) {
@@ -149,7 +148,20 @@
             logger.debug( "Waiting for calibration to finish" );
 
             try {
-                com.receive( "\r\n> " );
+                //Create raw output file
+                PrintWriter out = new PrintWriter(new FileWriter(outDir + "domcal_" + id + ".out", false), false);
+                String termDat = "";
+                for (String dat = com.receiveAvailable(); !termDat.endsWith("\r\n> "); dat = com.receiveAvailable()) {
+                    out.print(dat);
+                    if (dat.length() > 5) termDat = dat;
+                    else termDat += dat;
+                    if (termDat.length() > 10) termDat = termDat.substring(termDat.length() - 8);
+                    try {
+                        Thread.sleep(100);
+                    } catch (InterruptedException e) {
+                    }
+                    out.flush();
+                }
             } catch ( IOException e ) {
                 logger.error( "IO Error occurred during calibration routine" );
                 die( e );
@@ -188,9 +200,10 @@
         String domId = rec.getDomId();
 
         logger.debug( "Saving output to " + outDir );
+        String fn = outDir + "domcal_" + domId + ".xml";
 
         try {
-            PrintWriter out = new PrintWriter( new FileWriter( outDir + "domcal_" + domId + ".xml", false ), false );
+            PrintWriter out = new PrintWriter(new FileWriter(fn, false ), false );
             DOMCalXML.format( version, rec, out );
             out.flush();
             out.close();
@@ -201,58 +214,15 @@
         }
 
         logger.debug( "Document saved" );
-
-        // If there is gain calibration data put into database
-        if (rec.isHvCalValid()) {
-
-            String driver = calProps.getProperty(
-                    "icecube.daq.domcal.db.driver",
-                    "com.mysql.jdbc.Driver");
-            try {
-                Class.forName(driver);
-            } catch (ClassNotFoundException x) {
-                logger.error( "No MySQL driver class found - PMT HV not stored in DB." );
-            }
-
-            /*
-             * Compute the 10^7 point from fit information
-             */
-            LinearFit fit = rec.getHvGainCal();
-            double slope = fit.getSlope();
-            double inter = fit.getYIntercept();
-            int hv = new Double(Math.pow(10.0, (7.0 - inter) / slope)).intValue();
-
-            if (hv > 2000 || hv < 0) {
-                logger.error("Bad HV calibration for DOM " + domId + " HV=" + hv);
-                return;
-            }
-
-            try {
-                String url = calProps.getProperty("icecube.daq.domcal.db.url",
-                        "jdbc:mysql://localhost/fat");
-                String user = calProps.getProperty(
-                        "icecube.daq.domcal.db.user",
-                        "dfl"
-                );
-                String passwd = calProps.getProperty(
-                        "icecube.daq.domcal.db.passwd",
-                        "(D0Mus)"
-                );
-                jdbc = DriverManager.getConnection(
-                        url,
-                        user,
-                        passwd
-                );
-                Statement stmt = jdbc.createStatement();
-                String updateSQL = "UPDATE domtune SET hv=" + hv +
-                    " WHERE mbid='" + domId + "';";
-                System.out.println( "Executing stmt: " + updateSQL );
-                stmt.executeUpdate(updateSQL);
-            } catch (SQLException e) {
-                logger.error("Unable to insert into database: ", e);
-            }
-
+ 
+        logger.debug("Saving calibration data to database");
+        try {
+            CalibratorDB.save(fn, logger);
+        } catch (Exception ex) {
+            logger.debug("Failed!", ex);
+            return;
         }
+        logger.debug("SUCCESS");
 
     }
 
@@ -330,7 +300,7 @@
                 try {
                     Thread.sleep( 1000 );
                 } catch ( InterruptedException e ) {
-                    logger.warn( "Wait interrupted -- compensating" );
+                    logger.warn( "Wait interrupted" );
                     i--;
                 }
                 boolean done = true;
@@ -344,7 +314,7 @@
                     System.exit( 0 );
                 }
             }
-            logger.warn( "Timeout reached....probably not significant" );
+            logger.warn( "Timeout reached." );
             System.exit( 0 );
         } catch ( Exception e ) {
             usage();
Index: dom-cal/src/icecube/daq/domcal/DOMCalCom.java
diff -u dom-cal/src/icecube/daq/domcal/DOMCalCom.java:1.10 dom-cal/src/icecube/daq/domcal/DOMCalCom.java:1.11
--- dom-cal/src/icecube/daq/domcal/DOMCalCom.java:1.10	Tue Aug 10 12:05:17 2004
+++ dom-cal/src/icecube/daq/domcal/DOMCalCom.java	Wed May 25 12:53:40 2005
@@ -64,6 +64,15 @@
         return out;
     }
 
+    public String receiveAvailable() throws IOException {
+
+        int avail = in.available();
+        if (avail == 0) return "";
+        byte[] b = new byte[in.available()];
+        in.read(b);
+        return new String(b);
+    }
+
     public String receive( String terminator, long timeout ) throws IOException {
         long startTime = System.currentTimeMillis();
         String out = "";
Index: dom-cal/src/icecube/daq/domcal/DOMCalRecord.java
diff -u dom-cal/src/icecube/daq/domcal/DOMCalRecord.java:1.3 dom-cal/src/icecube/daq/domcal/DOMCalRecord.java:1.8
--- dom-cal/src/icecube/daq/domcal/DOMCalRecord.java:1.3	Wed Sep  8 11:41:05 2004
+++ dom-cal/src/icecube/daq/domcal/DOMCalRecord.java	Wed May 18 15:06:51 2005
@@ -42,18 +42,24 @@
 
     public short getVersion();
     
-    public boolean isHvCalValid();
-    
-    public LinearFit getHvGainCal();
+    public boolean isHvBaselineCalValid();
 
-    public short getNumPVPts();
+    public boolean isTransitCalValid();
+
+    public boolean isHvCalValid();
 
-    public float getPVValue( int iter );
+    public LinearFit getTransitTimeFit();
 
-    public float getPVVoltageData( int iter );
+    public LinearFit getHvGainCal();
 
     public short getNumHVHistograms();
 
     public HVHistogram getHVHistogram(int iter);
+
+    public short getNumHVBaselines();
+
+    public Baseline getHVBaseline(int iter);
+
+    public Baseline getBaseline();
 
 }
Index: dom-cal/src/icecube/daq/domcal/DOMCalRecordFactory.java
diff -u dom-cal/src/icecube/daq/domcal/DOMCalRecordFactory.java:1.10 dom-cal/src/icecube/daq/domcal/DOMCalRecordFactory.java:1.15
--- dom-cal/src/icecube/daq/domcal/DOMCalRecordFactory.java:1.10	Mon Sep 13 08:47:40 2004
+++ dom-cal/src/icecube/daq/domcal/DOMCalRecordFactory.java	Wed May 18 15:06:51 2005
@@ -101,12 +101,32 @@
         atwdFrequencyCalibration[0] = LinearFitFactory.parseLinearFit( bb );
         atwdFrequencyCalibration[1] = LinearFitFactory.parseLinearFit( bb );
 
+        Baseline baseline = Baseline.parseBaseline(bb);
+
+        short transitCalValidShort = bb.getShort();
+        boolean transitCalValid = transitCalValidShort == 0 ? false : true;
+
+        LinearFit transitTimeFit = null;
+        if (transitCalValid) {
+            transitTimeFit = LinearFitFactory.parseLinearFit(bb);
+        }
+
+        short numHVHistograms = bb.getShort();
+
+        short hvBaselinesValidShort = bb.getShort();
+        boolean hvBaselinesValid = hvBaselinesValidShort == 0 ? false : true;
+
+        Baseline[] hvBaselines = null;
+        if (hvBaselinesValid) {
+            hvBaselines = new Baseline[numHVHistograms];
+            for (int i = 0; i < numHVHistograms; i++) hvBaselines[i] = Baseline.parseHvBaseline(bb);
+        }
+
         short hvCalValidShort = bb.getShort();
         boolean hvCalValid = ( hvCalValidShort == 0 ) ? false : true;
 
         LinearFit hvGainFit = null;
 
-        short numHVHistograms = bb.getShort();
         HVHistogram[] histos = new HVHistogram[numHVHistograms];
 
         for (int i = 0; i < numHVHistograms; i++) {
@@ -120,7 +140,8 @@
 
         return new DefaultDOMCalRecord( pulserCalibration, atwdCalibration, atwdFrequencyCalibration,
                 amplifierCalibration, amplifierCalibrationError, temperature, year, month, day, domId, dacValues,
-               adcValues, fadcValues, version, hvCalValid, hvGainFit, numHVHistograms, histos);
+               adcValues, fadcValues, version, hvCalValid, transitCalValid, hvBaselinesValid, hvGainFit,
+                                                    numHVHistograms, histos, baseline, hvBaselines, transitTimeFit);
     }
     
     private static class DefaultDOMCalRecord implements DOMCalRecord {
@@ -147,22 +168,27 @@
         private short version;
 
         private boolean hvCalValid;
+        private boolean transitCalValid;
+        private boolean hvBaselineCalValid;
 
         private LinearFit hvGainCal;
-
-        private short numPVPts;
-        private float[] pvData;
-        private float[] pvVoltageData;
+        private LinearFit transitTimeFit;
 
         private short numHVHistograms;
         private HVHistogram[] hvHistos;
 
+        private Baseline baseline;
+        private Baseline[] hvBaselines;
+
         public DefaultDOMCalRecord( LinearFit pulserCalibration, LinearFit[][][] atwdCalibration, LinearFit[]
                  atwdFrequencyCalibration, float[] amplifierCalibration, float[] amplifierCalibrationError, float
                  temperature, short year, short month, short day, String domId, short[] dacValues, short[] adcValues,
-                 short[] fadcValues, short version, boolean hvCalValid, LinearFit hvGainCal, 
-                                                                short numHVHistograms, HVHistogram[] hvHistos ) {
+                 short[] fadcValues, short version, boolean hvCalValid, boolean transitCalValid,
+                 boolean hvBaselineCalValid, LinearFit hvGainCal, short numHVHistograms, HVHistogram[] hvHistos,
+                                                 Baseline baseline, Baseline[] hvBaselines, LinearFit transitTimeFit) {
 
+            this.baseline = baseline;
+            this.hvBaselines = hvBaselines;
             this.pulserCalibration = pulserCalibration;
             this.atwdCalibration = atwdCalibration;
             this.atwdFrequencyCalibration = atwdFrequencyCalibration;
@@ -178,12 +204,12 @@
             this.fadcValues = fadcValues;
             this.version = version;
             this.hvCalValid = hvCalValid;
+            this.transitCalValid = transitCalValid;
+            this.hvBaselineCalValid = hvBaselineCalValid;
             this.hvGainCal = hvGainCal;
-            this.numPVPts = numPVPts;
-            this.pvData = pvData;
-            this.pvVoltageData = pvVoltageData;
             this.numHVHistograms = numHVHistograms;
             this.hvHistos = hvHistos;
+            this.transitTimeFit = transitTimeFit;
         }
 
         public short getVersion() {
@@ -271,26 +297,21 @@
             return hvCalValid;
         }
 
-        public LinearFit getHvGainCal() {
-            return hvGainCal;
+        public boolean isHvBaselineCalValid() {
+            return hvBaselineCalValid;
         }
 
-        public short getNumPVPts() {
-            return numPVPts;
+        public boolean isTransitCalValid() {
+            return transitCalValid;
         }
 
-        public float getPVValue( int iter ) {
-            if (iter >= numPVPts || iter < 0) {
-                throw new IndexOutOfBoundsException("" + iter);
-            }
-            return pvData[iter];
+        public LinearFit getTransitTimeFit() {
+            return transitTimeFit;
         }
 
-        public float getPVVoltageData( int iter ) {
-            if (iter >= numPVPts || iter < 0) {
-                throw new IndexOutOfBoundsException("" + iter);
-            }
-            return pvVoltageData[iter];
+
+        public LinearFit getHvGainCal() {
+            return hvGainCal;
         }
 
         public short getNumHVHistograms() {
@@ -303,6 +324,22 @@
             }
             return hvHistos[iter];
         }
+
+        public short getNumHVBaselines() {
+            return numHVHistograms;
+        }
+
+        public Baseline getHVBaseline(int iter) {
+            if (iter >= numHVHistograms || iter < 0) {
+                throw new IndexOutOfBoundsException("" + iter);
+            }
+            return hvBaselines[iter];
+        }
+
+        public Baseline getBaseline() {
+            return baseline;
+        }
+
 
     }
         
Index: dom-cal/src/icecube/daq/domcal/DOMCalXML.java
diff -u dom-cal/src/icecube/daq/domcal/DOMCalXML.java:1.14 dom-cal/src/icecube/daq/domcal/DOMCalXML.java:1.23
--- dom-cal/src/icecube/daq/domcal/DOMCalXML.java:1.14	Mon Oct 18 09:22:49 2004
+++ dom-cal/src/icecube/daq/domcal/DOMCalXML.java	Wed May 18 15:06:51 2005
@@ -54,11 +54,20 @@
             out.print("  </amplifier>\n");
         }
         for ( int i = 0; i < 2; i++ ) {
-            out.print("  <atwdfreq chip=\"" + i + "\">\n");
+            out.print("  <atwdfreq atwd=\"" + i + "\">\n");
             format( rec.getATWDFrequencyCalibration( i ), out );
             out.print("  </atwdfreq>\n");
         }
 
+        formatBaseline(rec.getBaseline(), out);
+
+
+        if (rec.isTransitCalValid()) {
+            out.print("  <pmtTransitTime>\n");
+            format(rec.getTransitTimeFit(), out);
+            out.print("  </pmtTransitTime>\n");
+        }
+
         if ( rec.isHvCalValid() ) {
             
             out.print("  <hvGainCal>\n");
@@ -69,6 +78,7 @@
 
 
         for (int i = 0; i < rec.getNumHVHistograms(); i++) {
+            if (rec.isHvBaselineCalValid()) formatBaseline(rec.getHVBaseline(i), out);
             formatHisto(rec.getHVHistogram(i), out);
         }
 
@@ -101,5 +111,16 @@
         }
         out.print("    </histogram>\n");
         out.print("  </histo>\n");
+    }
+
+    private static void formatBaseline(Baseline base, PrintWriter out) {
+        out.print("  <baseline voltage=\"" + base.getVoltage() + "\">\n");
+        for (int i = 0; i < 2; i++) {
+            for (int j = 0; j < 3; j++) {
+                out.print("    <base atwd=\"" + i + "\" channel=\"" + j +
+                                                                     "\" value=\"" + base.getBaseline(i,j) + "\"/>\n");
+            }
+        }
+        out.print("  </baseline>\n");
     }
 }
Index: dom-cal/src/icecube/daq/domcal/DOMCalibrationException.java
diff -u dom-cal/src/icecube/daq/domcal/DOMCalibrationException.java:1.1 dom-cal/src/icecube/daq/domcal/DOMCalibrationException.java:1.2
--- dom-cal/src/icecube/daq/domcal/DOMCalibrationException.java:1.1	Fri Jun 25 12:12:22 2004
+++ dom-cal/src/icecube/daq/domcal/DOMCalibrationException.java	Fri Oct 29 14:00:28 2004
@@ -10,6 +10,8 @@
 
     /**
      * Constructor
+     *
+     * @param msg error text
      */
     public DOMCalibrationException(String msg) {
 
Index: dom-cal/src/icecube/daq/domcal/HV2DB.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/HV2DB.java:1.1
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/src/icecube/daq/domcal/HV2DB.java	Tue Apr  5 10:13:52 2005
@@ -0,0 +1,199 @@
+/*************************************************  120 columns wide   ************************************************
+
+ Class:  	HV2DB
+
+ @author 	Jim Braun
+ @author     jbraun@amanda.wisc.edu
+
+ ICECUBE Project
+ University of Wisconsin - Madison
+
+ **********************************************************************************************************************/
+
+package icecube.daq.domcal;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.NodeList;
+import org.xml.sax.SAXException;
+
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import java.io.File;
+import java.io.IOException;
+import java.io.FileInputStream;
+import java.util.LinkedList;
+import java.util.Hashtable;
+import java.util.Iterator;
+import java.util.Properties;
+
+import java.sql.*;
+
+public class HV2DB {
+
+    public static final double LGAIN = 5e5;
+    public static final double MGAIN = 5e6;
+    public static final double HGAIN = 1e7;
+
+    public static void main(String[] args) {
+        if (args.length < 1) {
+            System.out.println("Usage: java icecube.daq.domcal.HV2DB <dir>");
+            System.out.println("where dir is a directory containing domcal files or an individual domcal file");
+            return;
+        }
+
+        //check for readability
+        File f = new File(args[0]);
+        if (!f.exists() || !f.canRead()) {
+            System.out.println("Cannot read " + args[0]);
+            return;
+        }
+
+        //if f is a directory, find all the domcal files it contains -- top level only
+        LinkedList filesFound = new LinkedList();
+        if (!f.isDirectory()) {
+            if (checkName(f)) filesFound.add(f);
+        } else {
+            File[] cfiles = f.listFiles();
+            for (int i = 0; i < cfiles.length; i++)
+            if (checkName(cfiles[i])) filesFound.add(cfiles[i]);
+        }
+
+        if (filesFound.size() == 0) {
+            System.out.println("No domcal files available");
+            return;
+        }
+
+        //parse all HV values into a hashtable
+        Hashtable hv = new Hashtable();
+        for (Iterator it = filesFound.iterator(); it.hasNext();) {
+            File inf = (File)it.next();
+            Document doc = null;
+            try {
+                doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(inf);
+            } catch (ParserConfigurationException ex) {
+                System.out.println("Parser configuration error on file " + inf.getAbsolutePath());
+            } catch (SAXException ex) {
+                System.out.println("Error parsing file " + inf.getAbsolutePath());
+            } catch (IOException ex) {
+                System.out.println("IO Error loading domcal file " + inf.getAbsolutePath());
+            }
+
+            if (doc == null) {
+                System.out.println("Skipping file " + inf.getAbsolutePath());
+                continue;
+            }
+
+            String domId = doc.getElementsByTagName("domid").item(0).getFirstChild().getNodeValue();
+
+            NodeList nl = doc.getElementsByTagName("hvGainCal");
+            if (nl.getLength() == 0) {
+                System.out.println("No HV data found for DOM " + domId + " in domcal file " + inf.getAbsolutePath());
+                continue;
+            } else if (nl.getLength()  > 1) {
+                System.out.println("Bad (multiple) HV data found in file " + inf.getAbsolutePath());
+                continue;
+            }
+            hv.put(domId, parseFit((Element)nl.item(0)));
+        }
+
+        // Stuff values into database
+        Properties calProps = new Properties();
+        File propFile = new File(System.getProperty("user.home") +
+                "/.domcal.properties"
+        );
+        if (!propFile.exists()) {
+            propFile = new File("/usr/local/etc/domcal.properties");
+        }
+
+        try {
+            calProps.load(new FileInputStream(propFile));
+        } catch (IOException e) {
+            System.out.println("Cannot access the domcal.properties file - using compiled defaults.");
+        }
+
+        String driver = calProps.getProperty("icecube.daq.domcal.db.driver", "com.mysql.jdbc.Driver");
+        try {
+            Class.forName(driver);
+        } catch (ClassNotFoundException x) {
+            System.out.println("No MySQL driver class found - PMT HV not stored in DB.");
+            return;
+        }
+
+        Connection jdbc;
+
+        String url = calProps.getProperty("icecube.daq.domcal.db.url", "jdbc:mysql://localhost/fat");
+        String user = calProps.getProperty("icecube.daq.domcal.db.user", "dfl");
+        String passwd = calProps.getProperty("icecube.daq.domcal.db.passwd", "(D0Mus)");
+
+        try {
+            jdbc = DriverManager.getConnection(url, user, passwd);
+        } catch (SQLException ex) {
+            System.out.println("Error connecting to database!");
+            return;
+        }
+
+        for (Iterator it = hv.keySet().iterator(); it.hasNext();) {
+            String domId = (String)it.next();
+            HVValues vals = (HVValues)hv.get(domId);
+            if (vals == null) {
+                System.out.println("Values for DOM " + domId + " not available");
+                continue;
+            }
+            try {
+                Statement stmt = jdbc.createStatement();
+                String updateSQL = "UPDATE domtune SET hv1=" + vals.hgain + " WHERE mbid='" + domId + "';";
+                System.out.println( "Executing stmt: " + updateSQL );
+                stmt.executeUpdate(updateSQL);
+                stmt = jdbc.createStatement();
+                updateSQL = "UPDATE domtune SET hv2=" + vals.mgain + " WHERE mbid='" + domId + "';";
+                System.out.println( "Executing stmt: " + updateSQL );
+                stmt.executeUpdate(updateSQL);
+                stmt = jdbc.createStatement();
+                updateSQL = "UPDATE domtune SET hv3=" + vals.lgain + " WHERE mbid='" + domId + "';";
+                System.out.println( "Executing stmt: " + updateSQL );
+                stmt.executeUpdate(updateSQL);
+            } catch (SQLException e) {
+                System.out.println("Unable to insert into database");
+            }
+        }
+    }
+
+    private static HVValues parseFit(Element el) {
+        double slope = 0.0;
+        double intercept = 0.0;
+        NodeList nodes = el.getElementsByTagName("param");
+        for (int i = 0; i < nodes.getLength(); i++) {
+            Element param = (Element) nodes.item(i);
+            if (param.getAttribute("name").equals("slope"))
+                                      slope = Double.parseDouble(param.getFirstChild().getNodeValue());
+            else if (param.getAttribute("name").equals("intercept"))
+                                      intercept = Double.parseDouble(param.getFirstChild().getNodeValue());
+        }
+        System.out.println("Slope: " + slope + " Intercept: " + intercept + " hgain: " + HGAIN);
+        if (slope == 0.0 || intercept == 0.0) return null;
+        int lgain = (int)Math.pow(10.0, (Math.log(LGAIN)/Math.log(10) - intercept) / slope);
+        int mgain = (int)Math.pow(10.0, (Math.log(MGAIN)/Math.log(10) - intercept) / slope);
+        int hgain = (int)Math.pow(10.0, (Math.log(HGAIN)/Math.log(10) - intercept) / slope);
+        return new HVValues(hgain, mgain, lgain);
+    }
+
+    static boolean checkName(File f) {
+        boolean ret = f.getName().startsWith("domcal_") && f.getName().endsWith(".xml");
+        if (ret) System.out.println("Found domcal file " + f.getAbsolutePath());
+        else System.out.println("File " + f.getAbsolutePath() + " does not appear to be a domcal file -- omitting");
+        return ret;
+    }
+
+    static class HVValues {
+        int hgain;
+        int mgain;
+        int lgain;
+
+        HVValues(int hgain, int mgain, int lgain) {
+            this.hgain = hgain;
+            this.mgain = mgain;
+            this.lgain = lgain;
+        }
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/HVHistogram.java
diff -u dom-cal/src/icecube/daq/domcal/HVHistogram.java:1.3 dom-cal/src/icecube/daq/domcal/HVHistogram.java:1.7
--- dom-cal/src/icecube/daq/domcal/HVHistogram.java:1.3	Wed Sep 15 13:29:18 2004
+++ dom-cal/src/icecube/daq/domcal/HVHistogram.java	Wed Mar 30 15:16:12 2005
@@ -19,6 +19,14 @@
 
 public class HVHistogram {
 
+    private static final String[] paramNames = new String[] {
+        "exponential amplitude",
+        "exponential width",
+        "gaussian amplitude",
+        "gaussian mean",
+        "gaussian width",
+    };
+
     private short voltage;
     private float[] fitParams;
     private float[] xVals;
@@ -30,7 +38,7 @@
 
     public static HVHistogram parseHVHistogram(ByteBuffer bb) {
         short voltage = bb.getShort();
-        float noiseRate = (bb.getFloat());
+        float noiseRate = bb.getFloat();
         boolean isFilled = (bb.getShort() != 0);
         boolean convergent = (bb.getShort() != 0);
         float[] fitParams = new float[5];
@@ -60,16 +68,10 @@
             Element currentParam = (Element)fitP.item(i);
             float val = Float.parseFloat(currentParam.getFirstChild().getNodeValue());
             String name = currentParam.getAttribute("name");
-            if (name.equals("exponential amplitude")) {
-                fitParams[0] = val;
-            } else if (name.equals("exponential width")) {
-                fitParams[1] = val;
-            } else if (name.equals("gaussian amplitude")) {
-                fitParams[2] = val;
-            } else if (name.equals("gaussian mean")) {
-                fitParams[3] = val;
-            } else if (name.equals("gaussian width")) {
-                fitParams[4] = val;
+            for (int j = 0; j < paramNames.length; j++) {
+                if (name.equals(paramNames[j])) {
+                    fitParams[j] = val;
+                }
             }
         }
         Element histogram = (Element)histo.getElementsByTagName("histogram").item(0);
@@ -129,5 +131,14 @@
 
     public boolean isFilled() {
         return isFilled;
+    }
+
+    public static final String getParameterName(int i)
+    {
+        if (i < 0 || i >= paramNames.length) {
+            return null;
+        }
+
+        return paramNames[i];
     }
 }
Index: dom-cal/src/icecube/daq/domcal/HVHistogramGrapher.java
diff -u dom-cal/src/icecube/daq/domcal/HVHistogramGrapher.java:1.7 dom-cal/src/icecube/daq/domcal/HVHistogramGrapher.java:1.9
--- dom-cal/src/icecube/daq/domcal/HVHistogramGrapher.java:1.7	Tue Sep 21 08:05:10 2004
+++ dom-cal/src/icecube/daq/domcal/HVHistogramGrapher.java	Thu Dec 23 12:19:57 2004
@@ -294,12 +294,10 @@
             if (histos[i].isConvergent()) {
                 int xCenter = getXPixel(histos[i].getVoltage());
                 int yCenter = getYPixel((int)(1e-12 * histos[i].getFitParams()[3] / EC));
-                if (xCenter > 296) xCenter = 296;
-                if (xCenter < 53) xCenter = 53;
-                if (yCenter > 246) yCenter = 246;
-                if (yCenter < 3) yCenter = 3;
-                g.drawLine(xCenter - 3, yCenter, xCenter + 3, yCenter);
-                g.drawLine(xCenter, yCenter - 3, xCenter, yCenter + 3);
+                if (!(xCenter > 296 || xCenter < 53 || yCenter > 246 || yCenter < 3)) {
+                    g.drawLine(xCenter - 3, yCenter, xCenter + 3, yCenter);
+                    g.drawLine(xCenter, yCenter - 3, xCenter, yCenter + 3);
+                }
                 xData[convIndx] = xCenter;
                 yData[convIndx] = yCenter;
                 convIndx++;
@@ -321,13 +319,13 @@
                 int startX = 51;
                 int endX = 299;
                 int startY = (int)(fit.getYIntercept() + startX*fit.getSlope());
-                //find where line reaches 51
-                while (startY > 249 && startX < endX) {
+                //select only X range where Y values are on graph
+                while ((startY > 249 || startY < 0) && startX < endX) {
                     startX++;
                     startY = (int)(fit.getYIntercept() + startX*fit.getSlope());
                 }
                 int endY = (int)(fit.getYIntercept() + endX*fit.getSlope());
-                while (endY < 0 && startX < endX) {
+                while ((endY < 0 || endY > 249) && startX < endX) {
                     endX--;
                     endY = (int)(fit.getYIntercept() + endX*fit.getSlope());
                 }
@@ -366,6 +364,10 @@
         BufferedImage bi = new BufferedImage(300, 300, BufferedImage.TYPE_INT_RGB);
         Graphics2D g = bi.createGraphics();
 
+        //want white background
+        g.setColor(Color.WHITE);
+        g.fillRect(0, 0, bi.getWidth(), bi.getHeight());
+
         g.setColor(Color.BLUE);
         //fill histogram
         for (int i = 0; i < 250; i++) {
@@ -395,7 +397,7 @@
             fitPrevious = fitY;
         }
 
-        g.setColor(Color.WHITE);
+        g.setColor(Color.BLACK);
         //draw axes
         g.drawLine(50, 249, 299, 249);
         g.drawLine(50, 0, 50, 249);
Index: dom-cal/src/icecube/daq/domcal/IDMap.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/IDMap.java:1.1
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/src/icecube/daq/domcal/IDMap.java	Fri Oct 29 14:05:01 2004
@@ -0,0 +1,82 @@
+package icecube.daq.domcal;
+
+import icecube.daq.db.domprodtest.DOMProdTestUtil;
+
+import java.util.HashMap;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+/**
+ * Mapping of IDs to names.
+ */
+class IDMap
+{
+    /** mapping of name to id. */
+    private HashMap map;
+
+    /**
+     * Load a list of ID/name mappings from the database.
+     *
+     * @param stmt SQL statement
+     * @param tblName database table name
+     * @param idCol name of column holding IDs
+     * @param nameCol name of column holding names
+     *
+     * @throws SQLException if there is a problem reading the ID/name pairs
+     */
+    IDMap(Statement stmt, String tblName, String idCol, String nameCol)
+        throws SQLException
+    {
+        final String qStr = "select " + idCol + "," + nameCol + " from " +
+            tblName + " order by " + idCol;
+
+        ResultSet rs = stmt.executeQuery(qStr);
+
+        map = new HashMap();
+
+        SQLException resultEx = null;
+        while (resultEx == null) {
+            try {
+                if (!rs.next()) {
+                    break;
+                } else {
+                    final int id = rs.getInt(1);
+                    final String name = rs.getString(2);
+
+                    map.put(name, new Integer(id));
+                }
+            } catch (SQLException se) {
+                resultEx = se;
+            }
+        }
+
+        try {
+            rs.close();
+        } catch (SQLException se) {
+            // ignore errors on close
+        }
+
+        if (resultEx != null) {
+            throw resultEx;
+        }
+    }
+
+    /**
+     * Get the ID for the specified name.
+     *
+     * @param name name being looked up
+     *
+     * @return associated ID
+     */
+    public int getId(String name)
+    {
+        Integer iObj = (Integer) map.get(name);
+        if (iObj == null) {
+            return DOMProdTestUtil.ILLEGAL_ID;
+        }
+
+        return iObj.intValue();
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/ModelType.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/ModelType.java:1.1
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/src/icecube/daq/domcal/ModelType.java	Fri Oct 29 14:05:01 2004
@@ -0,0 +1,24 @@
+package icecube.daq.domcal;
+
+import java.sql.SQLException;
+import java.sql.Statement;
+
+/**
+ * Cached data from the DOMCal_Model table.
+ */
+class ModelType
+    extends IDMap
+{
+    /**
+     * Load the DOMCal_Model table.
+     *
+     * @param stmt SQL statement
+     *
+     * @throws SQLException if there is a problem reading the table
+     */
+    ModelType(Statement stmt)
+        throws SQLException
+    {
+        super(stmt, "DOMCal_Model", "dc_model_id", "name");
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/ParamType.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/ParamType.java:1.1
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/src/icecube/daq/domcal/ParamType.java	Fri Oct 29 14:05:01 2004
@@ -0,0 +1,24 @@
+package icecube.daq.domcal;
+
+import java.sql.SQLException;
+import java.sql.Statement;
+
+/**
+ * Cached data from the DOMCal_Param table.
+ */
+class ParamType
+    extends IDMap
+{
+    /**
+     * Load the DOMCal_Param table.
+     *
+     * @param stmt SQL statement
+     *
+     * @throws SQLException if there is a problem reading the table
+     */
+    ParamType(Statement stmt)
+        throws SQLException
+    {
+        super(stmt, "DOMCal_Param", "dc_param_id", "name");
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/package.html
diff -u /dev/null dom-cal/src/icecube/daq/domcal/package.html:1.1
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/src/icecube/daq/domcal/package.html	Fri Oct 29 14:05:01 2004
@@ -0,0 +1,35 @@
+<html>
+<body>
+<p>This package allows programmatic access from Java
+to the DOM calibration information.  The class reads
+<code>.xdc</code> files which contain DOM calibration
+data in an XML document and place the information
+into a Java class.  All the programmer needs to do is
+construct an instance of the <code>Calibrator</code>
+class with either a URL or an InputStream pointing to
+the XML object.</p>
+<p>The primary utility of this class is to transform
+the raw ATWD waveform data into volt units.  This
+can be accomplished one of two ways - either:
+<ul>
+    <li>Through explicit calls to the
+    <code>getATWDFitParam(int ch, int bin, String param)</code>
+    member function.  This provides the programmer with
+    the actual fit information.  Note that the fit
+    parameters may vary depending on what the fit model
+    is; currently only the 'linear' fit model is used.</li>
+    <li>Through the high-level member function
+    <code>calibrateATWD</code> which takes a raw ATWD
+    buffer array and returns a calibrated buffer array.
+    Please note that the DC bias is not subtracted off
+    in this function.  The inverse function
+    <code>decalibrateATWD</code> performs the inverse
+    calibration, taking volts back into counts.</li>
+</ul>
+</p>
+<p>The other calibrations tracked by this class are the
+front-end pulser calibration, the amplifier gains, and the
+ATWD sampling frequency.</p>
+</body>
+</html>
+
Index: dom-cal/src/icecube/daq/domcal/app/FixDB.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/app/FixDB.java:1.6
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/src/icecube/daq/domcal/app/FixDB.java	Mon Jan 10 14:55:23 2005
@@ -0,0 +1,273 @@
+package icecube.daq.domcal.app;
+
+import icecube.daq.db.domprodtest.BasicDB;
+import icecube.daq.db.domprodtest.DOMProdTestException;
+import icecube.daq.db.domprodtest.DOMProdTestUtil;
+
+import icecube.daq.domcal.HVHistogram;
+
+import java.io.IOException;
+
+import java.sql.Connection;
+import java.sql.DatabaseMetaData;
+import java.sql.ResultSet;
+import java.sql.Statement;
+import java.sql.SQLException;
+
+import java.util.ArrayList;
+
+/**
+ * Save a calibration XML file to the database.
+ */
+public class FixDB
+{
+    private static final String[] modelVals = new String[] {
+        "linear",
+    };
+
+    /**
+     * Save a calibration XML file to the database.
+     *
+     * @param args commandline arguments
+     *
+     * @throws DOMProdTestException if the database cannot be initialized
+     * @throws SQLException if there is a problem with the database
+     */
+    FixDB(String[] args)
+        throws DOMProdTestException, IOException, SQLException
+    {
+        boolean clearData = false;
+
+        boolean badParam = false;
+        for (int i = 0; i < args.length; i++) {
+            if (args[i].equalsIgnoreCase("clear")) {
+                clearData = true;
+            } else {
+                System.err.println("Unknown parameter \"" + args[i] + "\"");
+                badParam = true;
+            }
+        }
+
+        if (badParam) {
+            System.err.println("Usage: " + getClass().getName() +
+                               " [clear]");
+            System.exit(1);
+        }
+
+        BasicDB server = new BasicDB();
+
+        Connection conn = server.getConnection();
+
+        try {
+            if (isOldGainHv(conn)) {
+                fixGainHv(conn);
+                clearData = true;
+            }
+
+            if (clearData) {
+                clearData(conn);
+                System.err.println("Cleared old data from database");
+            }
+
+            addMissingModelValues(conn);
+            addMissingParameterValues(conn);
+        } finally {
+            conn.close();
+        }
+    }
+
+    private void addMissingModelValues(Connection conn)
+        throws SQLException
+    {
+        addMissingRows(conn, "DOMCal_Model", "dc_model_id", "name", modelVals);
+    }
+
+    private void addMissingParameterValues(Connection conn)
+        throws SQLException
+    {
+        ArrayList params = new ArrayList();
+        params.add("intercept");
+        params.add("slope");
+
+        int num = 0;
+        while (true) {
+            final String name = HVHistogram.getParameterName(num);
+            if (name == null) {
+                break;
+            }
+
+            params.add(name);
+            num++;
+        }
+
+        String[] paramVals = new String[params.size()];
+        params.toArray(paramVals);
+
+        addMissingRows(conn, "DOMCal_Param", "dc_param_id", "name", paramVals);
+    }
+
+    private void addMissingRows(Connection conn, String tblName,
+                                String idCol, String valCol, String[] valList)
+        throws SQLException
+    {
+        Statement stmt = conn.createStatement();
+        try {
+            boolean[] found = new boolean[valList.length];
+
+            final String qStr = "select " + valCol + " from " + tblName;
+
+            ResultSet rs = stmt.executeQuery(qStr);
+            while (rs.next()) {
+                final String thisVal = rs.getString(1);
+
+                boolean foundOne = false;
+                for (int i = 0; i < valList.length; i++) {
+                    if (valList[i].equals(thisVal)) {
+                        if (found[i]) {
+                            throw new SQLException("Found multiple copies of" +
+                                                   tblName + " value '" +
+                                                   thisVal + "'");
+                        } else if (foundOne) {
+                            throw new SQLException("Found multiple " +
+                                                   tblName +
+                                                   " rows with value '" +
+                                                   thisVal + "'");
+                        }
+
+                        found[i] = true;
+                        foundOne = true;
+                    }
+                }
+
+                if (!foundOne) {
+                    throw new SQLException("Found unknown " + tblName +
+                                           " value '" + thisVal + "'");
+                }
+            }
+            rs.close();
+
+            final String[] cols = new String[] { valCol };
+            final Object[] vals = new Object[cols.length];
+
+            for (int i = 0; i < found.length; i++) {
+                if (!found[i]) {
+                    vals[0] = valList[i];
+                    int id = DOMProdTestUtil.addId(stmt, tblName,
+                                                   idCol, cols, vals,
+                                                   1, Integer.MAX_VALUE);
+                    System.out.println("Added " + tblName + " value '" +
+                                       valList[i] + "' as ID#" + id);
+                }
+            }
+
+        } finally {
+            try { stmt.close(); } catch (SQLException se) { }
+        }
+    }
+
+    private void clearData(Connection conn)
+        throws SQLException
+    {
+        Statement stmt;
+        try {
+            stmt = conn.createStatement();
+        } catch (SQLException se) {
+            System.err.println("Couldn't get initial statement: " +
+                               se.getMessage());
+            return;
+        }
+
+        final String[] cmds = new String[] {
+            "delete from DOMCal_ADC",
+            "delete from DOMCal_ATWD",
+            "delete from DOMCal_ATWDFreq",
+            "delete from DOMCal_ATWDFreqParam",
+            "delete from DOMCal_ATWDParam",
+            "delete from DOMCal_AmpGain",
+            "delete from DOMCal_ChargeData",
+            "delete from DOMCal_ChargeMain",
+            "delete from DOMCal_ChargeParam",
+            "delete from DOMCal_DAC",
+            "delete from DOMCal_HvGain",
+            "delete from DOMCal_Pulser",
+            "delete from DOMCal_PulserParam",
+            "delete from DOMCalibration",
+        };
+
+        try {
+            for (int i = 0; i < cmds.length; i++) {
+                stmt.executeUpdate(cmds[i]);
+            }
+        } finally {
+            try { stmt.close(); } catch (SQLException se) { }
+        }
+    }
+
+    private void fixGainHv(Connection conn)
+        throws SQLException
+    {
+        Statement stmt;
+        try {
+            stmt = conn.createStatement();
+        } catch (SQLException se) {
+            System.err.println("Couldn't get initial statement: " +
+                               se.getMessage());
+            return;
+        }
+
+        final String[] cmds = new String[] {
+            "drop table DOMCal_HvGain",
+            "create table DOMCal_HvGain(domcal_id int not null," +
+            "slope double not null,intercept double not null," +
+            "regression double not null,primary key(domcal_id))",
+        };
+
+        try {
+            for (int i = 0; i < cmds.length; i++) {
+                stmt.executeUpdate(cmds[i]);
+            }
+        } finally {
+            try { stmt.close(); } catch (SQLException se) { }
+        }
+
+        clearData(conn);
+    }
+
+    private boolean isOldGainHv(Connection conn)
+        throws SQLException
+    {
+        DatabaseMetaData meta = conn.getMetaData();
+
+        String[] expCols = new String[] {
+            "domcal_id",
+            "slope",
+            "intercept",
+        };
+
+        boolean isOldTable = true;
+
+        ResultSet rs = meta.getColumns(conn.getCatalog(), null, "DOMCal_HvGain",
+                                       null);
+        while (isOldTable && rs.next()) {
+            final String colName = rs.getString("COLUMN_NAME");
+            final int pos = rs.getInt("ORDINAL_POSITION");
+
+            isOldTable &= (pos > 0 && pos <= expCols.length &&
+                           colName.equalsIgnoreCase(expCols[pos - 1]));
+        }
+        rs.close();
+
+        return isOldTable;
+    }
+
+    /**
+     * Save one or more calibration XML files to the database.
+     *
+     * @param args command-line arguments
+     */
+    public static final void main(String[] args)
+        throws DOMProdTestException, IOException, SQLException
+    {
+        new FixDB(args);
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/app/SaveToDB.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/app/SaveToDB.java:1.4
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/src/icecube/daq/domcal/app/SaveToDB.java	Mon Apr 25 12:40:08 2005
@@ -0,0 +1,98 @@
+package icecube.daq.domcal.app;
+
+import icecube.daq.db.domprodtest.DOMProdTestException;
+
+import icecube.daq.domcal.Calibrator;
+import icecube.daq.domcal.CalibratorComparator;
+import icecube.daq.domcal.CalibratorDB;
+import icecube.daq.domcal.DOMCalibrationException;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+
+import java.sql.SQLException;
+
+import org.apache.log4j.BasicConfigurator;
+import org.apache.log4j.Logger;
+
+/**
+ * Save a calibration XML file to the database.
+ */
+public class SaveToDB
+{
+    /** logger instance. */
+    private static Logger logger = Logger.getLogger(SaveToDB.class);
+    
+    /**
+     * Save a calibration XML file to the database.
+     *
+     * @param fileName XML file
+     * @param verbose <tt>true</tt> to dump out reason for comparison failure
+     *
+     * @throws DOMCalibrationException if some data is invalid
+     * @throws DOMProdTestException if the database cannot be initialized
+     * @throws IOException if there is a problem with the XML file
+     * @throws SQLException if there is a problem with the database
+     */
+    public SaveToDB(String fileName, boolean verbose)
+        throws DOMCalibrationException, DOMProdTestException, IOException,
+               SQLException
+    {
+        File f = new File(fileName);
+        if (!f.exists()) {
+            throw new IOException("File \"" + f + "\" does not exist");
+        }
+
+        // configure log4j
+        BasicConfigurator.configure();
+
+        CalibratorDB.save(fileName, logger);
+    }
+
+    /**
+     * Save one or more calibration XML files to the database.
+     *
+     * @param args command-line arguments
+     */
+    public static final void main(String[] args)
+    {
+        boolean verbose = false;
+
+        boolean usage = false;
+        boolean failed = false;
+        for (int i = 0; i < args.length; i++) {
+            if (args[i].length() >= 1 && args[i].charAt(0) == '-') {
+                if (args[i].charAt(1) == 'v') {
+                    verbose = true;
+                } else {
+                    System.err.println("Unknown option '" + args[i] + "'");
+                    usage = true;
+                    break;
+                }
+            } else {
+                try {
+                    new SaveToDB(args[i], verbose);
+                } catch (Exception ex) {
+                    System.err.println("Couldn't save \"" + args[i] + "\"");
+                    ex.printStackTrace();
+                    failed = true;
+                }
+            }
+        }
+
+        if (usage) {
+            System.err.println("Usage: java icecube.domcal.app.SaveToDB" +
+                               " [-v(erbose)]" +
+                               " domcal.xml [domcal.xml ...]" +
+                               "");
+            failed = true;
+        }
+
+        if (failed) {
+            System.exit(1);
+        }
+
+        System.exit(0);
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/app/package.html
diff -u /dev/null dom-cal/src/icecube/daq/domcal/app/package.html:1.1
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/src/icecube/daq/domcal/app/package.html	Fri Oct 29 14:05:01 2004
@@ -0,0 +1 @@
+<html><body>domcal applications.</body></html>
Index: dom-cal/src/icecube/daq/domcal/test/CalibratorDBTest.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/test/CalibratorDBTest.java:1.6
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/src/icecube/daq/domcal/test/CalibratorDBTest.java	Tue May 24 07:54:00 2005
@@ -0,0 +1,621 @@
+package icecube.daq.domcal.test;
+
+import icecube.daq.db.domprodtest.DOMProdTestException;
+import icecube.daq.db.domprodtest.Laboratory;
+import icecube.daq.db.domprodtest.ProductType;
+
+import icecube.daq.db.domprodtest.test.FakeUtil;
+import icecube.daq.db.domprodtest.test.MockStatement;
+
+import icecube.daq.domcal.Calibrator;
+import icecube.daq.domcal.CalibratorComparator;
+import icecube.daq.domcal.CalibratorDB;
+import icecube.daq.domcal.DOMCalibrationException;
+import icecube.daq.domcal.HVHistogram;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.ByteArrayInputStream;
+
+import java.sql.Date;
+import java.sql.SQLException;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.apache.log4j.BasicConfigurator;
+import org.apache.log4j.Level;
+import org.apache.log4j.Logger;
+
+/**
+ *  Calibrator database tests.
+ */
+public class CalibratorDBTest
+    extends TestCase
+{
+    public CalibratorDBTest(String name)
+    {
+        super(name);
+    }
+
+    private static final void fillATWDData(double[][][] atwdData, int c, int b)
+    {
+        atwdData[c][b][MockSQLUtil.SLOPE_INDEX] =
+            (((double) c * (double) atwdData[c].length) +
+                (double) b) + 0.123;
+        atwdData[c][b][MockSQLUtil.INTERCEPT_INDEX] =
+            (((double) c * (double) atwdData[c].length) +
+                (double) b) + 0.456;
+        atwdData[c][b][MockSQLUtil.REGRESSION_INDEX] =
+            (((double) c * (double) atwdData[c].length) +
+                (double) b) + 0.789;
+    }
+
+    protected void setUp()
+        throws Exception
+    {
+        super.setUp();
+
+        // Set up the logging infrastructure
+        BasicConfigurator.configure(new MockAppender(Level.INFO));
+
+	ProductType.clearStatic();
+        MockCalDB.clearStatic();
+        MockCalDB.initStatic();
+    }
+
+    public static TestSuite suite()
+    {
+        return new TestSuite(CalibratorDBTest.class);
+    }
+
+    protected void tearDown()
+        throws Exception
+    {
+        MockCalDB.verifyStatic();
+
+        super.tearDown();
+    }
+
+    public void testSave()
+        throws DOMCalibrationException, DOMProdTestException, IOException,
+               SQLException
+    {
+        final Date date = Date.valueOf("2004-03-02");
+        final String mbHardSerial = "0123456789ab";
+        final double temp = -40.5;
+
+        FakeCalXML xml = new FakeCalXML(date, mbHardSerial, temp);
+
+        final short[] dacs = new short[] {
+             0,  1,  2,  3,  4,  5,  6,  7, 8,  9, 10, 11, 12, 13, 14, 15,
+        };
+        final short[] adcs = new short[] {
+             0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,
+            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
+        };
+
+        xml.setDACs(dacs);
+        xml.setADCs(adcs);
+
+        final double pulserSlope = 1.23;
+        final double pulserIntercept = 4.56;
+        final double pulserRegression = 7.89;
+        xml.setPulser(pulserSlope, pulserIntercept, pulserRegression);
+
+        final double[][][] atwdData = new double[8][128][3];
+        for (int c = 0; c < atwdData.length; c++) {
+            for (int b = 0; b < atwdData[c].length; b++) {
+                fillATWDData(atwdData, c, b);
+                xml.setATWD(c, b, atwdData[c][b][MockSQLUtil.SLOPE_INDEX],
+                            atwdData[c][b][MockSQLUtil.INTERCEPT_INDEX],
+                            atwdData[c][b][MockSQLUtil.REGRESSION_INDEX]);
+            }
+        }
+
+        final double[] ampGain = new double[3];
+        final double[] ampError = new double[3];
+        for (int i = 0; i < 3; i++) {
+            ampGain[i] = (double) i * 100.0;
+            ampError[i] = 100.0 - (double) i;
+
+            xml.setAmplifier(i, ampGain[i], ampError[i]);
+        }
+
+        final double[][] freqData = {
+            { 1.0, 2.0, 3.0 },
+            { 3.0, 5.0, 7.0 }
+        };
+        for (int i = 0; i < freqData.length; i++) {
+            xml.setATWDFrequency(i, freqData[i][0], freqData[i][1],
+                                 freqData[i][2]);
+        }
+
+        final double hvGainSlope = 12.34;
+        final double hvGainIntercept = 56.78;
+        final double hvGainRegression = 90.12;
+        xml.setHvGain(hvGainSlope, hvGainIntercept, hvGainRegression);
+
+        HVHistogram[] histo = new HVHistogram[2];
+        for (int i = 0; i < histo.length; i++) {
+            float[] paramVals = new float[] {
+                (float) i + 12.3456f,
+                (float) i + 6.78901f,
+                (float) i + 6.54321f,
+                (float) i + 1.23456f,
+                (float) i + 65.4321f,
+            };
+
+            float[] charge = new float[250];
+            float[] count = new float[250];
+            for (int j = 0; j < 250; j++) {
+                charge[i] = (float) j * 0.016f;
+                count[i] = (float) (j % 16) + (i == 0 ? 13.0f : 17.0f);
+            }
+
+            histo[i] = new HVHistogram((short) (1400 + (i * 100)), paramVals,
+                                       charge, count, (i == 0),
+                                       (float) i + 1.23456f,
+                                       1234.0f + ((float) i * 2.3456f),
+                                       (i == 1));
+        };
+        xml.setHvHistograms(histo);
+
+        final String xmlStr = xml.toString();
+
+        ByteArrayInputStream strIn =
+            new ByteArrayInputStream(xmlStr.getBytes());
+
+        Calibrator cal = new Calibrator(strIn);
+
+        MockStatement stmt = new MockStatement("SaveStmt");
+
+        Laboratory lab = FakeUtil.fakeLab(stmt, 10, 1, 100000);
+
+        if (!ProductType.isInitialized()) {
+            MockSQLUtil.addProductTypeSQL(stmt, MockSQLUtil.DOM_TYPE_ID,
+                                          MockSQLUtil.MAINBD_TYPE_ID);
+        }
+
+        final String mainbdTagSerial = "V01 23";
+        final String domTagSerial = "XX401P0123";
+
+        MockSQLUtil.addProductSQL(stmt, MockSQLUtil.MAINBD_TYPE_ID,
+                                  mbHardSerial, MockSQLUtil.MAINBD_ID,
+                                  mainbdTagSerial, MockSQLUtil.DOM_TYPE_ID,
+                                  MockSQLUtil.DOM_ID, domTagSerial);
+
+        final int domcalId = lab.getMinimumId() + 10;
+
+        MockSQLUtil.addMainInsertSQL(stmt, lab, MockSQLUtil.DOM_ID, domcalId,
+                                     date, temp);
+        MockSQLUtil.addChanValInsertSQL(stmt, "ADC", domcalId, adcs);
+        MockSQLUtil.addChanValInsertSQL(stmt, "DAC", domcalId, dacs);
+
+        MockSQLUtil.addModelTypeSQL(stmt);
+        MockSQLUtil.addParamTypeSQL(stmt);
+
+        MockSQLUtil.addPulserInsertSQL(stmt, domcalId, pulserSlope,
+                                       pulserIntercept, pulserRegression);
+
+        MockSQLUtil.addATWDInsertSQL(stmt, domcalId, atwdData);
+        MockSQLUtil.addAmpGainInsertSQL(stmt, domcalId, ampGain, ampError);
+        MockSQLUtil.addATWDFreqInsertSQL(stmt, domcalId, freqData);
+        MockSQLUtil.addHvGainInsertSQL(stmt, domcalId,
+                                       hvGainSlope, hvGainIntercept,
+                                       hvGainRegression);
+        MockSQLUtil.addHvHistoInsertSQL(stmt, domcalId, histo);
+
+        MockCalDB calDB = new MockCalDB();
+        calDB.addActualStatement(stmt);
+
+        calDB.setLaboratory(lab);
+        calDB.save(cal);
+    }
+
+    public void testSaveFile()
+        throws DOMCalibrationException, DOMProdTestException, IOException,
+               SQLException
+    {
+        final Date date = Date.valueOf("2004-03-02");
+        final String mbHardSerial = "0123456789ab";
+        final double temp = -40.5;
+
+        FakeCalXML xml = new FakeCalXML(date, mbHardSerial, temp);
+
+        final short[] dacs = new short[] {
+             0,  1,  2,  3,  4,  5,  6,  7, 8,  9, 10, 11, 12, 13, 14, 15,
+        };
+        final short[] adcs = new short[] {
+             0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,
+            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
+        };
+
+        xml.setDACs(dacs);
+        xml.setADCs(adcs);
+
+        final double pulserSlope = 1.23;
+        final double pulserIntercept = 4.56;
+        final double pulserRegression = 7.89;
+        xml.setPulser(pulserSlope, pulserIntercept, pulserRegression);
+
+        final double[][][] atwdData = new double[8][128][3];
+        for (int c = 0; c < atwdData.length; c++) {
+            for (int b = 0; b < atwdData[c].length; b++) {
+                fillATWDData(atwdData, c, b);
+                xml.setATWD(c, b, atwdData[c][b][MockSQLUtil.SLOPE_INDEX],
+                            atwdData[c][b][MockSQLUtil.INTERCEPT_INDEX],
+                            atwdData[c][b][MockSQLUtil.REGRESSION_INDEX]);
+            }
+        }
+
+        final double[] ampGain = new double[3];
+        final double[] ampError = new double[3];
+        for (int i = 0; i < 3; i++) {
+            ampGain[i] = (double) i * 100.0;
+            ampError[i] = 100.0 - (double) i;
+
+            xml.setAmplifier(i, ampGain[i], ampError[i]);
+        }
+
+        final double[][] freqData = {
+            { 1.0, 2.0, 3.0 },
+            { 3.0, 5.0, 7.0 }
+        };
+        for (int i = 0; i < freqData.length; i++) {
+            xml.setATWDFrequency(i, freqData[i][0], freqData[i][1],
+                                 freqData[i][2]);
+        }
+
+        final double hvGainSlope = 12.34;
+        final double hvGainIntercept = 56.78;
+        final double hvGainRegression = 90.12;
+        xml.setHvGain(hvGainSlope, hvGainIntercept, hvGainRegression);
+
+        HVHistogram[] histo = new HVHistogram[2];
+        for (int i = 0; i < histo.length; i++) {
+            float[] paramVals = new float[] {
+                (float) i + 12.3456f,
+                (float) i + 6.78901f,
+                (float) i + 6.54321f,
+                (float) i + 1.23456f,
+                (float) i + 65.4321f,
+            };
+
+            float[] charge = new float[250];
+            float[] count = new float[250];
+            for (int j = 0; j < 250; j++) {
+                charge[i] = (float) j * 0.016f;
+                count[i] = (float) (j % 16) + (i == 0 ? 13.0f : 17.0f);
+            }
+
+            histo[i] = new HVHistogram((short) (1400 + (i * 100)), paramVals,
+                                       charge, count, (i == 0),
+                                       (float) i + 1.23456f,
+                                       1234.0f + ((float) i * 2.3456f),
+                                       (i == 1));
+        };
+        xml.setHvHistograms(histo);
+
+        final String mainbdTagSerial = "V01 23";
+        final String domTagSerial = "XX401P0123";
+
+        MockCalDB calDB = new MockCalDB();
+
+        MockStatement stmt;
+
+        stmt = new MockStatement("LoadStmt");
+        calDB.addActualStatement(stmt);
+
+        Laboratory lab = FakeUtil.fakeLab(stmt, 10, 1, 100000);
+        calDB.setLaboratory(lab);
+
+        if (!ProductType.isInitialized()) {
+            MockSQLUtil.addProductTypeSQL(stmt, MockSQLUtil.DOM_TYPE_ID,
+                                          MockSQLUtil.MAINBD_TYPE_ID);
+        }
+
+        MockSQLUtil.addProductSQL(stmt, MockSQLUtil.MAINBD_TYPE_ID,
+                                  mbHardSerial, MockSQLUtil.MAINBD_ID,
+                                  mainbdTagSerial, MockSQLUtil.DOM_TYPE_ID,
+                                  MockSQLUtil.DOM_ID, domTagSerial);
+
+        MockSQLUtil.addMainSQL(stmt, MockSQLUtil.DOM_ID, date, temp,
+                               Integer.MIN_VALUE);
+
+        stmt = new MockStatement("SaveStmt");
+        calDB.addActualStatement(stmt);
+
+        MockSQLUtil.addProductSQL(stmt, MockSQLUtil.MAINBD_TYPE_ID,
+                                  mbHardSerial, MockSQLUtil.MAINBD_ID,
+                                  mainbdTagSerial, MockSQLUtil.DOM_TYPE_ID,
+                                  MockSQLUtil.DOM_ID, domTagSerial);
+
+        final int domcalId = lab.getMinimumId() + 10;
+
+        MockSQLUtil.addMainInsertSQL(stmt, lab, MockSQLUtil.DOM_ID, domcalId,
+                                     date, temp);
+        MockSQLUtil.addChanValInsertSQL(stmt, "ADC", domcalId, adcs);
+        MockSQLUtil.addChanValInsertSQL(stmt, "DAC", domcalId, dacs);
+
+        MockSQLUtil.addModelTypeSQL(stmt);
+        MockSQLUtil.addParamTypeSQL(stmt);
+
+        MockSQLUtil.addPulserInsertSQL(stmt, domcalId, pulserSlope,
+                                       pulserIntercept, pulserRegression);
+
+        MockSQLUtil.addATWDInsertSQL(stmt, domcalId, atwdData);
+        MockSQLUtil.addAmpGainInsertSQL(stmt, domcalId, ampGain, ampError);
+        MockSQLUtil.addATWDFreqInsertSQL(stmt, domcalId, freqData);
+        MockSQLUtil.addHvGainInsertSQL(stmt, domcalId,
+                                       hvGainSlope, hvGainIntercept,
+                                       hvGainRegression);
+        MockSQLUtil.addHvHistoInsertSQL(stmt, domcalId, histo);
+
+        final String xmlStr = xml.toString();
+
+        File tmpFile = File.createTempFile("tst", ".xml");
+        tmpFile.deleteOnExit();
+
+        FileOutputStream out = new FileOutputStream(tmpFile);
+        out.write(xml.toString().getBytes());
+        out.close();
+
+        Logger logger = Logger.getLogger(getClass());
+
+        CalibratorDB.save(tmpFile.getAbsolutePath(), logger, calDB, true); 
+    }
+
+    public void testLoad()
+        throws DOMCalibrationException, DOMProdTestException, IOException,
+               SQLException
+    {
+        final Date date = Date.valueOf("2004-03-02");
+        final String mbHardSerial = "13579bdf048c";
+        final double temp = 12.34;
+
+        MockStatement stmt = new MockStatement("LoadStmt");
+
+        Laboratory lab = FakeUtil.fakeLab(stmt, 10, 1, 100000);
+
+        if (!ProductType.isInitialized()) {
+            MockSQLUtil.addProductTypeSQL(stmt, MockSQLUtil.DOM_TYPE_ID,
+                                          MockSQLUtil.MAINBD_TYPE_ID);
+        }
+
+        final String mainbdTagSerial = "V01 23";
+        final String domTagSerial = "XX401P0123";
+
+        MockSQLUtil.addProductSQL(stmt, MockSQLUtil.MAINBD_TYPE_ID,
+                                  mbHardSerial, MockSQLUtil.MAINBD_ID,
+                                  mainbdTagSerial, MockSQLUtil.DOM_TYPE_ID,
+                                  MockSQLUtil.DOM_ID, domTagSerial);
+
+        final int domcalId = lab.getMinimumId() + 10;
+
+        MockSQLUtil.addMainSQL(stmt, MockSQLUtil.DOM_ID, date, temp, domcalId);
+
+        final short[] dacs = new short[] {
+             0,  1,  2,  3,  4,  5,  6,  7, 8,  9, 10, 11, 12, 13, 14, 15,
+        };
+        final short[] adcs = new short[] {
+             0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,
+            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
+        };
+
+        MockSQLUtil.addChanValSQL(stmt, "ADC", domcalId, adcs);
+        MockSQLUtil.addChanValSQL(stmt, "DAC", domcalId, dacs);
+
+        final double pulserSlope = 1.23;
+        final double pulserIntercept = 4.56;
+        final double pulserRegression = 7.89;
+
+        MockSQLUtil.addPulserSQL(stmt, domcalId, pulserSlope,
+                                 pulserIntercept, pulserRegression);
+
+        final double[][][] atwdData = new double[8][128][3];
+        for (int c = 0; c < atwdData.length; c++) {
+            for (int b = 0; b < atwdData[c].length; b++) {
+                fillATWDData(atwdData, c, b);
+            }
+        }
+
+        MockSQLUtil.addATWDSQL(stmt, domcalId, atwdData);
+
+        final double[] ampGain = new double[3];
+        final double[] ampError = new double[3];
+        for (int i = 0; i < 3; i++) {
+            ampGain[i] = (double) i * 100.0;
+            ampError[i] = 100.0 - (double) i;
+        }
+
+        MockSQLUtil.addAmpGainSQL(stmt, domcalId, ampGain, ampError);
+
+        final double[][] freqData = {
+            { 1.0, 2.0, 3.0 },
+            { 3.0, 5.0, 7.0 }
+        };
+
+        MockSQLUtil.addATWDFreqSQL(stmt, domcalId, freqData);
+
+        final double hvGainSlope = 12.34;
+        final double hvGainIntercept = 56.78;
+        final double hvGainRegression = 90.12;
+
+        MockSQLUtil.addHvGainSQL(stmt, domcalId, hvGainSlope, hvGainIntercept,
+                                 hvGainRegression);
+
+        HVHistogram[] histo = new HVHistogram[2];
+        for (int i = 0; i < histo.length; i++) {
+            float[] paramVals = new float[] {
+                (float) i + 12.3456f,
+                (float) i + 6.78901f,
+                (float) i + 6.54321f,
+                (float) i + 1.23456f,
+                (float) i + 65.4321f,
+            };
+
+            float[] charge = new float[250];
+            float[] count = new float[250];
+            for (int j = 0; j < 250; j++) {
+                charge[i] = (float) j * 0.016f;
+                count[i] = (float) (j % 16) + (i == 0 ? 13.0f : 17.0f);
+            }
+
+            histo[i] = new HVHistogram((short) (1400 + (i * 100)), paramVals,
+                                       charge, count, (i == 0),
+                                       (float) i + 1.23456f,
+                                       1234.0f + ((float) i * 2.3456f),
+                                       (i == 1));
+        };
+
+        MockSQLUtil.addHvHistoSQL(stmt, domcalId, histo);
+
+        MockCalDB calDB = new MockCalDB();
+        calDB.addActualStatement(stmt);
+
+        calDB.setLaboratory(lab);
+
+        Calibrator cal = calDB.load(mbHardSerial, date, temp);
+    }
+
+    public void testCompare()
+        throws DOMCalibrationException, DOMProdTestException, IOException,
+               SQLException
+    {
+        final Date date = Date.valueOf("2004-03-02");
+        final String mbHardSerial = "0123456789ab";
+        final double temp = -40.5;
+
+        FakeCalXML xml = new FakeCalXML(date, mbHardSerial, temp);
+
+        final short[] dacs = new short[] {
+             0,  1,  2,  3,  4,  5,  6,  7, 8,  9, 10, 11, 12, 13, 14, 15,
+        };
+        final short[] adcs = new short[] {
+             0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,
+            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
+        };
+
+        xml.setDACs(dacs);
+        xml.setADCs(adcs);
+
+        final double pulserSlope = 1.23;
+        final double pulserIntercept = 4.56;
+        final double pulserRegression = 7.89;
+        xml.setPulser(pulserSlope, pulserIntercept, pulserRegression);
+
+        final double[][][] atwdData = new double[8][128][3];
+        for (int c = 0; c < atwdData.length; c++) {
+            for (int b = 0; b < atwdData[c].length; b++) {
+                fillATWDData(atwdData, c, b);
+                xml.setATWD(c, b, atwdData[c][b][MockSQLUtil.SLOPE_INDEX],
+                            atwdData[c][b][MockSQLUtil.INTERCEPT_INDEX],
+                            atwdData[c][b][MockSQLUtil.REGRESSION_INDEX]);
+            }
+        }
+
+        final double[] ampGain = new double[3];
+        final double[] ampError = new double[3];
+        for (int i = 0; i < 3; i++) {
+            ampGain[i] = (double) i * 100.0;
+            ampError[i] = 100.0 - (double) i;
+
+            xml.setAmplifier(i, ampGain[i], ampError[i]);
+        }
+
+        final double[][] freqData = {
+            { 1.0, 2.0, 3.0 },
+            { 3.0, 5.0, 7.0 }
+        };
+        for (int i = 0; i < freqData.length; i++) {
+            xml.setATWDFrequency(i, freqData[i][0], freqData[i][1],
+                                 freqData[i][2]);
+        }
+
+        final double hvGainSlope = 12.34;
+        final double hvGainIntercept = 56.78;
+        final double hvGainRegression = 90.12;
+        xml.setHvGain(hvGainSlope, hvGainIntercept, hvGainRegression);
+
+        HVHistogram[] histo = new HVHistogram[2];
+        for (int i = 0; i < histo.length; i++) {
+            float[] paramVals = new float[] {
+                (float) i + 12.3456f,
+                (float) i + 6.78901f,
+                (float) i + 6.54321f,
+                (float) i + 1.23456f,
+                (float) i + 65.4321f,
+            };
+
+            float[] charge = new float[250];
+            float[] count = new float[250];
+            for (int j = 0; j < 250; j++) {
+                charge[i] = (float) j * 0.016f;
+                count[i] = (float) (j % 16) + (i == 0 ? 13.0f : 17.0f);
+            }
+
+            histo[i] = new HVHistogram((short) (1400 + (i * 100)), paramVals,
+                                       charge, count, (i == 0),
+                                       (float) i + 1.23456f,
+                                       1234.0f + ((float) i * 2.3456f),
+                                       (i == 1));
+        };
+        xml.setHvHistograms(histo);
+
+        final String xmlStr = xml.toString();
+
+        ByteArrayInputStream strIn =
+            new ByteArrayInputStream(xmlStr.getBytes());
+
+        Calibrator fiCal = new Calibrator(strIn);
+
+        final String mainbdTagSerial = "V01 23";
+        final String domTagSerial = "XX401P0123";
+
+        MockStatement stmt = new MockStatement("LoadStmt");
+
+        Laboratory lab = FakeUtil.fakeLab(stmt, 10, 1, 100000);
+
+        final int domcalId = lab.getMinimumId() + 10;
+
+        if (!ProductType.isInitialized()) {
+            MockSQLUtil.addProductTypeSQL(stmt, MockSQLUtil.DOM_TYPE_ID,
+                                          MockSQLUtil.MAINBD_TYPE_ID);
+        }
+
+        MockSQLUtil.addProductSQL(stmt, MockSQLUtil.MAINBD_TYPE_ID,
+                                  mbHardSerial, MockSQLUtil.MAINBD_ID,
+                                  mainbdTagSerial, MockSQLUtil.DOM_TYPE_ID,
+                                  MockSQLUtil.DOM_ID, domTagSerial);
+
+        MockSQLUtil.addMainSQL(stmt, MockSQLUtil.DOM_ID, date, temp, domcalId);
+
+        MockSQLUtil.addChanValSQL(stmt, "ADC", domcalId, adcs);
+        MockSQLUtil.addChanValSQL(stmt, "DAC", domcalId, dacs);
+        MockSQLUtil.addPulserSQL(stmt, domcalId, pulserSlope,
+                                 pulserIntercept, pulserRegression);
+        MockSQLUtil.addATWDSQL(stmt, domcalId, atwdData);
+        MockSQLUtil.addAmpGainSQL(stmt, domcalId, ampGain, ampError);
+        MockSQLUtil.addATWDFreqSQL(stmt, domcalId, freqData);
+        MockSQLUtil.addHvGainSQL(stmt, domcalId, hvGainSlope, hvGainIntercept,
+                                 hvGainRegression);
+        MockSQLUtil.addHvHistoSQL(stmt, domcalId, histo);
+
+        MockCalDB calDB = new MockCalDB();
+        calDB.addActualStatement(stmt);
+
+        calDB.setLaboratory(lab);
+
+        Calibrator dbCal = calDB.load(mbHardSerial, date, temp);
+
+        assertTrue("Loaded calibrator doesn't match DB calibrator",
+                   CalibratorComparator.compare(fiCal, dbCal, true) == 0);
+    }
+
+    public static void main(String args[])
+    {
+        junit.textui.TestRunner.run(suite());
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/test/CalibratorTest.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/test/CalibratorTest.java:1.1
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/src/icecube/daq/domcal/test/CalibratorTest.java	Fri Oct 29 14:05:01 2004
@@ -0,0 +1,104 @@
+package icecube.daq.domcal.test;
+
+import java.io.FileInputStream;
+import java.io.InputStream;
+
+import java.util.Calendar;
+import java.util.GregorianCalendar;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.apache.log4j.BasicConfigurator;
+
+import icecube.daq.domcal.Calibrator;
+
+/**
+ *  Calibrator test case.
+ *
+ *  @author kael
+ *
+ */
+public class CalibratorTest extends TestCase {
+
+    private Calibrator cal;
+    private int dacs[] = {
+        850, 2097, 3000, 2048, 850, 2097, 3000, 1925,
+          0,   0,     0,    0,   0,    0,    0,    0
+    };
+    // 1st 8 ADC values
+    private int adcs[] = {
+         21, 988, 863, 509,  90,  36,  88, 130
+    };
+
+    /**
+     * The test entry point
+     * @return TestSuite object defining all tests to be run
+     */
+    public static TestSuite suite() {
+        /* Setup the logging infrastructure */
+        BasicConfigurator.configure();
+
+        return new TestSuite(CalibratorTest.class);
+    }
+
+    protected void setUp() throws Exception {
+
+        super.setUp();
+
+        try {
+            InputStream is =
+                new FileInputStream("resources/test/f771bb4dce28.xml");
+            cal = new Calibrator(is);
+            is.close();
+        } catch (Exception ex) {
+            throw new Exception(ex);
+        }
+
+    }
+
+    /**
+     * Test that DOM id has been properly extracted
+     */
+    public void testDOMId() {
+        assertEquals("f771bb4dce28", cal.getDOMId());
+    }
+
+    public void testDate() {
+        Calendar ref = new GregorianCalendar(2004, Calendar.JUNE, 30);
+        // DateFormat df = DateFormat.getDateTimeInstance();
+        assertEquals(ref, cal.getCalendar());
+    }
+
+    /**
+     * Test that temperature tag has been properly extracted
+     */
+    public void testTemperature() {
+        assertEquals(27, cal.getTemperature(),1.0);
+    }
+
+    public void testADCs() {
+        for (int i = 0; i < 8; i++) {
+            assertEquals(adcs[i], cal.getADC(i));
+        }
+    }
+
+    public void testDACs() {
+        for (int i = 0; i < dacs.length; i++) {
+            assertEquals(dacs[i], cal.getDAC(i));
+        }
+    }
+
+    public void testATWDFit() {
+        // spot check some of the ATWD fits
+        assertEquals(cal.getATWDFitParam(1, 24, "slope"), -0.002002, 1.0E-06);
+        assertEquals(cal.getATWDFitParam(1, 24, "intercept"), 2.656618, 1.0E-06);
+        assertEquals(cal.getATWDFitParam(6, 115, "r"), 0.9999903, 1.0E-06);
+    }
+
+    public void testFrequencyFit() {
+        assertEquals(cal.calcAtwdFreq(1000, 0), 15.993, 0.001);
+        assertEquals(cal.calcAtwdFreq(1000, 1), 15.825, 0.001);
+    }
+
+}
Index: dom-cal/src/icecube/daq/domcal/test/FakeCalXML.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/test/FakeCalXML.java:1.2
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/src/icecube/daq/domcal/test/FakeCalXML.java	Sun Dec 26 07:16:10 2004
@@ -0,0 +1,376 @@
+package icecube.daq.domcal.test;
+
+import icecube.daq.domcal.HVHistogram;
+
+import java.text.FieldPosition;
+import java.text.SimpleDateFormat;
+
+import java.util.Date;
+
+class FakeCalXML
+{
+    private static final String DEFAULT_MODEL = "linear";
+    private static final int NUM_AMP_CHANNELS = 3;
+    private static final SimpleDateFormat dateFmt =
+        new SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy");
+
+    private Date date;
+    private String domId;
+    private double temp;
+    private short[] dac;
+    private short[] adc;
+    private FitData pulser;
+    private FitData[][] atwd;
+    private double[] ampGain;
+    private double[] ampError;
+    private FitData[] atwdFreq;
+    private FitData hvGain;
+    private HVHistogram[] histo;
+
+    FakeCalXML(Date date, String domId, double temp)
+    {
+        this.date = date;
+        this.domId = domId;
+        this.temp = temp;
+
+        dac = new short[16];
+        for (int i = 0; i < dac.length; i++) {
+            dac[i] = -1;
+        }
+
+        adc = new short[24];
+        for (int i = 0; i < adc.length; i++) {
+            adc[i] = -1;
+        }
+
+        pulser = null;
+
+        atwd = new FitData[8][128];
+
+        ampGain = new double[NUM_AMP_CHANNELS];
+        ampError = new double[NUM_AMP_CHANNELS];
+        for (int i = 0; i < NUM_AMP_CHANNELS; i++) {
+            ampGain[i] = Double.NaN;
+            ampError[i] = Double.NaN;
+        }
+
+        atwdFreq = new FitData[2];
+
+        hvGain = null;
+        histo = null;
+    }
+
+    private static final void appendArray(StringBuffer buf, short[] array,
+                                          String tag)
+    {
+        for (int i = 0; i < array.length; i++) {
+            if (array[i] >= 0) {
+                buf.append("<");
+                buf.append(tag);
+                buf.append(" channel=\"");
+                buf.append(i);
+                buf.append("\">");
+                buf.append(array[i]);
+                buf.append("</");
+                buf.append(tag);
+                buf.append(">");
+            }
+        }
+    }
+
+    private static final void appendFitData(StringBuffer buf, String tag,
+                                            String chanName, int channel,
+                                            String binName, int bin,
+                                            FitData data)
+    {
+        if (data != null) {
+            buf.append("<");
+            buf.append(tag);
+            if (chanName != null) {
+                buf.append(' ');
+                buf.append(chanName);
+                buf.append("=\"");
+                buf.append(channel);
+                buf.append("\"");
+            }
+            if (binName != null) {
+                buf.append(' ');
+                buf.append(binName);
+                buf.append("=\"");
+                buf.append(bin);
+                buf.append("\"");
+            }
+            buf.append("><fit model=\"");
+            buf.append(data.getModel());
+            buf.append("\"><param name=\"slope\">");
+            buf.append(data.getSlope());
+            buf.append("</param><param name=\"intercept\">");
+            buf.append(data.getIntercept());
+            buf.append("</param><regression-coeff>");
+            buf.append(data.getRegression());
+            buf.append("</regression-coeff></fit></");
+            buf.append(tag);
+            buf.append(">");
+        }
+    }
+
+    private static final void appendHistogram(StringBuffer buf, String tag,
+                                              HVHistogram hg)
+    {
+            buf.append("<");
+            buf.append(tag);
+            buf.append(" voltage=\"");
+            buf.append(hg.getVoltage());
+            buf.append("\" convergent=\"");
+            buf.append(hg.isConvergent() ? "true" : "false");
+            buf.append("\" pv=\"");
+            buf.append(hg.getPV());
+            buf.append("\" noiseRate=\"");
+            buf.append(hg.getNoiseRate());
+            buf.append("\" isFilled=\"");
+            buf.append(hg.isFilled() ? "true" : "false");
+            buf.append("\">");
+
+            float[] paramVals = hg.getFitParams();
+
+            for (int i = 0; i < paramVals.length; i++) {
+                buf.append("<param name=\"");
+                buf.append(HVHistogram.getParameterName(i));
+                buf.append("\">");
+                buf.append(paramVals[i]);
+                buf.append("</param>");
+            }
+
+            float[] charge = hg.getXVals();
+            float[] count = hg.getYVals();
+
+            buf.append("<histogram bins=\"");
+            buf.append(charge.length);
+            buf.append("\">");
+            for (int i = 0; i < charge.length; i++) {
+                buf.append("<bin num=\"");
+                buf.append(i);
+                buf.append("\" charge=\"");
+                buf.append(charge[i]);
+                buf.append("\" count=\"");
+                buf.append(count[i]);
+                buf.append("\"></bin>");
+            }
+
+            buf.append("</histogram></");
+            buf.append(tag);
+            buf.append(">");
+    }
+
+    void setADC(int channel, short val)
+    {
+        if (channel < 0 || channel >= adc.length) {
+            throw new Error("Bad ADC channel " + channel);
+        } else if (val < 0 || val > 1023) {
+            throw new Error("Bad ADC value " + val + " for channel " + channel);
+        }
+
+        adc[channel] = val;
+    }
+
+    void setADCs(short[] vals)
+    {
+        if (vals == null) {
+            throw new Error("ADC array cannot be null");
+        } else if (vals.length != adc.length) {
+            throw new Error("ADC array must have " + adc.length + " entries");
+        }
+
+        adc = vals;
+    }
+
+    void setATWD(int channel, int bin, double slope, double intercept,
+                 double regression)
+    {
+        setATWD(channel, bin, DEFAULT_MODEL, slope, intercept, regression);
+    }
+
+    void setATWD(int channel, int bin, String model, double slope,
+                 double intercept, double regression)
+    {
+        if (channel < 0 || channel >= atwd.length) {
+            throw new Error("Bad ATWD channel " + channel);
+        } else if (bin < 0 || bin >= atwd[channel].length) {
+            throw new Error("Bad ATWD bin " + bin + " for channel " + channel);
+        }
+
+        atwd[channel][bin] = new FitData(model, slope, intercept, regression);
+    }
+
+    void setATWDFrequency(int chip, double slope, double intercept,
+                          double regression)
+    {
+        setATWDFrequency(chip, DEFAULT_MODEL, slope, intercept, regression);
+    }
+
+    void setATWDFrequency(int chip, String model, double slope,
+                          double intercept, double regression)
+    {
+        if (chip < 0 || chip >= atwdFreq.length) {
+            throw new Error("Bad ATWD frequency chip " + chip);
+        }
+
+        atwdFreq[chip] = new FitData(model, slope, intercept, regression);
+    }
+
+    void setAmplifier(int channel, double gain, double error)
+    {
+        if (channel < 0 || channel >= NUM_AMP_CHANNELS) {
+            throw new Error("Bad amplifier channel " + channel);
+        }
+
+        ampGain[channel] = gain;
+        ampError[channel] = error;
+    }
+
+    void setDAC(int channel, short val)
+    {
+        if (channel < 0 || channel >= dac.length) {
+            throw new Error("Bad DAC channel " + channel);
+        } else if (val < 0 || val > 1023) {
+            throw new Error("Bad DAC value " + val + " for channel " + channel);
+        }
+
+        dac[channel] = val;
+    }
+
+    void setDACs(short[] vals)
+    {
+        if (vals == null) {
+            throw new Error("DAC array cannot be null");
+        } else if (vals.length != dac.length) {
+            throw new Error("DAC array must have " + dac.length + " entries");
+        }
+
+        dac = vals;
+    }
+
+    void setHvGain(double slope, double intercept, double regression)
+    {
+        hvGain = new FitData(DEFAULT_MODEL, slope, intercept, regression);
+    }
+
+    void setHvHistograms(HVHistogram[] list)
+    {
+        histo = list;
+    }
+
+    void setPulser(double slope, double intercept, double regression)
+    {
+        setPulser(DEFAULT_MODEL, slope, intercept, regression);
+    }
+
+    void setPulser(String model, double slope, double intercept,
+                   double regression)
+    {
+        pulser = new FitData(model, slope, intercept, regression);
+    }
+
+    public String toString()
+    {
+        final String xmlHeader =
+            "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>";
+
+        StringBuffer buf = new StringBuffer(xmlHeader);
+        buf.append("<domcal>");
+
+        buf.append("<date>");
+        synchronized (dateFmt) {
+            dateFmt.format(date, buf, new FieldPosition(0));
+        }
+        buf.append("</date>");
+
+        buf.append("<domid>");
+        buf.append(domId);
+        buf.append("</domid>");
+        
+        buf.append("<temperature format=\"raw\">");
+        int rawTemp = (int) (temp * 256.0);
+        if (rawTemp < 0) {
+            rawTemp += 65536;
+        }
+        buf.append(rawTemp);
+        buf.append("</temperature>");
+
+        appendArray(buf, dac, "dac");
+        appendArray(buf, adc, "adc");
+
+        appendFitData(buf, "pulser", null, -1, null, -1, pulser);
+
+        for (int c = 0; c < atwd.length; c++) {
+            for (int b = 0; b < atwd[c].length; b++) {
+                appendFitData(buf, "atwd", "channel", c, "bin", b, atwd[c][b]);
+            }
+        }
+
+        for (int c = 0; c < NUM_AMP_CHANNELS; c++) {
+            if (!Double.isNaN(ampGain[c]) && !Double.isNaN(ampError[c])) {
+                buf.append("<amplifier channel=\"");
+                buf.append(c);
+                buf.append("\"><gain error=\"");
+                buf.append(ampError[c]);
+                buf.append("\">");
+                buf.append(ampGain[c]);
+                buf.append("</gain></amplifier>");
+            }
+        }
+
+        for (int i = 0; i < atwdFreq.length; i++) {
+            appendFitData(buf, "atwdfreq", "chip", i, null, -1, atwdFreq[i]);
+        }
+
+        appendFitData(buf, "hvGainCal", null, -1, null, -1, hvGain);
+
+        if (histo != null) {
+            for (int i = 0; i < histo.length; i++) {
+                appendHistogram(buf, "histo", histo[i]);
+            }
+        }
+
+        buf.append("</domcal>");
+
+        return buf.toString();
+    }
+
+    class FitData
+    {
+        private String model;
+        private double slope = Double.NaN;
+        private double intercept = Double.NaN;
+        private double regression = Double.NaN;
+
+        FitData(String model, double slope, double intercept,
+                double regression)
+        {
+            this.model = model;
+            this.slope = slope;
+            this.intercept = intercept;
+            this.regression = regression;
+        }
+
+        double getIntercept()
+        {
+            return intercept;
+        }
+
+        String getModel()
+        {
+            return model;
+        }
+
+        double getRegression()
+        {
+            return regression;
+        }
+
+        double getSlope()
+        {
+            return slope;
+        }
+    }
+}
\ No newline at end of file
Index: dom-cal/src/icecube/daq/domcal/test/MockAppender.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/test/MockAppender.java:1.1
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/src/icecube/daq/domcal/test/MockAppender.java	Mon Apr 25 12:40:08 2005
@@ -0,0 +1,165 @@
+package icecube.daq.domcal.test;
+
+import org.apache.log4j.Appender;
+import org.apache.log4j.Layout;
+import org.apache.log4j.Level;
+
+import org.apache.log4j.spi.ErrorHandler;
+import org.apache.log4j.spi.Filter;
+import org.apache.log4j.spi.LocationInfo;
+import org.apache.log4j.spi.LoggingEvent;
+
+/**
+ * Mock log4j appender.
+ */
+public class MockAppender
+    implements Appender
+{
+    /** minimum level of log messages which will be print. */
+    private Level minLevel;
+
+    /**
+     * Create a MockAppender which ignores everything below the WARN level.
+     */
+    public MockAppender()
+    {
+        this(Level.WARN);
+    }
+
+    /**
+     * Create a MockAppender which ignores everything
+     * below the specified level.
+     *
+     * @param minLevel minimum level
+     */
+    public MockAppender(Level minLevel)
+    {
+        this.minLevel = minLevel;
+    }
+
+    /**
+     * Unimplemented.
+     *
+     * @param x0 ???
+     */
+    public void addFilter(Filter x0)
+    {
+        throw new Error("Unimplemented");
+    }
+
+    /**
+     * Unimplemented.
+     */
+    public void clearFilters()
+    {
+        throw new Error("Unimplemented");
+    }
+
+    /**
+     * Nothing needs to be done here.
+     */
+    public void close()
+    {
+        // don't need to do anything
+    }
+
+    /**
+     * Handle a logging event.
+     *
+     * @param evt logging event
+     */
+    public void doAppend(LoggingEvent evt)
+    {
+        if (evt.getLevel().toInt() >= minLevel.toInt()) {
+            LocationInfo loc = evt.getLocationInformation();
+
+            System.out.println(evt.getLoggerName() + " " + evt.getLevel() +
+                               " [" + loc.fullInfo + "] " + evt.getMessage());
+
+            String[] stack = evt.getThrowableStrRep();
+            for (int i = 0; stack != null && i < stack.length; i++) {
+                System.out.println("> " + stack[i]);
+            }
+        }
+    }
+
+    /**
+     * Unimplemented.
+     *
+     * @return ???
+     */
+    public ErrorHandler getErrorHandler()
+    {
+        throw new Error("Unimplemented");
+    }
+
+    /**
+     * Unimplemented.
+     *
+     * @return ???
+     */
+    public Filter getFilter()
+    {
+        throw new Error("Unimplemented");
+    }
+
+    /**
+     * Unimplemented.
+     *
+     * @return ???
+     */
+    public Layout getLayout()
+    {
+        throw new Error("Unimplemented");
+    }
+
+    /**
+     * Unimplemented.
+     *
+     * @return ???
+     */
+    public String getName()
+    {
+        throw new Error("Unimplemented");
+    }
+
+    /**
+     * Unimplemented.
+     *
+     * @return ???
+     */
+    public boolean requiresLayout()
+    {
+        throw new Error("Unimplemented");
+    }
+
+    /**
+     * Unimplemented.
+     *
+     * @param x0 ???
+     */
+    public void setErrorHandler(ErrorHandler x0)
+    {
+        throw new Error("Unimplemented");
+    }
+
+    /**
+     * Unimplemented.
+     *
+     * @param x0 ???
+     */
+    public void setLayout(Layout x0)
+    {
+        throw new Error("Unimplemented");
+    }
+
+    /**
+     * Unimplemented.
+     *
+     * @param s0 ???
+     */
+    public void setName(String s0)
+    {
+        throw new Error("Unimplemented");
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/test/MockCalDB.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/test/MockCalDB.java:1.1
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/src/icecube/daq/domcal/test/MockCalDB.java	Fri Oct 29 14:05:01 2004
@@ -0,0 +1,100 @@
+package icecube.daq.domcal.test;
+
+import icecube.daq.db.domprodtest.DOMProdTestException;
+
+import icecube.daq.db.domprodtest.test.MockConnection;
+import icecube.daq.db.domprodtest.test.MockDOMProdTestDB;
+import icecube.daq.db.domprodtest.test.MockStatement;
+
+import icecube.daq.domcal.CalibratorDB;
+
+import java.io.IOException;
+
+import java.sql.Connection;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+
+class MockCalDB
+    extends CalibratorDB
+{
+    private static ArrayList stmtList = new ArrayList();
+    private static ArrayList usedStmt = new ArrayList();
+
+    MockCalDB()
+        throws DOMProdTestException, IOException, SQLException
+    {
+        super(MockDOMProdTestDB.fakeProperties());
+    }
+
+    public static void addActualStatement(MockStatement stmt)
+    {
+        stmtList.add(stmt);
+    }
+
+    public Connection getConnection()
+    {
+        return new MockConnection();
+    }
+
+    /**
+     * @throws SQLException
+     */
+    public Statement getStatement(Connection conn)
+        throws SQLException
+    {
+        if (stmtList.size() == 0) {
+            throw new SQLException("No available SQL statement");
+        }
+
+        MockStatement stmt = (MockStatement) stmtList.remove(0);
+
+        usedStmt.add(stmt);
+
+        return stmt;
+    }
+
+    /**
+     * @throws SQLException
+     */
+    public Statement getStatement()
+        throws SQLException
+    {
+        if (stmtList.size() == 0) {
+            throw new SQLException("No available SQL statement");
+        }
+
+        MockStatement stmt = (MockStatement) stmtList.remove(0);
+
+        usedStmt.add(stmt);
+
+        return stmt;
+    }
+
+    static void initStatic()
+    {
+        stmtList.clear();
+        usedStmt.clear();
+    }
+
+    static void verifyStatic()
+    {
+        if (stmtList.size() != 0) {
+            System.err.println("" + stmtList.size() +
+                               " statements were not used");
+        }
+
+        Iterator iter = usedStmt.iterator();
+        while (iter.hasNext()) {
+            MockStatement stmt = (MockStatement) iter.next();
+
+            if (!stmt.isClosed()) {
+                try { stmt.close(); } catch (SQLException se) { }
+            }
+
+            stmt.verify();
+        }
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/test/MockSQLUtil.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/test/MockSQLUtil.java:1.6
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/src/icecube/daq/domcal/test/MockSQLUtil.java	Tue May 24 07:54:21 2005
@@ -0,0 +1,571 @@
+package icecube.daq.domcal.test;
+
+import icecube.daq.db.domprodtest.DOMProdTestUtil;
+import icecube.daq.db.domprodtest.Laboratory;
+
+import icecube.daq.db.domprodtest.test.MockResultSet;
+import icecube.daq.db.domprodtest.test.MockStatement;
+
+import icecube.daq.domcal.HVHistogram;
+
+import java.sql.Date;
+
+abstract class MockSQLUtil
+{
+    public static final int MAINBD_TYPE_ID = 111;
+    public static final int DOM_TYPE_ID = 222;
+    public static final int MAINBD_ID = 111222;
+    public static final int DOM_ID = 222111;
+
+    public static final int MODEL_LINEAR_ID = 751;
+    public static final String MODEL_LINEAR_NAME = "linear";
+
+    public static final int PARAM_SLOPE_ID = 878;
+    public static final String PARAM_SLOPE_NAME = "slope";
+    public static final int PARAM_INTERCEPT_ID = 888;
+    public static final String PARAM_INTERCEPT_NAME = "intercept";
+
+    public static final int PARAM_HISTO_0_ID = 890;
+    public static final String PARAM_HISTO_0_NAME =
+        HVHistogram.getParameterName(0);
+    public static final int PARAM_HISTO_1_ID = 891;
+    public static final String PARAM_HISTO_1_NAME =
+        HVHistogram.getParameterName(1);
+    public static final int PARAM_HISTO_2_ID = 892;
+    public static final String PARAM_HISTO_2_NAME =
+        HVHistogram.getParameterName(2);
+    public static final int PARAM_HISTO_3_ID = 893;
+    public static final String PARAM_HISTO_3_NAME =
+        HVHistogram.getParameterName(3);
+    public static final int PARAM_HISTO_4_ID = 894;
+    public static final String PARAM_HISTO_4_NAME =
+        HVHistogram.getParameterName(4);
+    public static final int[] PARAM_HISTO_ID = new int[] {
+        PARAM_HISTO_0_ID, PARAM_HISTO_1_ID, PARAM_HISTO_2_ID, 
+        PARAM_HISTO_3_ID, PARAM_HISTO_4_ID, 
+    };
+
+    public static final int SLOPE_INDEX = 0;
+    public static final int INTERCEPT_INDEX = 1;
+    public static final int REGRESSION_INDEX = 2;
+
+    public static final void addATWDInsertSQL(MockStatement stmt,
+                                              int domcalId,
+                                              double[][][] data)
+    {
+        for (int c = 0; c < data.length; c++) {
+            if (c == 3 || c == 7) {
+                // channels 3 and 7 do not exist
+                continue;
+            }
+            for (int b = 0; b < data[c].length; b++) {
+                final String iStr = "insert into DOMCal_ATWD(domcal_id," +
+                    "channel,bin,dc_model_id,fit_regression)" +
+                    "values(" + domcalId + "," + c + "," + b +
+                    "," + MODEL_LINEAR_ID + "," +
+                    data[c][b][REGRESSION_INDEX] + ")";
+                stmt.addExpectedUpdate(iStr, 1);
+
+                final String sStr = "insert into DOMCal_ATWDParam(domcal_id" +
+                    ",channel,bin,dc_param_id,value)values(" + domcalId + "," +
+                    c + "," + b + "," + PARAM_SLOPE_ID + "," +
+                    data[c][b][SLOPE_INDEX] + ")";
+                stmt.addExpectedUpdate(sStr, 1);
+
+                final String nStr = "insert into DOMCal_ATWDParam(domcal_id" +
+                    ",channel,bin,dc_param_id,value)values(" + domcalId + "," +
+                    c + "," + b + "," + PARAM_INTERCEPT_ID + "," +
+                    data[c][b][INTERCEPT_INDEX] + ")";
+                stmt.addExpectedUpdate(nStr, 1);
+            }
+        }
+    }
+
+    public static final void addATWDSQL(MockStatement stmt, int domcalId,
+                                        double[][][] data)
+    {
+        MockResultSet rsMain = new MockResultSet("ATWDMain");
+        MockResultSet rsParam = new MockResultSet("ATWDParam");
+
+        boolean found = false;
+        for (int c = data.length - 1; c >= 0; c--) {
+            for (int b = data[c].length - 1; b >= 0; b--) {
+                final double regression = data[c][b][REGRESSION_INDEX];
+                rsMain.addActualRow(new Object[] {
+                                        new Integer(c),
+                                        new Integer(b),
+                                        MODEL_LINEAR_NAME,
+                                        new Double(regression),
+                                    });
+
+                final double slope = data[c][b][SLOPE_INDEX];
+                rsParam.addActualRow(new Object[] {
+                                         new Integer(c),
+                                         new Integer(b),
+                                         PARAM_SLOPE_NAME,
+                                         new Double(slope),
+                                     });
+
+                final double intercept = data[c][b][INTERCEPT_INDEX];
+                rsParam.addActualRow(new Object[] {
+                                         new Integer(c),
+                                         new Integer(b),
+                                         PARAM_INTERCEPT_NAME,
+                                         new Double(intercept),
+                                     });
+
+                found = true;
+            }
+        }
+
+        final String mStr =
+            "select da.channel,da.bin,dm.name,da.fit_regression" +
+            " from DOMCal_ATWD da,DOMCal_Model dm where da.domcal_id=" +
+            domcalId + " and da.dc_model_id=dm.dc_model_id" +
+            " order by channel desc,bin desc";
+        stmt.addExpectedQuery(mStr, rsMain);
+
+        if (found) {
+            final String pStr = "select dap.channel,dap.bin,dp.name" +
+                ",dap.value from DOMCal_ATWDParam dap,DOMCal_Param dp" +
+                " where dap.domcal_id=" + domcalId +
+                " and dap.dc_param_id=dp.dc_param_id" +
+                " order by channel desc,bin desc";
+            stmt.addExpectedQuery(pStr, rsParam);
+        }
+    }
+
+    public static final void addATWDFreqInsertSQL(MockStatement stmt,
+                                                  int domcalId,
+                                                  double[][] data)
+    {
+        for (int i = 0; i < data.length; i++) {
+            final String iStr = "insert into DOMCal_ATWDFreq(domcal_id," +
+                "chip,dc_model_id,fit_regression)values(" + domcalId + "," +
+                i + "," + MODEL_LINEAR_ID + "," +
+                data[i][REGRESSION_INDEX] + ")";
+            stmt.addExpectedUpdate(iStr, 1);
+
+            final String sStr =
+                "insert into DOMCal_ATWDFreqParam(domcal_id,chip" +
+                ",dc_param_id,value)values(" + domcalId + "," + i + "," +
+                PARAM_SLOPE_ID + "," +
+                data[i][SLOPE_INDEX] + ")";
+            stmt.addExpectedUpdate(sStr, 1);
+
+            final String nStr =
+                "insert into DOMCal_ATWDFreqParam(domcal_id,chip" +
+                ",dc_param_id,value)values(" + domcalId + "," + i + "," +
+                PARAM_INTERCEPT_ID + "," +
+                data[i][INTERCEPT_INDEX] + ")";
+            stmt.addExpectedUpdate(nStr, 1);
+        }
+    }
+
+    public static final void addATWDFreqSQL(MockStatement stmt, int domcalId,
+                                            double[][] data)
+    {
+        MockResultSet rsMain = new MockResultSet("FreqMain");
+
+        if (data != null && data.length > 0) {
+            MockResultSet rsParam = new MockResultSet("FreqParam");
+            for (int i = data.length - 1; i >= 0; i--) {
+                final double regression = data[i][REGRESSION_INDEX];
+                rsMain.addActualRow(new Object[] {
+                                        new Integer(i),
+                                        MODEL_LINEAR_NAME,
+                                        new Double(regression),
+                                    });
+
+                final double slope = data[i][SLOPE_INDEX];
+                rsParam.addActualRow(new Object[] {
+                                         new Integer(i),
+                                         PARAM_SLOPE_NAME,
+                                         new Double(slope),
+                                     });
+
+                final double intercept = data[i][INTERCEPT_INDEX];
+                rsParam.addActualRow(new Object[] {
+                                         new Integer(i),
+                                         PARAM_INTERCEPT_NAME,
+                                         new Double(intercept),
+                                     });
+            }
+
+            final String pStr = "select dap.chip,dp.name,dap.value" +
+                " from DOMCal_ATWDFreqParam dap,DOMCal_Param dp" +
+                " where dap.domcal_id=" + domcalId +
+                " and dap.dc_param_id=dp.dc_param_id order by chip desc";
+            stmt.addExpectedQuery(pStr, rsParam);
+        }
+
+        final String mStr = "select da.chip,dm.name,da.fit_regression" +
+            " from DOMCal_ATWDFreq da,DOMCal_Model dm" +
+            " where da.domcal_id=" + domcalId +
+            " and da.dc_model_id=dm.dc_model_id" +
+            " order by chip desc";
+        stmt.addExpectedQuery(mStr, rsMain);
+    }
+
+    public static final void addAmpGainInsertSQL(MockStatement stmt,
+                                                 int domcalId,
+                                                 double[] gain,
+                                                 double[] error)
+    {
+        for (int i = 0; i < gain.length; i++) {
+            final String iStr =
+                "insert into DOMCal_AmpGain(domcal_id,channel,gain,error)" +
+                "values(" + domcalId + "," + i + "," + gain[i] + "," +
+                error[i] + ")";
+            stmt.addExpectedUpdate(iStr, 1);
+        }
+    }
+
+    public static final void addAmpGainSQL(MockStatement stmt, int domcalId,
+                                           double[] gain, double[] error)
+    {
+        final String qStr = "select channel,gain,error from DOMCal_AmpGain" +
+            " where domcal_id=" + domcalId + " order by channel desc";
+
+        MockResultSet rs = new MockResultSet("AmpGain");
+        for (int i = gain.length - 1; i >= 0; i--) {
+            rs.addActualRow(new Object[] {
+                                new Integer(i),
+                                new Double(gain[i]),
+                                new Double(error[i]),
+                            });
+        }
+        stmt.addExpectedQuery(qStr, rs);
+    }
+
+    public static final void addChanValInsertSQL(MockStatement stmt,
+                                                 String tblPart,
+                                                 int id, short[] list)
+    {
+        for (int i = 0; i < list.length; i++) {
+            final String iStr = "insert into DOMCal_" + tblPart +
+                "(domcal_id,channel,value)values(" + id + "," + i + "," +
+                list[i] + ")";
+            stmt.addExpectedUpdate(iStr, 1);
+        }
+    }
+
+    public static final void addChanValSQL(MockStatement stmt, String tblPart,
+                                           int domcalId, short[] list)
+    {
+        final String qStr = "select channel,value from DOMCal_" + tblPart +
+            " where domcal_id=" + domcalId + " order by channel desc";
+
+        MockResultSet rs = new MockResultSet(tblPart + "ChanVal");
+        for (int i = list.length - 1; i >= 0; i--) {
+            rs.addActualRow(new Object[] {
+                                new Integer(i),
+                                new Integer(list[i]),
+                            });
+        }
+        stmt.addExpectedQuery(qStr, rs);
+    }
+
+    public static final void addHvGainInsertSQL(MockStatement stmt,
+                                                int domcalId,
+                                                double slope,
+                                                double intercept,
+                                                double regression)
+    {
+        final String iStr =
+            "insert into DOMCal_HvGain(domcal_id,slope,intercept,regression)" +
+            "values(" + domcalId + "," + slope + "," + intercept + "," +
+            regression + ")";
+        stmt.addExpectedUpdate(iStr, 1);
+    }
+
+    public static final void addHvGainSQL(MockStatement stmt, int domcalId,
+                                          double slope, double intercept,
+                                          double regression)
+    {
+        final String qStr = "select slope,intercept,regression" +
+            " from DOMCal_HvGain where domcal_id=" + domcalId;
+
+        stmt.addExpectedQuery(qStr, "HvGainQry", new Object[] {
+                                  new Double(slope),
+                                  new Double(intercept),
+                                  new Double(regression),
+                              });
+    }
+
+    public static final void addHvHistoInsertSQL(MockStatement stmt,
+                                                 int domcalId,
+                                                 HVHistogram[] histo)
+    {
+        if (histo != null) {
+            for (int i = 0; i < histo.length; i++) {
+                addHvHistoInsertSQL(stmt, domcalId, histo[i], i);
+            }
+        }
+    }
+
+    public static final void addHvHistoInsertSQL(MockStatement stmt,
+                                                 int domcalId,
+                                                 HVHistogram histo, int num)
+    {
+        final String iStr =
+            "insert into DOMCal_ChargeMain(domcal_id,dc_histo_num,voltage," +
+            "convergent,pv,noise_rate,is_filled)values(" + domcalId + "," +
+            num + "," + histo.getVoltage() + "," +
+            (histo.isConvergent() ? 1 : 0) + "," + histo.getPV() + "," +
+            histo.getNoiseRate() + "," + (histo.isFilled() ? 1 : 0) + ")";
+
+        stmt.addExpectedUpdate(iStr, 1);
+
+        float[] paramVals = histo.getFitParams();
+
+        for (int i = 0; i < paramVals.length; i++) {
+            int paramId = PARAM_HISTO_ID[i];
+
+            final String pStr =
+                "insert into DOMCal_ChargeParam(domcal_id,dc_histo_num" +
+                ",dc_param_id,value)values(" + domcalId + "," + num + "," +
+                paramId + "," + paramVals[i] + ")";
+
+            stmt.addExpectedUpdate(pStr, 1);
+        }
+
+        float[] charge = histo.getXVals();
+        float[] count = histo.getYVals();
+
+        for (int i = 0; i < charge.length; i++) {
+            final String dStr =
+                "insert into DOMCal_ChargeData(domcal_id,dc_histo_num" +
+                ",bin,charge,count)values(" + domcalId + "," + num + "," +
+                i + "," + charge[i] + "," + count[i] + ")";
+
+            stmt.addExpectedUpdate(dStr, 1);
+        }
+    }
+
+    public static final void addHvHistoSQL(MockStatement stmt, int domcalId,
+                                           HVHistogram[] histo)
+    {
+        int num = 0;
+        if (histo != null) {
+            for ( ; num < histo.length; num++) {
+                addHvHistoSQL(stmt, domcalId, histo[num], num);
+            }
+        }
+
+        addHvHistoSQL(stmt, domcalId, null, num);
+    }
+
+    public static final void addHvHistoSQL(MockStatement stmt, int domcalId,
+                                           HVHistogram histo, int num)
+    {
+        final String qStr = "select voltage,convergent,pv,noise_rate" +
+            ",is_filled from DOMCal_ChargeMain where domcal_id=" +
+            domcalId + " and dc_histo_num=" + num;
+
+        if (histo == null) {
+            stmt.addExpectedQuery(qStr, "ChargeFinal", null);
+            return;
+        }
+
+        final Object[] qryObjs = new Object[] {
+            new Short(histo.getVoltage()),
+            (histo.isConvergent() ? Boolean.TRUE : Boolean.FALSE),
+            new Float(histo.getPV()),
+            new Float(histo.getNoiseRate()),
+            (histo.isFilled() ? Boolean.TRUE : Boolean.FALSE),
+        };
+        stmt.addExpectedQuery(qStr, "ChargeMain#" + num, qryObjs);
+
+        float[] params = histo.getFitParams();
+
+        MockResultSet rsParam = new MockResultSet("HistoParams#" + num);
+        for (int i = 0; i < params.length; i++) {
+            rsParam.addActualRow(new Object[] {
+                                     HVHistogram.getParameterName(i),
+                                     new Float(params[i]),
+                                 });
+        }
+
+        final String pStr = "select dp.name,cp.value" +
+            " from DOMCal_ChargeParam cp,DOMCal_Param dp" +
+            " where cp.domcal_id=" + domcalId +
+            " and cp.dc_histo_num=" + num +
+            " and cp.dc_param_id=dp.dc_param_id";
+        stmt.addExpectedQuery(pStr, rsParam);
+
+        float[] charge = histo.getXVals();
+        float[] count = histo.getYVals();
+
+        MockResultSet rsData = new MockResultSet("HistoData#" + num);
+        for (int i = charge.length - 1; i >= 0; i--) {
+            rsData.addActualRow(new Object[] {
+                                    new Integer(i),
+                                    new Float(charge[i]),
+                                    new Float(count[i]),
+                                });
+        }
+
+        final String dStr =
+            "select bin,charge,count from DOMCal_ChargeData" +
+            " where domcal_id=" + domcalId +
+            " and dc_histo_num=" + num +
+            " order by bin desc";
+
+        stmt.addExpectedQuery(dStr, rsData);
+    }
+
+    public static final void addMainInsertSQL(MockStatement stmt,
+                                              Laboratory lab, int prodId,
+                                              int id, Date date, double temp)
+    {
+        stmt.addExpectedUpdate("lock tables DOMCalibration write", 1);
+
+        final String qStr = "select max(domcal_id) from DOMCalibration" +
+            " where domcal_id>=" + lab.getMinimumId() +
+            " and domcal_id<=" + lab.getMaximumId();
+        final Object[] qryObjs = new Object[] { new Integer(id - 1) };
+        stmt.addExpectedQuery(qStr, "MaxDOMCalId", qryObjs);
+
+        final String iStr =
+            "insert into DOMCalibration(domcal_id,prod_id,date,temperature)" +
+            "values(" + id + "," + prodId +
+            "," + DOMProdTestUtil.quoteString(date.toString()) + "," + temp +
+            ")";
+        stmt.addExpectedUpdate(iStr, 1);
+
+        stmt.addExpectedUpdate("unlock tables", 1);
+    }
+
+    public static final void addMainSQL(MockStatement stmt, int prodId,
+                                        Date date, double temp, int domcalId)
+    {
+        final String qStr = "select domcal_id,date,temperature" +
+            " from DOMCalibration where prod_id=" + prodId +
+            (date == null ? "" : " and date<=" +
+             DOMProdTestUtil.quoteString(date.toString())) +
+            (Double.isNaN(temp) ? "" : " and temperature>=" + (temp - 5.0) +
+             " and temperature<=" + (temp + 5.0)) +
+            " order by date desc";
+
+        if (domcalId < 0) {
+            stmt.addExpectedQuery(qStr, "mainQry", null);
+        } else {
+            final Object[] qryObjs = new Object[] {
+                new Integer(domcalId),
+                date,
+                new Double(temp)
+            };
+            stmt.addExpectedQuery(qStr, "mainQry", qryObjs);
+        }
+    }
+
+    public static final void addModelTypeSQL(MockStatement stmt)
+    {
+        final String qStr =
+            "select dc_model_id,name from DOMCal_Model order by dc_model_id";
+        final Object[] qryObjs = new Object[] {
+            new Integer(MODEL_LINEAR_ID), MODEL_LINEAR_NAME };
+        stmt.addExpectedQuery(qStr, "ModelId", qryObjs);
+    }
+
+    public static final void addParamTypeSQL(MockStatement stmt)
+    {
+        final String qStr =
+            "select dc_param_id,name from DOMCal_Param order by dc_param_id";
+        MockResultSet rs = new MockResultSet("Params");
+        rs.addActualRow(new Object[] {
+                            new Integer(PARAM_SLOPE_ID),
+                            PARAM_SLOPE_NAME
+                        });
+        rs.addActualRow(new Object[] {
+                            new Integer(PARAM_INTERCEPT_ID),
+                            PARAM_INTERCEPT_NAME
+                        });
+        for (int i = 0; i < PARAM_HISTO_ID.length; i++) {
+            rs.addActualRow(new Object[] {
+                                new Integer(PARAM_HISTO_ID[i]),
+                                HVHistogram.getParameterName(i),
+                            });
+        }
+        stmt.addExpectedQuery(qStr, rs);
+    }
+
+    public static final void addProductTypeSQL(MockStatement stmt,
+                                               int domTypeId, int mainbdTypeId)
+    {
+        icecube.daq.db.domprodtest.test.MockSQLUtil.addProductTypeQueries(stmt, domTypeId, mainbdTypeId);
+    }
+
+    public static final void addProductSQL(MockStatement stmt,
+                                           int mainbdTypeId,
+                                           String mbHardSerial, int mainbdId,
+                                           String mbTagSerial, int domTypeId,
+                                           int domId, String domTagSerial)
+    {
+        icecube.daq.db.domprodtest.test.MockSQLUtil.addDOMQueries(stmt,
+                                                                  mainbdTypeId,
+                                                                  mbHardSerial,
+                                                                  mainbdId,
+                                                                  Integer.MAX_VALUE,
+                                                                  mbTagSerial,
+                                                                  domTypeId,
+                                                                  domId,
+                                                                  domTagSerial);
+    }
+
+    public static final void addPulserInsertSQL(MockStatement stmt,
+                                                int domcalId,
+                                                double slope,
+                                                double intercept,
+                                                double regression)
+    {
+        final String rStr =
+            "insert into DOMCal_Pulser(domcal_id,dc_model_id,fit_regression)" +
+            "values(" + domcalId + "," + MODEL_LINEAR_ID + "," + regression +
+            ")";
+        stmt.addExpectedUpdate(rStr, 1);
+
+        final String sStr =
+            "insert into DOMCal_PulserParam(domcal_id,dc_param_id,value)" +
+            "values(" + domcalId + "," + PARAM_SLOPE_ID + "," + slope + ")";
+        stmt.addExpectedUpdate(sStr, 1);
+
+        final String iStr =
+            "insert into DOMCal_PulserParam(domcal_id,dc_param_id,value)" +
+            "values(" + domcalId + "," + PARAM_INTERCEPT_ID + "," +
+            intercept + ")";
+        stmt.addExpectedUpdate(iStr, 1);
+    }
+
+    public static final void addPulserSQL(MockStatement stmt, int domcalId,
+                                          double slope, double intercept,
+                                          double regression)
+    {
+        final String qStr = "select dm.name,dp.fit_regression" +
+            " from DOMCal_Pulser dp,DOMCal_Model dm where dp.domcal_id=" +
+            domcalId + " and dp.dc_model_id=dm.dc_model_id";
+
+        stmt.addExpectedQuery(qStr, "PulserMain",
+                              new Object[] {
+                                  MODEL_LINEAR_NAME,
+                                  new Double(regression),
+                              });
+
+        final String pStr = "select dp.name,dpp.value" +
+            " from DOMCal_PulserParam dpp,DOMCal_Param dp" +
+            " where dpp.domcal_id=" + domcalId +
+            " and dpp.dc_param_id=dp.dc_param_id";
+
+        MockResultSet rs = new MockResultSet("PulserData");
+        rs.addActualRow(new Object[] {
+                            PARAM_SLOPE_NAME,
+                            new Double(slope),
+                        });
+        rs.addActualRow(new Object[] {
+                            PARAM_INTERCEPT_NAME,
+                            new Double(intercept),
+                        });
+        stmt.addExpectedQuery(pStr, rs);
+    }
+}
Index: dom-cal/src/icecube/daq/domcal/test/RandomXMLTest.java
diff -u /dev/null dom-cal/src/icecube/daq/domcal/test/RandomXMLTest.java:1.3
--- /dev/null	Tue Aug  2 08:51:58 2005
+++ dom-cal/src/icecube/daq/domcal/test/RandomXMLTest.java	Wed May  4 07:37:59 2005
@@ -0,0 +1,264 @@
+package icecube.daq.domcal.test;
+
+import icecube.daq.db.domprodtest.DOMProdTestException;
+import icecube.daq.db.domprodtest.Laboratory;
+import icecube.daq.db.domprodtest.ProductType;
+
+import icecube.daq.db.domprodtest.test.FakeUtil;
+import icecube.daq.db.domprodtest.test.MockStatement;
+
+import icecube.daq.domcal.Calibrator;
+import icecube.daq.domcal.CalibratorComparator;
+import icecube.daq.domcal.CalibratorDB;
+import icecube.daq.domcal.DOMCalibrationException;
+import icecube.daq.domcal.HVHistogram;
+
+import java.io.IOException;
+import java.io.ByteArrayInputStream;
+
+import java.sql.Date;
+import java.sql.SQLException;
+
+import java.util.Random;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.apache.log4j.BasicConfigurator;
+
+/**
+ *  Random calibrator XML tests.
+ */
+public class RandomXMLTest
+    extends TestCase
+{
+    private static long seed = 0;
+
+    /** random number generator. */
+    private Random random = (seed == 0 ? new Random() : new Random(seed));
+
+    public RandomXMLTest(String name)
+    {
+        super(name);
+    }
+
+    private static final void fillATWDData(double[][][] atwdData, int c, int b)
+    {
+        atwdData[c][b][MockSQLUtil.SLOPE_INDEX] =
+            (((double) c * (double) atwdData[c].length) +
+                (double) b) + 0.123;
+        atwdData[c][b][MockSQLUtil.INTERCEPT_INDEX] =
+            (((double) c * (double) atwdData[c].length) +
+                (double) b) + 0.456;
+        atwdData[c][b][MockSQLUtil.REGRESSION_INDEX] =
+            (((double) c * (double) atwdData[c].length) +
+                (double) b) + 0.789;
+    }
+
+    protected void setUp()
+        throws Exception
+    {
+        super.setUp();
+
+        /* Setup the logging infrastructure */
+        BasicConfigurator.configure();
+
+        MockCalDB.initStatic();
+    }
+
+    public static TestSuite suite()
+    {
+        return new TestSuite(RandomXMLTest.class);
+    }
+
+    protected void tearDown()
+        throws Exception
+    {
+        super.tearDown();
+
+        MockCalDB.verifyStatic();
+    }
+
+    public void testCompare()
+        throws DOMCalibrationException, DOMProdTestException, IOException,
+               SQLException
+    {
+        final Date date = Date.valueOf("2004-03-02");
+        final String mbHardSerial = "0123456789ab";
+        final double temp = random.nextDouble();
+
+        final short[] adcs = new short[24];
+        for (int i = 0; i < adcs.length; i++) {
+            int val = random.nextInt();
+            if (val < 0) {
+                val = -val;
+            }
+            adcs[i] = (short) (val % Short.MAX_VALUE);
+        };
+        final short[] dacs = new short[16];
+        for (int i = 0; i < dacs.length; i++) {
+            int val = random.nextInt();
+            if (val < 0) {
+                val = -val;
+            }
+            dacs[i] = (short) (val % Short.MAX_VALUE);
+        };
+
+        final double pulserSlope = random.nextDouble();
+        final double pulserIntercept = random.nextDouble();
+        final double pulserRegression = random.nextDouble();
+
+        final double[][][] atwdData =
+            new double[random.nextInt(8)][random.nextInt(128)][3];
+        for (int c = 0; c < atwdData.length; c++) {
+            for (int b = 0; b < atwdData[c].length; b++) {
+                for (int a = 0; a < atwdData[c][b].length; a++) {
+                    atwdData[c][b][a] = random.nextDouble();
+                }
+            }
+        }
+
+        final double[] ampGain = new double[3];
+        final double[] ampError = new double[3];
+        for (int i = 0; i < 3; i++) {
+            ampGain[i] = random.nextDouble();
+            ampError[i] = random.nextDouble();
+        }
+
+        final double[][] freqData = new double[random.nextInt(2)][3];
+        for (int i = 0; i < freqData.length; i++) {
+            for (int j = 0; j < freqData[i].length; j++) {
+                freqData[i][j] = random.nextDouble();
+            }
+        }
+
+        final double hvGainSlope = random.nextDouble();
+        final double hvGainIntercept = random.nextDouble();
+        final double hvGainRegression = random.nextDouble();
+
+        HVHistogram[] histo = new HVHistogram[2];
+        for (int i = 0; i < histo.length; i++) {
+            float[] paramVals = new float[] {
+                (float) i + 12.3456f,
+                (float) i + 6.78901f,
+                (float) i + 6.54321f,
+                (float) i + 1.23456f,
+                (float) i + 65.4321f,
+            };
+
+            float[] charge = new float[250];
+            float[] count = new float[250];
+            for (int j = 0; j < 250; j++) {
+                charge[i] = (float) j * 0.016f;
+                count[i] = (float) (j % 16) + (i == 0 ? 13.0f : 17.0f);
+            }
+
+            histo[i] = new HVHistogram((short) (1400 + (i * 100)), paramVals,
+                                       charge, count, (i == 0),
+                                       (float) i + 1.23456f,
+                                       1234.0f + ((float) i * 2.3456f),
+                                       (i == 1));
+        };
+
+        FakeCalXML xml = new FakeCalXML(date, mbHardSerial, temp);
+
+        xml.setDACs(dacs);
+        xml.setADCs(adcs);
+
+        xml.setPulser(pulserSlope, pulserIntercept, pulserRegression);
+
+        for (int c = 0; c < atwdData.length; c++) {
+            for (int b = 0; b < atwdData[c].length; b++) {
+                xml.setATWD(c, b, atwdData[c][b][MockSQLUtil.SLOPE_INDEX],
+                            atwdData[c][b][MockSQLUtil.INTERCEPT_INDEX],
+                            atwdData[c][b][MockSQLUtil.REGRESSION_INDEX]);
+            }
+        }
+
+        for (int i = 0; i < 3; i++) {
+            xml.setAmplifier(i, ampGain[i], ampError[i]);
+        }
+
+        for (int i = 0; i < freqData.length; i++) {
+            xml.setATWDFrequency(i, freqData[i][0], freqData[i][1],
+                                 freqData[i][2]);
+        }
+
+        xml.setHvGain(hvGainSlope, hvGainIntercept, hvGainRegression);
+        xml.setHvHistograms(histo);
+
+        final String xmlStr = xml.toString();
+
+        ByteArrayInputStream strIn =
+            new ByteArrayInputStream(xmlStr.getBytes());
+
+        Calibrator fiCal = new Calibrator(strIn);
+
+        try {
+            strIn.close();
+        } catch (IOException ioe) {
+            // ignore errors on close
+        }
+
+        final String mainbdTagSerial = "V01 23";
+        final String domTagSerial = "XX401P0123";
+
+        MockStatement stmt = new MockStatement("LoadStmt");
+
+        Laboratory lab = FakeUtil.fakeLab(stmt, 10, 1, 100000);
+
+        final int domcalId = lab.getMinimumId() + 10;
+
+        if (!ProductType.isInitialized()) {
+            MockSQLUtil.addProductTypeSQL(stmt, MockSQLUtil.DOM_TYPE_ID,
+                                          MockSQLUtil.MAINBD_TYPE_ID);
+        }
+
+        MockSQLUtil.addProductSQL(stmt, MockSQLUtil.MAINBD_TYPE_ID,
+                                  mbHardSerial, MockSQLUtil.MAINBD_ID,
+                                  mainbdTagSerial, MockSQLUtil.DOM_TYPE_ID,
+                                  MockSQLUtil.DOM_ID, domTagSerial);
+
+        MockSQLUtil.addMainSQL(stmt, MockSQLUtil.DOM_ID, date, temp, domcalId);
+
+        MockSQLUtil.addChanValSQL(stmt, "ADC", domcalId, adcs);
+        MockSQLUtil.addChanValSQL(stmt, "DAC", domcalId, dacs);
+        MockSQLUtil.addPulserSQL(stmt, domcalId, pulserSlope,
+                                 pulserIntercept, pulserRegression);
+        MockSQLUtil.addATWDSQL(stmt, domcalId, atwdData);
+        MockSQLUtil.addAmpGainSQL(stmt, domcalId, ampGain, ampError);
+        MockSQLUtil.addATWDFreqSQL(stmt, domcalId, freqData);
+        MockSQLUtil.addHvGainSQL(stmt, domcalId, hvGainSlope, hvGainIntercept,
+                                 hvGainRegression);
+        MockSQLUtil.addHvHistoSQL(stmt, domcalId, histo);
+
+        MockCalDB calDB = new MockCalDB();
+        calDB.addActualStatement(stmt);
+
+        calDB.setLaboratory(lab);
+
+        Calibrator dbCal = calDB.load(mbHardSerial, date, temp);
+
+        assertTrue("Loaded calibrator doesn't match DB calibrator",
+                   CalibratorComparator.compare(fiCal, dbCal, true) == 0);
+    }
+
+    public static void main(String args[])
+    {
+        for (int i = 0; i < args.length; i++) {
+            if (seed != 0) {
+                System.err.println("Do not specify multiple andom seeds");
+                System.exit(1);
+            }
+
+            seed = Long.parseLong(args[i]);
+
+            if (seed == 0) {
+                System.err.println("Random seed cannot be zero");
+                System.exit(1);
+            }
+        }
+
+        junit.textui.TestRunner.run(suite());
+    }
+}
